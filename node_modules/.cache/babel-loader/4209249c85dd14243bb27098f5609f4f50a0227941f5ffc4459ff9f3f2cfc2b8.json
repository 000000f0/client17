{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst ThreadMemberFlagsBitField = require('../util/ThreadMemberFlagsBitField');\n\n/**\n * Represents a Member for a Thread.\n * @extends {Base}\n */\nclass ThreadMember extends Base {\n  constructor(thread, data) {\n    let extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(thread.client);\n\n    /**\n     * The thread that this member is a part of\n     * @type {ThreadChannel}\n     */\n    this.thread = thread;\n\n    /**\n     * The timestamp the member last joined the thread at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The flags for this thread member. This will be `null` if partial.\n     * @type {?ThreadMemberFlagsBitField}\n     */\n    this.flags = null;\n\n    /**\n     * The id of the thread member\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data, extra);\n  }\n  _patch(data) {\n    let extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if ('join_timestamp' in data) this.joinedTimestamp = Date.parse(data.join_timestamp);\n    if ('flags' in data) this.flags = new ThreadMemberFlagsBitField(data.flags).freeze();\n    if ('member' in data) {\n      /**\n       * The guild member associated with this thread member.\n       * @type {?GuildMember}\n       * @private\n       */\n      this.member = this.thread.guild.members._add(data.member, extra.cache);\n    } else {\n      this.member ??= null;\n    }\n  }\n\n  /**\n   * Whether this thread member is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.flags === null;\n  }\n\n  /**\n   * The guild member associated with this thread member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get guildMember() {\n    return this.member ?? this.thread.guild.members.resolve(this.id);\n  }\n\n  /**\n   * The last time this member joined the thread\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The user associated with this thread member\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.id);\n  }\n\n  /**\n   * Whether the client user can manage this thread member\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    return !this.thread.archived && this.thread.editable;\n  }\n\n  /**\n   * Removes this member from the thread.\n   * @param {string} [reason] Reason for removing the member\n   * @returns {ThreadMember}\n   */\n  async remove(reason) {\n    await this.thread.members.remove(this.id, reason);\n    return this;\n  }\n}\nmodule.exports = ThreadMember;","map":{"version":3,"names":["Base","require","ThreadMemberFlagsBitField","ThreadMember","constructor","thread","data","extra","arguments","length","undefined","client","joinedTimestamp","flags","id","user_id","_patch","Date","parse","join_timestamp","freeze","member","guild","members","_add","cache","partial","guildMember","resolve","joinedAt","user","users","manageable","archived","editable","remove","reason","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/ThreadMember.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst ThreadMemberFlagsBitField = require('../util/ThreadMemberFlagsBitField');\n\n/**\n * Represents a Member for a Thread.\n * @extends {Base}\n */\nclass ThreadMember extends Base {\n  constructor(thread, data, extra = {}) {\n    super(thread.client);\n\n    /**\n     * The thread that this member is a part of\n     * @type {ThreadChannel}\n     */\n    this.thread = thread;\n\n    /**\n     * The timestamp the member last joined the thread at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The flags for this thread member. This will be `null` if partial.\n     * @type {?ThreadMemberFlagsBitField}\n     */\n    this.flags = null;\n\n    /**\n     * The id of the thread member\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n\n    this._patch(data, extra);\n  }\n\n  _patch(data, extra = {}) {\n    if ('join_timestamp' in data) this.joinedTimestamp = Date.parse(data.join_timestamp);\n    if ('flags' in data) this.flags = new ThreadMemberFlagsBitField(data.flags).freeze();\n\n    if ('member' in data) {\n      /**\n       * The guild member associated with this thread member.\n       * @type {?GuildMember}\n       * @private\n       */\n      this.member = this.thread.guild.members._add(data.member, extra.cache);\n    } else {\n      this.member ??= null;\n    }\n  }\n\n  /**\n   * Whether this thread member is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.flags === null;\n  }\n\n  /**\n   * The guild member associated with this thread member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get guildMember() {\n    return this.member ?? this.thread.guild.members.resolve(this.id);\n  }\n\n  /**\n   * The last time this member joined the thread\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The user associated with this thread member\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.id);\n  }\n\n  /**\n   * Whether the client user can manage this thread member\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    return !this.thread.archived && this.thread.editable;\n  }\n\n  /**\n   * Removes this member from the thread.\n   * @param {string} [reason] Reason for removing the member\n   * @returns {ThreadMember}\n   */\n  async remove(reason) {\n    await this.thread.members.remove(this.id, reason);\n    return this;\n  }\n}\n\nmodule.exports = ThreadMember;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMC,yBAAyB,GAAGD,OAAO,CAAC,mCAAmC,CAAC;;AAE9E;AACA;AACA;AACA;AACA,MAAME,YAAY,SAASH,IAAI,CAAC;EAC9BI,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAc;IAAA,IAAZC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAClC,KAAK,CAACH,MAAM,CAACM,MAAM,CAAC;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACN,MAAM,GAAGA,MAAM;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACO,eAAe,GAAG,IAAI;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACJ;AACA;AACA;IACI,IAAI,CAACC,EAAE,GAAGR,IAAI,CAACS,OAAO;IAEtB,IAAI,CAACC,MAAM,CAACV,IAAI,EAAEC,KAAK,CAAC;EAC1B;EAEAS,MAAMA,CAACV,IAAI,EAAc;IAAA,IAAZC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACrB,IAAI,gBAAgB,IAAIF,IAAI,EAAE,IAAI,CAACM,eAAe,GAAGK,IAAI,CAACC,KAAK,CAACZ,IAAI,CAACa,cAAc,CAAC;IACpF,IAAI,OAAO,IAAIb,IAAI,EAAE,IAAI,CAACO,KAAK,GAAG,IAAIX,yBAAyB,CAACI,IAAI,CAACO,KAAK,CAAC,CAACO,MAAM,EAAE;IAEpF,IAAI,QAAQ,IAAId,IAAI,EAAE;MACpB;AACN;AACA;AACA;AACA;MACM,IAAI,CAACe,MAAM,GAAG,IAAI,CAAChB,MAAM,CAACiB,KAAK,CAACC,OAAO,CAACC,IAAI,CAAClB,IAAI,CAACe,MAAM,EAAEd,KAAK,CAACkB,KAAK,CAAC;IACxE,CAAC,MAAM;MACL,IAAI,CAACJ,MAAM,KAAK,IAAI;IACtB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIK,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACb,KAAK,KAAK,IAAI;EAC5B;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIc,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACN,MAAM,IAAI,IAAI,CAAChB,MAAM,CAACiB,KAAK,CAACC,OAAO,CAACK,OAAO,CAAC,IAAI,CAACd,EAAE,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIe,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAACjB,eAAe,IAAI,IAAIK,IAAI,CAAC,IAAI,CAACL,eAAe,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIkB,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACnB,MAAM,CAACoB,KAAK,CAACH,OAAO,CAAC,IAAI,CAACd,EAAE,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIkB,UAAUA,CAAA,EAAG;IACf,OAAO,CAAC,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,IAAI,IAAI,CAAC5B,MAAM,CAAC6B,QAAQ;EACtD;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,MAAMA,CAACC,MAAM,EAAE;IACnB,MAAM,IAAI,CAAC/B,MAAM,CAACkB,OAAO,CAACY,MAAM,CAAC,IAAI,CAACrB,EAAE,EAAEsB,MAAM,CAAC;IACjD,OAAO,IAAI;EACb;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGnC,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}