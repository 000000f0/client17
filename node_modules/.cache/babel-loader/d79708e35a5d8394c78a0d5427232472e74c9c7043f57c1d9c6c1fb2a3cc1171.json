{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  makeURLSearchParams\n} = require('@discordjs/rest');\nconst {\n  OAuth2Scopes,\n  Routes\n} = require('discord-api-types/v10');\nconst BaseClient = require('./BaseClient');\nconst ActionsManager = require('./actions/ActionsManager');\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\nconst WebSocketManager = require('./websocket/WebSocketManager');\nconst {\n  DiscordjsError,\n  DiscordjsTypeError,\n  DiscordjsRangeError,\n  ErrorCodes\n} = require('../errors');\nconst BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');\nconst ChannelManager = require('../managers/ChannelManager');\nconst GuildManager = require('../managers/GuildManager');\nconst UserManager = require('../managers/UserManager');\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\nconst ClientPresence = require('../structures/ClientPresence');\nconst GuildPreview = require('../structures/GuildPreview');\nconst GuildTemplate = require('../structures/GuildTemplate');\nconst Invite = require('../structures/Invite');\nconst {\n  Sticker\n} = require('../structures/Sticker');\nconst StickerPack = require('../structures/StickerPack');\nconst VoiceRegion = require('../structures/VoiceRegion');\nconst Webhook = require('../structures/Webhook');\nconst Widget = require('../structures/Widget');\nconst DataResolver = require('../util/DataResolver');\nconst Events = require('../util/Events');\nconst IntentsBitField = require('../util/IntentsBitField');\nconst Options = require('../util/Options');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst Status = require('../util/Status');\nconst Sweepers = require('../util/Sweepers');\n\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} options Options for the client\n   */\n  constructor(options) {\n    super(options);\n    const data = require('node:worker_threads').workerData ?? process.env;\n    const defaults = Options.createDefault();\n    if (this.options.shards === defaults.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n    if (this.options.shardCount === defaults.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n    const typeofShards = typeof this.options.shards;\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({\n        length: this.options.shardCount\n      }, (_, i) => i);\n    }\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [...new Set(this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)))];\n    }\n    this._validateOptions();\n\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The voice manager of the client\n     * @type {ClientVoiceManager}\n     */\n    this.voice = new ClientVoiceManager(this);\n\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n    this.shard = process.env.SHARDING_MANAGER ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE) : null;\n\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their ids\n     * @type {UserManager}\n     */\n    this.users = new UserManager(this);\n\n    /**\n     * All of the guilds the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n    this.guilds = new GuildManager(this);\n\n    /**\n     * All of the {@link BaseChannel}s that the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n    this.channels = new ChannelManager(this);\n\n    /**\n     * The sweeping functions and their intervals used to periodically sweep caches\n     * @type {Sweepers}\n     */\n    this.sweepers = new Sweepers(this, this.options.sweepers);\n\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n    this.presence = new ClientPresence(this, this.options.presence);\n    Object.defineProperty(this, 'token', {\n      writable: true\n    });\n    if (!this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot.\n       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * The application of this bot\n     * @type {?ClientApplication}\n     */\n    this.application = null;\n\n    /**\n     * Timestamp of the time the client was last {@link Status.Ready} at\n     * @type {?number}\n     */\n    this.readyTimestamp = null;\n  }\n\n  /**\n   * All custom emojis that the client has access to, mapped by their ids\n   * @type {BaseGuildEmojiManager}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new BaseGuildEmojiManager(this);\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * Time at which the client was last regarded as being in the {@link Status.Ready} state\n   * (each time the client disconnects and successfully reconnects, this will be overwritten)\n   * @type {?Date}\n   * @readonly\n   */\n  get readyAt() {\n    return this.readyTimestamp && new Date(this.readyTimestamp);\n  }\n\n  /**\n   * How long it has been since the client last entered the {@link Status.Ready} state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyTimestamp && Date.now() - this.readyTimestamp;\n  }\n\n  /**\n   * Logs the client in, establishing a WebSocket connection to Discord.\n   * @param {string} [token=this.token] Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n  async login() {\n    let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.token;\n    if (!token || typeof token !== 'string') throw new DiscordjsError(ErrorCodes.TokenInvalid);\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.rest.setToken(token);\n    this.emit(Events.Debug, `Provided token: ${this._censoredToken}`);\n    if (this.options.presence) {\n      this.options.ws.presence = this.presence._parse(this.options.presence);\n    }\n    this.emit(Events.Debug, 'Preparing to connect to the gateway...');\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      this.destroy();\n      throw error;\n    }\n  }\n\n  /**\n   * Returns whether the client has logged in, indicative of being able to access\n   * properties such as `user` and `application`.\n   * @returns {boolean}\n   */\n  isReady() {\n    return this.ws.status === Status.Ready;\n  }\n\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {void}\n   */\n  destroy() {\n    super.destroy();\n    this.sweepers.destroy();\n    this.ws.destroy();\n    this.token = null;\n    this.rest.setToken(null);\n  }\n\n  /**\n   * Options used when fetching an invite from Discord.\n   * @typedef {Object} ClientFetchInviteOptions\n   * @property {Snowflake} [guildScheduledEventId] The id of the guild scheduled event to include with\n   * the invite\n   */\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @param {ClientFetchInviteOptions} [options] Options for fetching the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/djs')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n  async fetchInvite(invite, options) {\n    const code = DataResolver.resolveInviteCode(invite);\n    const query = makeURLSearchParams({\n      with_counts: true,\n      with_expiration: true,\n      guild_scheduled_event_id: options?.guildScheduledEventId\n    });\n    const data = await this.rest.get(Routes.invite(code), {\n      query\n    });\n    return new Invite(this, data);\n  }\n\n  /**\n   * Obtains a template from Discord.\n   * @param {GuildTemplateResolvable} template Template code or URL\n   * @returns {Promise<GuildTemplate>}\n   * @example\n   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n   *   .then(template => console.log(`Obtained template with code: ${template.code}`))\n   *   .catch(console.error);\n   */\n  async fetchGuildTemplate(template) {\n    const code = DataResolver.resolveGuildTemplateCode(template);\n    const data = await this.rest.get(Routes.template(code));\n    return new GuildTemplate(this, data);\n  }\n\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id The webhook's id\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n  async fetchWebhook(id, token) {\n    const data = await this.rest.get(Routes.webhook(id, token), {\n      auth: token === undefined\n    });\n    return new Webhook(this, {\n      token,\n      ...data\n    });\n  }\n\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchVoiceRegions() {\n    const apiRegions = await this.rest.get(Routes.voiceRegions());\n    const regions = new Collection();\n    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));\n    return regions;\n  }\n\n  /**\n   * Obtains a sticker from Discord.\n   * @param {Snowflake} id The sticker's id\n   * @returns {Promise<Sticker>}\n   * @example\n   * client.fetchSticker('id')\n   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  async fetchSticker(id) {\n    const data = await this.rest.get(Routes.sticker(id));\n    return new Sticker(this, data);\n  }\n\n  /**\n   * Obtains the list of sticker packs available to Nitro subscribers from Discord.\n   * @returns {Promise<Collection<Snowflake, StickerPack>>}\n   * @example\n   * client.fetchPremiumStickerPacks()\n   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchPremiumStickerPacks() {\n    const data = await this.rest.get(Routes.nitroStickerPacks());\n    return new Collection(data.sticker_packs.map(p => [p.id, new StickerPack(this, p)]));\n  }\n\n  /**\n   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchGuildPreview(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');\n    const data = await this.rest.get(Routes.guildPreview(id));\n    return new GuildPreview(this, data);\n  }\n\n  /**\n   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.\n   * @param {GuildResolvable} guild The guild to fetch the widget data for\n   * @returns {Promise<Widget>}\n   */\n  async fetchGuildWidget(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');\n    const data = await this.rest.get(Routes.guildWidgetJSON(id));\n    return new Widget(this, data);\n  }\n\n  /**\n   * Options for {@link Client#generateInvite}.\n   * @typedef {Object} InviteGenerationOptions\n   * @property {OAuth2Scopes[]} scopes Scopes that should be requested\n   * @property {PermissionResolvable} [permissions] Permissions to request\n   * @property {GuildResolvable} [guild] Guild to preselect\n   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection\n   */\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {InviteGenerationOptions} [options={}] Options for the invite\n   * @returns {string}\n   * @example\n   * const link = client.generateInvite({\n   *   scopes: [OAuth2Scopes.ApplicationsCommands],\n   * });\n   * console.log(`Generated application invite link: ${link}`);\n   * @example\n   * const link = client.generateInvite({\n   *   permissions: [\n   *     PermissionFlagsBits.SendMessages,\n   *     PermissionFlagsBits.ManageGuild,\n   *     PermissionFlagsBits.MentionEveryone,\n   *   ],\n   *   scopes: [OAuth2Scopes.Bot],\n   * });\n   * console.log(`Generated bot invite link: ${link}`);\n   */\n  generateInvite() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    if (!this.application) throw new DiscordjsError(ErrorCodes.ClientNotReady, 'generate an invite link');\n    const {\n      scopes\n    } = options;\n    if (scopes === undefined) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);\n    }\n    if (!Array.isArray(scopes)) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'scopes', 'Array of Invite Scopes', true);\n    }\n    if (!scopes.some(scope => [OAuth2Scopes.Bot, OAuth2Scopes.ApplicationsCommands].includes(scope))) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);\n    }\n    if (!scopes.includes(OAuth2Scopes.Bot) && options.permissions) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidScopesWithPermissions);\n    }\n    const validScopes = Object.values(OAuth2Scopes);\n    const invalidScope = scopes.find(scope => !validScopes.includes(scope));\n    if (invalidScope) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'scopes', invalidScope);\n    }\n    const query = makeURLSearchParams({\n      client_id: this.application.id,\n      scope: scopes.join(' '),\n      disable_guild_select: options.disableGuildSelect\n    });\n    if (options.permissions) {\n      const permissions = PermissionsBitField.resolve(options.permissions);\n      if (permissions) query.set('permissions', permissions.toString());\n    }\n    if (options.guild) {\n      const guildId = this.guilds.resolveId(options.guild);\n      if (!guildId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options.guild', 'GuildResolvable');\n      query.set('guild_id', guildId);\n    }\n    return `${this.options.rest.api}${Routes.oauth2Authorization()}?${query}`;\n  }\n  toJSON() {\n    return super.toJSON({\n      actions: false,\n      presence: false\n    });\n  }\n\n  /**\n   * Partially censored client token for debug logging purposes.\n   * @type {?string}\n   * @readonly\n   * @private\n   */\n  get _censoredToken() {\n    if (!this.token) return null;\n    return this.token.split('.').map((val, i) => i > 1 ? val.replace(/./g, '*') : val).join('.');\n  }\n\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n  _eval(script) {\n    return eval(script);\n  }\n\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n  _validateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;\n    if (options.intents === undefined) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientMissingIntents);\n    } else {\n      options.intents = new IntentsBitField(options.intents).freeze();\n    }\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardCount', 'a number greater than or equal to 1');\n    }\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shards', \"'auto', a number or array of numbers\");\n    }\n    if (options.shards && !options.shards.length) throw new DiscordjsRangeError(ErrorCodes.ClientInvalidProvidedShards);\n    if (typeof options.makeCache !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'makeCache', 'a function');\n    }\n    if (typeof options.sweepers !== 'object' || options.sweepers === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'sweepers', 'an object');\n    }\n    if (!Array.isArray(options.partials)) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'partials', 'an Array');\n    }\n    if (typeof options.waitGuildTimeout !== 'number' || isNaN(options.waitGuildTimeout)) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'waitGuildTimeout', 'a number');\n    }\n    if (typeof options.failIfNotExists !== 'boolean') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'failIfNotExists', 'a boolean');\n    }\n    if (typeof options.allowedMentions !== 'object' && options.allowedMentions !== undefined || options.allowedMentions === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'allowedMentions', 'an object');\n    }\n    if (typeof options.presence !== 'object' || options.presence === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'presence', 'an object');\n    }\n    if (typeof options.ws !== 'object' || options.ws === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'ws', 'an object');\n    }\n    if (typeof options.rest !== 'object' || options.rest === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'rest', 'an object');\n    }\n    if (typeof options.jsonTransformer !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'jsonTransformer', 'a function');\n    }\n  }\n}\nmodule.exports = Client;\n\n/**\n * @class SnowflakeUtil\n * @classdesc This class is an alias for {@link https://www.npmjs.com/package/@sapphire/snowflake @sapphire/snowflake}'s\n * `DiscordSnowflake` class.\n *\n * Check their documentation\n * {@link https://www.sapphirejs.dev/docs/Documentation/api-utilities/classes/sapphire_snowflake.Snowflake here}\n * ({@link https://www.sapphirejs.dev/docs/Guide/utilities/snowflake guide})\n * to see what you can do.\n * @hideconstructor\n */\n\n/**\n * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},\n * except the epoch is 2015-01-01T00:00:00.000Z.\n *\n * If we have a snowflake '266241948824764416' we can represent it as binary:\n * ```\n * 64                                          22     17     12          0\n *  000000111011000111100001101001000101000000  00001  00000  000000000000\n *  number of milliseconds since Discord epoch  worker  pid    increment\n * ```\n * @typedef {string} Snowflake\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */\n\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/docs/packages/collection/stable/Collection:Class}\n */\n\n/**\n * @external ImageURLOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/ImageURLOptions:Interface}\n */\n\n/**\n * @external BaseImageURLOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/BaseImageURLOptions:Interface}\n */","map":{"version":3,"names":["process","require","Collection","makeURLSearchParams","OAuth2Scopes","Routes","BaseClient","ActionsManager","ClientVoiceManager","WebSocketManager","DiscordjsError","DiscordjsTypeError","DiscordjsRangeError","ErrorCodes","BaseGuildEmojiManager","ChannelManager","GuildManager","UserManager","ShardClientUtil","ClientPresence","GuildPreview","GuildTemplate","Invite","Sticker","StickerPack","VoiceRegion","Webhook","Widget","DataResolver","Events","IntentsBitField","Options","PermissionsBitField","Status","Sweepers","Client","constructor","options","data","workerData","env","defaults","createDefault","shards","JSON","parse","SHARDS","shardCount","Number","SHARD_COUNT","Array","isArray","length","typeofShards","from","_","i","Set","filter","item","isNaN","Infinity","_validateOptions","ws","actions","voice","shard","SHARDING_MANAGER","singleton","SHARDING_MANAGER_MODE","users","guilds","channels","sweepers","presence","Object","defineProperty","writable","token","DISCORD_TOKEN","user","application","readyTimestamp","emojis","guild","cache","values","available","emoji","set","id","readyAt","Date","uptime","now","login","arguments","undefined","TokenInvalid","replace","rest","setToken","emit","Debug","_censoredToken","_parse","connect","error","destroy","isReady","status","Ready","fetchInvite","invite","code","resolveInviteCode","query","with_counts","with_expiration","guild_scheduled_event_id","guildScheduledEventId","get","fetchGuildTemplate","template","resolveGuildTemplateCode","fetchWebhook","webhook","auth","fetchVoiceRegions","apiRegions","voiceRegions","regions","region","fetchSticker","sticker","fetchPremiumStickerPacks","nitroStickerPacks","sticker_packs","map","p","fetchGuildPreview","resolveId","InvalidType","guildPreview","fetchGuildWidget","guildWidgetJSON","generateInvite","ClientNotReady","scopes","InvalidMissingScopes","some","scope","Bot","ApplicationsCommands","includes","permissions","InvalidScopesWithPermissions","validScopes","invalidScope","find","InvalidElement","client_id","join","disable_guild_select","disableGuildSelect","resolve","toString","guildId","api","oauth2Authorization","toJSON","split","val","_eval","script","eval","intents","ClientMissingIntents","freeze","ClientInvalidOption","ClientInvalidProvidedShards","makeCache","partials","waitGuildTimeout","failIfNotExists","allowedMentions","jsonTransformer","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/client/Client.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { OAuth2Scopes, Routes } = require('discord-api-types/v10');\nconst BaseClient = require('./BaseClient');\nconst ActionsManager = require('./actions/ActionsManager');\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\nconst WebSocketManager = require('./websocket/WebSocketManager');\nconst { DiscordjsError, DiscordjsTypeError, DiscordjsRangeError, ErrorCodes } = require('../errors');\nconst BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');\nconst ChannelManager = require('../managers/ChannelManager');\nconst GuildManager = require('../managers/GuildManager');\nconst UserManager = require('../managers/UserManager');\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\nconst ClientPresence = require('../structures/ClientPresence');\nconst GuildPreview = require('../structures/GuildPreview');\nconst GuildTemplate = require('../structures/GuildTemplate');\nconst Invite = require('../structures/Invite');\nconst { Sticker } = require('../structures/Sticker');\nconst StickerPack = require('../structures/StickerPack');\nconst VoiceRegion = require('../structures/VoiceRegion');\nconst Webhook = require('../structures/Webhook');\nconst Widget = require('../structures/Widget');\nconst DataResolver = require('../util/DataResolver');\nconst Events = require('../util/Events');\nconst IntentsBitField = require('../util/IntentsBitField');\nconst Options = require('../util/Options');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst Status = require('../util/Status');\nconst Sweepers = require('../util/Sweepers');\n\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} options Options for the client\n   */\n  constructor(options) {\n    super(options);\n\n    const data = require('node:worker_threads').workerData ?? process.env;\n    const defaults = Options.createDefault();\n\n    if (this.options.shards === defaults.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (this.options.shardCount === defaults.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n\n    const typeofShards = typeof this.options.shards;\n\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({ length: this.options.shardCount }, (_, i) => i);\n    }\n\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [\n        ...new Set(\n          this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)),\n        ),\n      ];\n    }\n\n    this._validateOptions();\n\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The voice manager of the client\n     * @type {ClientVoiceManager}\n     */\n    this.voice = new ClientVoiceManager(this);\n\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n    this.shard = process.env.SHARDING_MANAGER\n      ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE)\n      : null;\n\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their ids\n     * @type {UserManager}\n     */\n    this.users = new UserManager(this);\n\n    /**\n     * All of the guilds the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n    this.guilds = new GuildManager(this);\n\n    /**\n     * All of the {@link BaseChannel}s that the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n    this.channels = new ChannelManager(this);\n\n    /**\n     * The sweeping functions and their intervals used to periodically sweep caches\n     * @type {Sweepers}\n     */\n    this.sweepers = new Sweepers(this, this.options.sweepers);\n\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n    this.presence = new ClientPresence(this, this.options.presence);\n\n    Object.defineProperty(this, 'token', { writable: true });\n    if (!this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot.\n       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * The application of this bot\n     * @type {?ClientApplication}\n     */\n    this.application = null;\n\n    /**\n     * Timestamp of the time the client was last {@link Status.Ready} at\n     * @type {?number}\n     */\n    this.readyTimestamp = null;\n  }\n\n  /**\n   * All custom emojis that the client has access to, mapped by their ids\n   * @type {BaseGuildEmojiManager}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new BaseGuildEmojiManager(this);\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * Time at which the client was last regarded as being in the {@link Status.Ready} state\n   * (each time the client disconnects and successfully reconnects, this will be overwritten)\n   * @type {?Date}\n   * @readonly\n   */\n  get readyAt() {\n    return this.readyTimestamp && new Date(this.readyTimestamp);\n  }\n\n  /**\n   * How long it has been since the client last entered the {@link Status.Ready} state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyTimestamp && Date.now() - this.readyTimestamp;\n  }\n\n  /**\n   * Logs the client in, establishing a WebSocket connection to Discord.\n   * @param {string} [token=this.token] Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n  async login(token = this.token) {\n    if (!token || typeof token !== 'string') throw new DiscordjsError(ErrorCodes.TokenInvalid);\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.rest.setToken(token);\n    this.emit(Events.Debug, `Provided token: ${this._censoredToken}`);\n\n    if (this.options.presence) {\n      this.options.ws.presence = this.presence._parse(this.options.presence);\n    }\n\n    this.emit(Events.Debug, 'Preparing to connect to the gateway...');\n\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      this.destroy();\n      throw error;\n    }\n  }\n\n  /**\n   * Returns whether the client has logged in, indicative of being able to access\n   * properties such as `user` and `application`.\n   * @returns {boolean}\n   */\n  isReady() {\n    return this.ws.status === Status.Ready;\n  }\n\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {void}\n   */\n  destroy() {\n    super.destroy();\n\n    this.sweepers.destroy();\n    this.ws.destroy();\n    this.token = null;\n    this.rest.setToken(null);\n  }\n\n  /**\n   * Options used when fetching an invite from Discord.\n   * @typedef {Object} ClientFetchInviteOptions\n   * @property {Snowflake} [guildScheduledEventId] The id of the guild scheduled event to include with\n   * the invite\n   */\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @param {ClientFetchInviteOptions} [options] Options for fetching the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/djs')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n  async fetchInvite(invite, options) {\n    const code = DataResolver.resolveInviteCode(invite);\n    const query = makeURLSearchParams({\n      with_counts: true,\n      with_expiration: true,\n      guild_scheduled_event_id: options?.guildScheduledEventId,\n    });\n    const data = await this.rest.get(Routes.invite(code), { query });\n    return new Invite(this, data);\n  }\n\n  /**\n   * Obtains a template from Discord.\n   * @param {GuildTemplateResolvable} template Template code or URL\n   * @returns {Promise<GuildTemplate>}\n   * @example\n   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n   *   .then(template => console.log(`Obtained template with code: ${template.code}`))\n   *   .catch(console.error);\n   */\n  async fetchGuildTemplate(template) {\n    const code = DataResolver.resolveGuildTemplateCode(template);\n    const data = await this.rest.get(Routes.template(code));\n    return new GuildTemplate(this, data);\n  }\n\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id The webhook's id\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n  async fetchWebhook(id, token) {\n    const data = await this.rest.get(Routes.webhook(id, token), { auth: token === undefined });\n    return new Webhook(this, { token, ...data });\n  }\n\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchVoiceRegions() {\n    const apiRegions = await this.rest.get(Routes.voiceRegions());\n    const regions = new Collection();\n    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));\n    return regions;\n  }\n\n  /**\n   * Obtains a sticker from Discord.\n   * @param {Snowflake} id The sticker's id\n   * @returns {Promise<Sticker>}\n   * @example\n   * client.fetchSticker('id')\n   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  async fetchSticker(id) {\n    const data = await this.rest.get(Routes.sticker(id));\n    return new Sticker(this, data);\n  }\n\n  /**\n   * Obtains the list of sticker packs available to Nitro subscribers from Discord.\n   * @returns {Promise<Collection<Snowflake, StickerPack>>}\n   * @example\n   * client.fetchPremiumStickerPacks()\n   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchPremiumStickerPacks() {\n    const data = await this.rest.get(Routes.nitroStickerPacks());\n    return new Collection(data.sticker_packs.map(p => [p.id, new StickerPack(this, p)]));\n  }\n\n  /**\n   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchGuildPreview(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');\n    const data = await this.rest.get(Routes.guildPreview(id));\n    return new GuildPreview(this, data);\n  }\n\n  /**\n   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.\n   * @param {GuildResolvable} guild The guild to fetch the widget data for\n   * @returns {Promise<Widget>}\n   */\n  async fetchGuildWidget(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');\n    const data = await this.rest.get(Routes.guildWidgetJSON(id));\n    return new Widget(this, data);\n  }\n\n  /**\n   * Options for {@link Client#generateInvite}.\n   * @typedef {Object} InviteGenerationOptions\n   * @property {OAuth2Scopes[]} scopes Scopes that should be requested\n   * @property {PermissionResolvable} [permissions] Permissions to request\n   * @property {GuildResolvable} [guild] Guild to preselect\n   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection\n   */\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {InviteGenerationOptions} [options={}] Options for the invite\n   * @returns {string}\n   * @example\n   * const link = client.generateInvite({\n   *   scopes: [OAuth2Scopes.ApplicationsCommands],\n   * });\n   * console.log(`Generated application invite link: ${link}`);\n   * @example\n   * const link = client.generateInvite({\n   *   permissions: [\n   *     PermissionFlagsBits.SendMessages,\n   *     PermissionFlagsBits.ManageGuild,\n   *     PermissionFlagsBits.MentionEveryone,\n   *   ],\n   *   scopes: [OAuth2Scopes.Bot],\n   * });\n   * console.log(`Generated bot invite link: ${link}`);\n   */\n  generateInvite(options = {}) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    if (!this.application) throw new DiscordjsError(ErrorCodes.ClientNotReady, 'generate an invite link');\n\n    const { scopes } = options;\n    if (scopes === undefined) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);\n    }\n    if (!Array.isArray(scopes)) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'scopes', 'Array of Invite Scopes', true);\n    }\n    if (!scopes.some(scope => [OAuth2Scopes.Bot, OAuth2Scopes.ApplicationsCommands].includes(scope))) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);\n    }\n    if (!scopes.includes(OAuth2Scopes.Bot) && options.permissions) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidScopesWithPermissions);\n    }\n    const validScopes = Object.values(OAuth2Scopes);\n    const invalidScope = scopes.find(scope => !validScopes.includes(scope));\n    if (invalidScope) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'scopes', invalidScope);\n    }\n\n    const query = makeURLSearchParams({\n      client_id: this.application.id,\n      scope: scopes.join(' '),\n      disable_guild_select: options.disableGuildSelect,\n    });\n\n    if (options.permissions) {\n      const permissions = PermissionsBitField.resolve(options.permissions);\n      if (permissions) query.set('permissions', permissions.toString());\n    }\n\n    if (options.guild) {\n      const guildId = this.guilds.resolveId(options.guild);\n      if (!guildId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options.guild', 'GuildResolvable');\n      query.set('guild_id', guildId);\n    }\n\n    return `${this.options.rest.api}${Routes.oauth2Authorization()}?${query}`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      actions: false,\n      presence: false,\n    });\n  }\n\n  /**\n   * Partially censored client token for debug logging purposes.\n   * @type {?string}\n   * @readonly\n   * @private\n   */\n  get _censoredToken() {\n    if (!this.token) return null;\n\n    return this.token\n      .split('.')\n      .map((val, i) => (i > 1 ? val.replace(/./g, '*') : val))\n      .join('.');\n  }\n\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n  _eval(script) {\n    return eval(script);\n  }\n\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n  _validateOptions(options = this.options) {\n    if (options.intents === undefined) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientMissingIntents);\n    } else {\n      options.intents = new IntentsBitField(options.intents).freeze();\n    }\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardCount', 'a number greater than or equal to 1');\n    }\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shards', \"'auto', a number or array of numbers\");\n    }\n    if (options.shards && !options.shards.length) throw new DiscordjsRangeError(ErrorCodes.ClientInvalidProvidedShards);\n    if (typeof options.makeCache !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'makeCache', 'a function');\n    }\n    if (typeof options.sweepers !== 'object' || options.sweepers === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'sweepers', 'an object');\n    }\n    if (!Array.isArray(options.partials)) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'partials', 'an Array');\n    }\n    if (typeof options.waitGuildTimeout !== 'number' || isNaN(options.waitGuildTimeout)) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'waitGuildTimeout', 'a number');\n    }\n    if (typeof options.failIfNotExists !== 'boolean') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'failIfNotExists', 'a boolean');\n    }\n    if (\n      (typeof options.allowedMentions !== 'object' && options.allowedMentions !== undefined) ||\n      options.allowedMentions === null\n    ) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'allowedMentions', 'an object');\n    }\n    if (typeof options.presence !== 'object' || options.presence === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'presence', 'an object');\n    }\n    if (typeof options.ws !== 'object' || options.ws === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'ws', 'an object');\n    }\n    if (typeof options.rest !== 'object' || options.rest === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'rest', 'an object');\n    }\n    if (typeof options.jsonTransformer !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'jsonTransformer', 'a function');\n    }\n  }\n}\n\nmodule.exports = Client;\n\n/**\n * @class SnowflakeUtil\n * @classdesc This class is an alias for {@link https://www.npmjs.com/package/@sapphire/snowflake @sapphire/snowflake}'s\n * `DiscordSnowflake` class.\n *\n * Check their documentation\n * {@link https://www.sapphirejs.dev/docs/Documentation/api-utilities/classes/sapphire_snowflake.Snowflake here}\n * ({@link https://www.sapphirejs.dev/docs/Guide/utilities/snowflake guide})\n * to see what you can do.\n * @hideconstructor\n */\n\n/**\n * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},\n * except the epoch is 2015-01-01T00:00:00.000Z.\n *\n * If we have a snowflake '266241948824764416' we can represent it as binary:\n * ```\n * 64                                          22     17     12          0\n *  000000111011000111100001101001000101000000  00001  00000  000000000000\n *  number of milliseconds since Discord epoch  worker  pid    increment\n * ```\n * @typedef {string} Snowflake\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */\n\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/docs/packages/collection/stable/Collection:Class}\n */\n\n/**\n * @external ImageURLOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/ImageURLOptions:Interface}\n */\n\n/**\n * @external BaseImageURLOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/BaseImageURLOptions:Interface}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}