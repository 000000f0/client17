{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  calculateShardId: () => calculateShardId,\n  isEquatable: () => isEquatable,\n  isJSONEncodable: () => isJSONEncodable,\n  lazy: () => lazy,\n  range: () => range\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/functions/lazy.ts\nfunction lazy(cb) {\n  let defaultValue;\n  return () => defaultValue ??= cb();\n}\n__name(lazy, \"lazy\");\n\n// src/functions/range.ts\nfunction* range(range2) {\n  let rangeEnd;\n  let start = 0;\n  let step = 1;\n  if (typeof range2 === \"number\") {\n    rangeEnd = range2;\n  } else {\n    start = range2.start;\n    rangeEnd = range2.end;\n    step = range2.step ?? 1;\n  }\n  for (let index = start; index < rangeEnd; index += step) {\n    yield index;\n  }\n}\n__name(range, \"range\");\n\n// src/functions/calculateShardId.ts\nfunction calculateShardId(guildId, shardCount) {\n  return Number(BigInt(guildId) >> 22n) % shardCount;\n}\n__name(calculateShardId, \"calculateShardId\");\n\n// src/JSONEncodable.ts\nfunction isJSONEncodable(maybeEncodable) {\n  return maybeEncodable !== null && typeof maybeEncodable === \"object\" && \"toJSON\" in maybeEncodable;\n}\n__name(isJSONEncodable, \"isJSONEncodable\");\n\n// src/Equatable.ts\nfunction isEquatable(maybeEquatable) {\n  return maybeEquatable !== null && typeof maybeEquatable === \"object\" && \"equals\" in maybeEquatable;\n}\n__name(isEquatable, \"isEquatable\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  calculateShardId,\n  isEquatable,\n  isJSONEncodable,\n  lazy,\n  range\n});","map":{"version":3,"names":["src_exports","__export","calculateShardId","isEquatable","isJSONEncodable","lazy","range","module","exports","__toCommonJS","cb","defaultValue","__name","range2","rangeEnd","start","step","end","index","guildId","shardCount","Number","BigInt","maybeEncodable","maybeEquatable"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/util/src/index.ts","/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/util/src/functions/lazy.ts","/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/util/src/functions/range.ts","/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/util/src/functions/calculateShardId.ts","/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/util/src/JSONEncodable.ts","/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/util/src/Equatable.ts"],"sourcesContent":["export * from './types.js';\nexport * from './functions/index.js';\nexport * from './JSONEncodable.js';\nexport * from './Equatable.js';\n","/**\n * Lazy is a wrapper around a value that is computed lazily. It is useful for\n * cases where the value is expensive to compute and the computation may not\n * be needed at all.\n *\n * @param cb - The callback to lazily evaluate\n * @typeParam T - The type of the value\n * @example\n * ```ts\n * const value = lazy(() => computeExpensiveValue());\n * ```\n */\n// eslint-disable-next-line promise/prefer-await-to-callbacks\nexport function lazy<T>(cb: () => T): () => T {\n\tlet defaultValue: T;\n\t// eslint-disable-next-line promise/prefer-await-to-callbacks\n\treturn () => (defaultValue ??= cb());\n}\n","/**\n * Options for creating a range\n */\nexport interface RangeOptions {\n\t/**\n\t * The end of the range (exclusive)\n\t */\n\tend: number;\n\t/**\n\t * The start of the range (inclusive)\n\t */\n\tstart: number;\n\t/**\n\t * The amount to increment by\n\t *\n\t * @defaultValue `1`\n\t */\n\tstep?: number;\n}\n\n/**\n * A generator to yield numbers in a given range\n *\n * @remarks\n * This method is end-exclusive, for example the last number yielded by `range(5)` is 4. If you\n * prefer for the end to be included add 1 to the range or `end` option.\n * @param range - A number representing the the range to yield (exclusive) or an object with start, end and step\n * @example\n * Basic range\n * ```ts\n * for (const number of range(5)) {\n *  console.log(number);\n * }\n * // Prints 0, 1, 2, 3, 4\n * ```\n * @example\n * Range with a step\n * ```ts\n * for (const number of range({ start: 3, end: 10, step: 2 })) {\n * \tconsole.log(number);\n * }\n * // Prints 3, 5, 7, 9\n * ```\n */\nexport function* range(range: RangeOptions | number) {\n\tlet rangeEnd: number;\n\tlet start = 0;\n\tlet step = 1;\n\n\tif (typeof range === 'number') {\n\t\trangeEnd = range;\n\t} else {\n\t\tstart = range.start;\n\t\trangeEnd = range.end;\n\t\tstep = range.step ?? 1;\n\t}\n\n\tfor (let index = start; index < rangeEnd; index += step) {\n\t\tyield index;\n\t}\n}\n","/**\n * Calculates the shard id for a given guild id.\n *\n * @param guildId - The guild id to calculate the shard id for\n * @param shardCount - The total number of shards\n */\nexport function calculateShardId(guildId: string, shardCount: number) {\n\treturn Number(BigInt(guildId) >> 22n) % shardCount;\n}\n","/**\n * Represents an object capable of representing itself as a JSON object\n *\n * @typeParam T - The JSON type corresponding to {@link JSONEncodable.toJSON} outputs.\n */\nexport interface JSONEncodable<T> {\n\t/**\n\t * Transforms this object to its JSON format\n\t */\n\ttoJSON(): T;\n}\n\n/**\n * Indicates if an object is encodable or not.\n *\n * @param maybeEncodable - The object to check against\n */\nexport function isJSONEncodable(maybeEncodable: unknown): maybeEncodable is JSONEncodable<unknown> {\n\treturn maybeEncodable !== null && typeof maybeEncodable === 'object' && 'toJSON' in maybeEncodable;\n}\n","/**\n * Represents a structure that can be checked against another\n * given structure for equality\n *\n * @typeParam T - The type of object to compare the current object to\n */\nexport interface Equatable<T> {\n\t/**\n\t * Whether or not this is equal to another structure\n\t */\n\tequals(other: T): boolean;\n}\n\n/**\n * Indicates if an object is equatable or not.\n *\n * @param maybeEquatable - The object to check against\n */\nexport function isEquatable(maybeEquatable: unknown): maybeEquatable is Equatable<unknown> {\n\treturn maybeEquatable !== null && typeof maybeEquatable === 'object' && 'equals' in maybeEquatable;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,WAAA,EAAAA,CAAA,KAAAA,WAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA,eAAA;EAAAC,IAAA,EAAAA,CAAA,KAAAA,IAAA;EAAAC,KAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAT,WAAA;;;ACaO,SAASK,KAAQK,EAAA,EAAsB;EAC7C,IAAIC,YAAA;EAEJ,OAAO,MAAOA,YAAA,KAAiBD,EAAA,EAAG;AACnC;AAJgBE,MAAA,CAAAP,IAAA;;;AC+BT,UAAUC,MAAMO,MAAA,EAA8B;EACpD,IAAIC,QAAA;EACJ,IAAIC,KAAA,GAAQ;EACZ,IAAIC,IAAA,GAAO;EAEX,IAAI,OAAOH,MAAA,KAAU,UAAU;IAC9BC,QAAA,GAAWD,MAAA;EACZ,OAAO;IACNE,KAAA,GAAQF,MAAA,CAAME,KAAA;IACdD,QAAA,GAAWD,MAAA,CAAMI,GAAA;IACjBD,IAAA,GAAOH,MAAA,CAAMG,IAAA,IAAQ;EACtB;EAEA,SAASE,KAAA,GAAQH,KAAA,EAAOG,KAAA,GAAQJ,QAAA,EAAUI,KAAA,IAASF,IAAA,EAAM;IACxD,MAAME,KAAA;EACP;AACD;AAhBiBN,MAAA,CAAAN,KAAA;;;ACtCV,SAASJ,iBAAiBiB,OAAA,EAAiBC,UAAA,EAAoB;EACrE,OAAOC,MAAA,CAAOC,MAAA,CAAOH,OAAO,KAAK,GAAG,IAAIC,UAAA;AACzC;AAFgBR,MAAA,CAAAV,gBAAA;;;ACWT,SAASE,gBAAgBmB,cAAA,EAAmE;EAClG,OAAOA,cAAA,KAAmB,QAAQ,OAAOA,cAAA,KAAmB,YAAY,YAAYA,cAAA;AACrF;AAFgBX,MAAA,CAAAR,eAAA;;;ACCT,SAASD,YAAYqB,cAAA,EAA+D;EAC1F,OAAOA,cAAA,KAAmB,QAAQ,OAAOA,cAAA,KAAmB,YAAY,YAAYA,cAAA;AACrF;AAFgBZ,MAAA,CAAAT,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}