{"ast":null,"code":"'use strict';\n\nconst process = require('node:process');\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  makeURLSearchParams\n} = require('@discordjs/rest');\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst {\n  DiscordjsTypeError,\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst GuildBan = require('../structures/GuildBan');\nconst {\n  GuildMember\n} = require('../structures/GuildMember');\nlet deprecationEmittedForDeleteMessageDays = false;\n\n/**\n * Manages API methods for guild bans and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildBanManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildBan, iterable);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildBan>}\n   * @name GuildBanManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, {\n      id: data.user.id,\n      extras: [this.guild]\n    });\n  }\n\n  /**\n   * Data that resolves to give a GuildBan object. This can be:\n   * * A GuildBan object\n   * * A User resolvable\n   * @typedef {GuildBan|UserResolvable} GuildBanResolvable\n   */\n\n  /**\n   * Resolves a GuildBanResolvable to a GuildBan object.\n   * @param {GuildBanResolvable} ban The ban that is in the guild\n   * @returns {?GuildBan}\n   */\n  resolve(ban) {\n    return super.resolve(ban) ?? super.resolve(this.client.users.resolveId(ban));\n  }\n\n  /**\n   * Options used to fetch a single ban from a guild.\n   * @typedef {BaseFetchOptions} FetchBanOptions\n   * @property {UserResolvable} user The ban to fetch\n   */\n\n  /**\n   * Options used to fetch multiple bans from a guild.\n   * @typedef {Object} FetchBansOptions\n   * @property {number} [limit] The maximum number of bans to return\n   * @property {Snowflake} [before] Consider only bans before this id\n   * @property {Snowflake} [after] Consider only bans after this id\n   * @property {boolean} [cache] Whether to cache the fetched bans\n   */\n\n  /**\n   * Fetches ban(s) from Discord.\n   * @param {UserResolvable|FetchBanOptions|FetchBansOptions} [options] Options for fetching guild ban(s)\n   * @returns {Promise<GuildBan|Collection<Snowflake, GuildBan>>}\n   * @example\n   * // Fetch multiple bans from a guild\n   * guild.bans.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a maximum of 5 bans from a guild without caching\n   * guild.bans.fetch({ limit: 5, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban\n   * guild.bans.fetch('351871113346809860')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban without checking cache\n   * guild.bans.fetch({ user, force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single ban without caching\n   * guild.bans.fetch({ user, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const {\n      user,\n      cache,\n      force,\n      limit,\n      before,\n      after\n    } = options;\n    const resolvedUser = this.client.users.resolveId(user ?? options);\n    if (resolvedUser) return this._fetchSingle({\n      user: resolvedUser,\n      cache,\n      force\n    });\n    if (!before && !after && !limit && cache === undefined) {\n      return Promise.reject(new DiscordjsError(ErrorCodes.FetchBanResolveId));\n    }\n    return this._fetchMany(options);\n  }\n  async _fetchSingle(_ref) {\n    let {\n      user,\n      cache,\n      force = false\n    } = _ref;\n    if (!force) {\n      const existing = this.cache.get(user);\n      if (existing && !existing.partial) return existing;\n    }\n    const data = await this.client.rest.get(Routes.guildBan(this.guild.id, user));\n    return this._add(data, cache);\n  }\n  async _fetchMany() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const data = await this.client.rest.get(Routes.guildBans(this.guild.id), {\n      query: makeURLSearchParams(options)\n    });\n    return data.reduce((col, ban) => col.set(ban.user.id, this._add(ban, options.cache)), new Collection());\n  }\n\n  /**\n   * Options used to ban a user from a guild.\n   * @typedef {Object} BanOptions\n   * @property {number} [deleteMessageDays] Number of days of messages to delete, must be between 0 and 7, inclusive\n   * <warn>This property is deprecated. Use `deleteMessageSeconds` instead.</warn>\n   * @property {number} [deleteMessageSeconds] Number of seconds of messages to delete,\n   * must be between 0 and 604800 (7 days), inclusive\n   * @property {string} [reason] The reason for the ban\n   */\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user id will be the result.\n   * @example\n   * // Ban a user by id (or with a user/guild member object)\n   * guild.bans.create('84484653687267328')\n   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))\n   *   .catch(console.error);\n   */\n  async create(user) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId, true);\n    if (options.deleteMessageDays !== undefined && !deprecationEmittedForDeleteMessageDays) {\n      process.emitWarning(\n      // eslint-disable-next-line max-len\n      'The deleteMessageDays option for GuildBanManager#create() is deprecated. Use the deleteMessageSeconds option instead.', 'DeprecationWarning');\n      deprecationEmittedForDeleteMessageDays = true;\n    }\n    await this.client.rest.put(Routes.guildBan(this.guild.id, id), {\n      body: {\n        delete_message_seconds: options.deleteMessageSeconds ?? (options.deleteMessageDays ? options.deleteMessageDays * 24 * 60 * 60 : undefined)\n      },\n      reason: options.reason\n    });\n    if (user instanceof GuildMember) return user;\n    const _user = this.client.users.resolve(id);\n    if (_user) {\n      return this.guild.members.resolve(_user) ?? _user;\n    }\n    return id;\n  }\n\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning user\n   * @returns {Promise<?User>}\n   * @example\n   * // Unban a user by id (or with a user/guild member object)\n   * guild.bans.remove('84484653687267328')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n  async remove(user, reason) {\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId);\n    await this.client.rest.delete(Routes.guildBan(this.guild.id, id), {\n      reason\n    });\n    return this.client.users.resolve(user);\n  }\n}\nmodule.exports = GuildBanManager;","map":{"version":3,"names":["process","require","Collection","makeURLSearchParams","Routes","CachedManager","DiscordjsTypeError","DiscordjsError","ErrorCodes","GuildBan","GuildMember","deprecationEmittedForDeleteMessageDays","GuildBanManager","constructor","guild","iterable","client","_add","data","cache","id","user","extras","resolve","ban","users","resolveId","fetch","options","_fetchMany","force","limit","before","after","resolvedUser","_fetchSingle","undefined","Promise","reject","FetchBanResolveId","_ref","existing","get","partial","rest","guildBan","arguments","length","guildBans","query","reduce","col","set","create","InvalidType","BanResolveId","deleteMessageDays","emitWarning","put","body","delete_message_seconds","deleteMessageSeconds","reason","_user","members","remove","delete","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/managers/GuildBanManager.js"],"sourcesContent":["'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, DiscordjsError, ErrorCodes } = require('../errors');\nconst GuildBan = require('../structures/GuildBan');\nconst { GuildMember } = require('../structures/GuildMember');\n\nlet deprecationEmittedForDeleteMessageDays = false;\n\n/**\n * Manages API methods for guild bans and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildBanManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildBan, iterable);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildBan>}\n   * @name GuildBanManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.user.id, extras: [this.guild] });\n  }\n\n  /**\n   * Data that resolves to give a GuildBan object. This can be:\n   * * A GuildBan object\n   * * A User resolvable\n   * @typedef {GuildBan|UserResolvable} GuildBanResolvable\n   */\n\n  /**\n   * Resolves a GuildBanResolvable to a GuildBan object.\n   * @param {GuildBanResolvable} ban The ban that is in the guild\n   * @returns {?GuildBan}\n   */\n  resolve(ban) {\n    return super.resolve(ban) ?? super.resolve(this.client.users.resolveId(ban));\n  }\n\n  /**\n   * Options used to fetch a single ban from a guild.\n   * @typedef {BaseFetchOptions} FetchBanOptions\n   * @property {UserResolvable} user The ban to fetch\n   */\n\n  /**\n   * Options used to fetch multiple bans from a guild.\n   * @typedef {Object} FetchBansOptions\n   * @property {number} [limit] The maximum number of bans to return\n   * @property {Snowflake} [before] Consider only bans before this id\n   * @property {Snowflake} [after] Consider only bans after this id\n   * @property {boolean} [cache] Whether to cache the fetched bans\n   */\n\n  /**\n   * Fetches ban(s) from Discord.\n   * @param {UserResolvable|FetchBanOptions|FetchBansOptions} [options] Options for fetching guild ban(s)\n   * @returns {Promise<GuildBan|Collection<Snowflake, GuildBan>>}\n   * @example\n   * // Fetch multiple bans from a guild\n   * guild.bans.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a maximum of 5 bans from a guild without caching\n   * guild.bans.fetch({ limit: 5, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban\n   * guild.bans.fetch('351871113346809860')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban without checking cache\n   * guild.bans.fetch({ user, force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single ban without caching\n   * guild.bans.fetch({ user, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const { user, cache, force, limit, before, after } = options;\n    const resolvedUser = this.client.users.resolveId(user ?? options);\n    if (resolvedUser) return this._fetchSingle({ user: resolvedUser, cache, force });\n\n    if (!before && !after && !limit && cache === undefined) {\n      return Promise.reject(new DiscordjsError(ErrorCodes.FetchBanResolveId));\n    }\n\n    return this._fetchMany(options);\n  }\n\n  async _fetchSingle({ user, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(user);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.guildBan(this.guild.id, user));\n    return this._add(data, cache);\n  }\n\n  async _fetchMany(options = {}) {\n    const data = await this.client.rest.get(Routes.guildBans(this.guild.id), {\n      query: makeURLSearchParams(options),\n    });\n\n    return data.reduce((col, ban) => col.set(ban.user.id, this._add(ban, options.cache)), new Collection());\n  }\n\n  /**\n   * Options used to ban a user from a guild.\n   * @typedef {Object} BanOptions\n   * @property {number} [deleteMessageDays] Number of days of messages to delete, must be between 0 and 7, inclusive\n   * <warn>This property is deprecated. Use `deleteMessageSeconds` instead.</warn>\n   * @property {number} [deleteMessageSeconds] Number of seconds of messages to delete,\n   * must be between 0 and 604800 (7 days), inclusive\n   * @property {string} [reason] The reason for the ban\n   */\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user id will be the result.\n   * @example\n   * // Ban a user by id (or with a user/guild member object)\n   * guild.bans.create('84484653687267328')\n   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))\n   *   .catch(console.error);\n   */\n  async create(user, options = {}) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId, true);\n\n    if (options.deleteMessageDays !== undefined && !deprecationEmittedForDeleteMessageDays) {\n      process.emitWarning(\n        // eslint-disable-next-line max-len\n        'The deleteMessageDays option for GuildBanManager#create() is deprecated. Use the deleteMessageSeconds option instead.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForDeleteMessageDays = true;\n    }\n\n    await this.client.rest.put(Routes.guildBan(this.guild.id, id), {\n      body: {\n        delete_message_seconds:\n          options.deleteMessageSeconds ??\n          (options.deleteMessageDays ? options.deleteMessageDays * 24 * 60 * 60 : undefined),\n      },\n      reason: options.reason,\n    });\n    if (user instanceof GuildMember) return user;\n    const _user = this.client.users.resolve(id);\n    if (_user) {\n      return this.guild.members.resolve(_user) ?? _user;\n    }\n    return id;\n  }\n\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning user\n   * @returns {Promise<?User>}\n   * @example\n   * // Unban a user by id (or with a user/guild member object)\n   * guild.bans.remove('84484653687267328')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n  async remove(user, reason) {\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId);\n    await this.client.rest.delete(Routes.guildBan(this.guild.id, id), { reason });\n    return this.client.users.resolve(user);\n  }\n}\n\nmodule.exports = GuildBanManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AACvC,MAAM;EAAEC;AAAW,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAM;EAAEE;AAAoB,CAAC,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC1D,MAAM;EAAEG;AAAO,CAAC,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACnD,MAAMI,aAAa,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAM;EAAEK,kBAAkB;EAAEC,cAAc;EAAEC;AAAW,CAAC,GAAGP,OAAO,CAAC,WAAW,CAAC;AAC/E,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,wBAAwB,CAAC;AAClD,MAAM;EAAES;AAAY,CAAC,GAAGT,OAAO,CAAC,2BAA2B,CAAC;AAE5D,IAAIU,sCAAsC,GAAG,KAAK;;AAElD;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASP,aAAa,CAAC;EAC1CQ,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,KAAK,CAACD,KAAK,CAACE,MAAM,EAAEP,QAAQ,EAAEM,QAAQ,CAAC;;IAEvC;AACJ;AACA;AACA;IACI,IAAI,CAACD,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;AACA;AACA;;EAEEG,IAAIA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAE;MAAEC,EAAE,EAAEF,IAAI,CAACG,IAAI,CAACD,EAAE;MAAEE,MAAM,EAAE,CAAC,IAAI,CAACR,KAAK;IAAE,CAAC,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACES,OAAOA,CAACC,GAAG,EAAE;IACX,OAAO,KAAK,CAACD,OAAO,CAACC,GAAG,CAAC,IAAI,KAAK,CAACD,OAAO,CAAC,IAAI,CAACP,MAAM,CAACS,KAAK,CAACC,SAAS,CAACF,GAAG,CAAC,CAAC;EAC9E;;EAEA;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,KAAKA,CAACC,OAAO,EAAE;IACb,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI,CAACC,UAAU,EAAE;IACtC,MAAM;MAAER,IAAI;MAAEF,KAAK;MAAEW,KAAK;MAAEC,KAAK;MAAEC,MAAM;MAAEC;IAAM,CAAC,GAAGL,OAAO;IAC5D,MAAMM,YAAY,GAAG,IAAI,CAAClB,MAAM,CAACS,KAAK,CAACC,SAAS,CAACL,IAAI,IAAIO,OAAO,CAAC;IACjE,IAAIM,YAAY,EAAE,OAAO,IAAI,CAACC,YAAY,CAAC;MAAEd,IAAI,EAAEa,YAAY;MAAEf,KAAK;MAAEW;IAAM,CAAC,CAAC;IAEhF,IAAI,CAACE,MAAM,IAAI,CAACC,KAAK,IAAI,CAACF,KAAK,IAAIZ,KAAK,KAAKiB,SAAS,EAAE;MACtD,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAI/B,cAAc,CAACC,UAAU,CAAC+B,iBAAiB,CAAC,CAAC;IACzE;IAEA,OAAO,IAAI,CAACV,UAAU,CAACD,OAAO,CAAC;EACjC;EAEA,MAAMO,YAAYA,CAAAK,IAAA,EAAiC;IAAA,IAAhC;MAAEnB,IAAI;MAAEF,KAAK;MAAEW,KAAK,GAAG;IAAM,CAAC,GAAAU,IAAA;IAC/C,IAAI,CAACV,KAAK,EAAE;MACV,MAAMW,QAAQ,GAAG,IAAI,CAACtB,KAAK,CAACuB,GAAG,CAACrB,IAAI,CAAC;MACrC,IAAIoB,QAAQ,IAAI,CAACA,QAAQ,CAACE,OAAO,EAAE,OAAOF,QAAQ;IACpD;IAEA,MAAMvB,IAAI,GAAG,MAAM,IAAI,CAACF,MAAM,CAAC4B,IAAI,CAACF,GAAG,CAACtC,MAAM,CAACyC,QAAQ,CAAC,IAAI,CAAC/B,KAAK,CAACM,EAAE,EAAEC,IAAI,CAAC,CAAC;IAC7E,OAAO,IAAI,CAACJ,IAAI,CAACC,IAAI,EAAEC,KAAK,CAAC;EAC/B;EAEA,MAAMU,UAAUA,CAAA,EAAe;IAAA,IAAdD,OAAO,GAAAkB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAC3B,MAAM5B,IAAI,GAAG,MAAM,IAAI,CAACF,MAAM,CAAC4B,IAAI,CAACF,GAAG,CAACtC,MAAM,CAAC4C,SAAS,CAAC,IAAI,CAAClC,KAAK,CAACM,EAAE,CAAC,EAAE;MACvE6B,KAAK,EAAE9C,mBAAmB,CAACyB,OAAO;IACpC,CAAC,CAAC;IAEF,OAAOV,IAAI,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAE3B,GAAG,KAAK2B,GAAG,CAACC,GAAG,CAAC5B,GAAG,CAACH,IAAI,CAACD,EAAE,EAAE,IAAI,CAACH,IAAI,CAACO,GAAG,EAAEI,OAAO,CAACT,KAAK,CAAC,CAAC,EAAE,IAAIjB,UAAU,EAAE,CAAC;EACzG;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmD,MAAMA,CAAChC,IAAI,EAAgB;IAAA,IAAdO,OAAO,GAAAkB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAC7B,IAAI,OAAOlB,OAAO,KAAK,QAAQ,EAAE,MAAM,IAAItB,kBAAkB,CAACE,UAAU,CAAC8C,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC;IAChH,MAAMlC,EAAE,GAAG,IAAI,CAACJ,MAAM,CAACS,KAAK,CAACC,SAAS,CAACL,IAAI,CAAC;IAC5C,IAAI,CAACD,EAAE,EAAE,MAAM,IAAIb,cAAc,CAACC,UAAU,CAAC+C,YAAY,EAAE,IAAI,CAAC;IAEhE,IAAI3B,OAAO,CAAC4B,iBAAiB,KAAKpB,SAAS,IAAI,CAACzB,sCAAsC,EAAE;MACtFX,OAAO,CAACyD,WAAW;MACjB;MACA,uHAAuH,EACvH,oBAAoB,CACrB;MAED9C,sCAAsC,GAAG,IAAI;IAC/C;IAEA,MAAM,IAAI,CAACK,MAAM,CAAC4B,IAAI,CAACc,GAAG,CAACtD,MAAM,CAACyC,QAAQ,CAAC,IAAI,CAAC/B,KAAK,CAACM,EAAE,EAAEA,EAAE,CAAC,EAAE;MAC7DuC,IAAI,EAAE;QACJC,sBAAsB,EACpBhC,OAAO,CAACiC,oBAAoB,KAC3BjC,OAAO,CAAC4B,iBAAiB,GAAG5B,OAAO,CAAC4B,iBAAiB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAGpB,SAAS;MACrF,CAAC;MACD0B,MAAM,EAAElC,OAAO,CAACkC;IAClB,CAAC,CAAC;IACF,IAAIzC,IAAI,YAAYX,WAAW,EAAE,OAAOW,IAAI;IAC5C,MAAM0C,KAAK,GAAG,IAAI,CAAC/C,MAAM,CAACS,KAAK,CAACF,OAAO,CAACH,EAAE,CAAC;IAC3C,IAAI2C,KAAK,EAAE;MACT,OAAO,IAAI,CAACjD,KAAK,CAACkD,OAAO,CAACzC,OAAO,CAACwC,KAAK,CAAC,IAAIA,KAAK;IACnD;IACA,OAAO3C,EAAE;EACX;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM6C,MAAMA,CAAC5C,IAAI,EAAEyC,MAAM,EAAE;IACzB,MAAM1C,EAAE,GAAG,IAAI,CAACJ,MAAM,CAACS,KAAK,CAACC,SAAS,CAACL,IAAI,CAAC;IAC5C,IAAI,CAACD,EAAE,EAAE,MAAM,IAAIb,cAAc,CAACC,UAAU,CAAC+C,YAAY,CAAC;IAC1D,MAAM,IAAI,CAACvC,MAAM,CAAC4B,IAAI,CAACsB,MAAM,CAAC9D,MAAM,CAACyC,QAAQ,CAAC,IAAI,CAAC/B,KAAK,CAACM,EAAE,EAAEA,EAAE,CAAC,EAAE;MAAE0C;IAAO,CAAC,CAAC;IAC7E,OAAO,IAAI,CAAC9C,MAAM,CAACS,KAAK,CAACF,OAAO,CAACF,IAAI,CAAC;EACxC;AACF;AAEA8C,MAAM,CAACC,OAAO,GAAGxD,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}