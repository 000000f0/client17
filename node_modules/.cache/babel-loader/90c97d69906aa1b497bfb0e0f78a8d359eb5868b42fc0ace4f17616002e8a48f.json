{"ast":null,"code":"'use strict';\n\nconst {\n  basename,\n  flatten\n} = require('../util/Util');\n\n/**\n * Represents an attachment builder\n */\nclass AttachmentBuilder {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {AttachmentData} [data] Extra data\n   */\n  constructor(attachment) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\n     * The file associated with this attachment.\n     * @type {BufferResolvable|Stream}\n     */\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n    this.name = data.name;\n    /**\n     * The description of the attachment\n     * @type {?string}\n     */\n    this.description = data.description;\n  }\n\n  /**\n   * Sets the description of this attachment.\n   * @param {string} description The description of the file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setDescription(description) {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setFile(attachment) {\n    this.attachment = attachment;\n    return this;\n  }\n\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets whether this attachment is a spoiler\n   * @param {boolean} [spoiler=true] Whether the attachment should be marked as a spoiler\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setSpoiler() {\n    let spoiler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (spoiler === this.spoiler) return this;\n    if (!spoiler) {\n      while (this.spoiler) {\n        this.name = this.name.slice('SPOILER_'.length);\n      }\n      return this;\n    }\n    this.name = `SPOILER_${this.name}`;\n    return this;\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return basename(this.name).startsWith('SPOILER_');\n  }\n  toJSON() {\n    return flatten(this);\n  }\n\n  /**\n   * Makes a new builder instance from a preexisting attachment structure.\n   * @param {AttachmentBuilder|Attachment|AttachmentPayload} other The builder to construct a new instance from\n   * @returns {AttachmentBuilder}\n   */\n  static from(other) {\n    return new AttachmentBuilder(other.attachment, {\n      name: other.name,\n      description: other.description\n    });\n  }\n}\nmodule.exports = AttachmentBuilder;\n\n/**\n * @external APIAttachment\n * @see {@link https://discord.com/developers/docs/resources/channel#attachment-object}\n */\n\n/**\n * @typedef {Object} AttachmentData\n * @property {string} [name] The name of the attachment\n * @property {string} [description] The description of the attachment\n */","map":{"version":3,"names":["basename","flatten","require","AttachmentBuilder","constructor","attachment","data","arguments","length","undefined","name","description","setDescription","setFile","setName","setSpoiler","spoiler","slice","startsWith","toJSON","from","other","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/AttachmentBuilder.js"],"sourcesContent":["'use strict';\n\nconst { basename, flatten } = require('../util/Util');\n\n/**\n * Represents an attachment builder\n */\nclass AttachmentBuilder {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {AttachmentData} [data] Extra data\n   */\n  constructor(attachment, data = {}) {\n    /**\n     * The file associated with this attachment.\n     * @type {BufferResolvable|Stream}\n     */\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n    this.name = data.name;\n    /**\n     * The description of the attachment\n     * @type {?string}\n     */\n    this.description = data.description;\n  }\n\n  /**\n   * Sets the description of this attachment.\n   * @param {string} description The description of the file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setDescription(description) {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setFile(attachment) {\n    this.attachment = attachment;\n    return this;\n  }\n\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets whether this attachment is a spoiler\n   * @param {boolean} [spoiler=true] Whether the attachment should be marked as a spoiler\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setSpoiler(spoiler = true) {\n    if (spoiler === this.spoiler) return this;\n\n    if (!spoiler) {\n      while (this.spoiler) {\n        this.name = this.name.slice('SPOILER_'.length);\n      }\n      return this;\n    }\n    this.name = `SPOILER_${this.name}`;\n    return this;\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return basename(this.name).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n\n  /**\n   * Makes a new builder instance from a preexisting attachment structure.\n   * @param {AttachmentBuilder|Attachment|AttachmentPayload} other The builder to construct a new instance from\n   * @returns {AttachmentBuilder}\n   */\n  static from(other) {\n    return new AttachmentBuilder(other.attachment, {\n      name: other.name,\n      description: other.description,\n    });\n  }\n}\n\nmodule.exports = AttachmentBuilder;\n\n/**\n * @external APIAttachment\n * @see {@link https://discord.com/developers/docs/resources/channel#attachment-object}\n */\n\n/**\n * @typedef {Object} AttachmentData\n * @property {string} [name] The name of the attachment\n * @property {string} [description] The description of the attachment\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,QAAQ;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAErD;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACtB;AACF;AACA;AACA;EACEC,WAAWA,CAACC,UAAU,EAAa;IAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC/B;AACJ;AACA;AACA;IACI,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B;AACJ;AACA;AACA;IACI,IAAI,CAACK,IAAI,GAAGJ,IAAI,CAACI,IAAI;IACrB;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAGL,IAAI,CAACK,WAAW;EACrC;;EAEA;AACF;AACA;AACA;AACA;EACEC,cAAcA,CAACD,WAAW,EAAE;IAC1B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEE,OAAOA,CAACR,UAAU,EAAE;IAClB,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACES,OAAOA,CAACJ,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEK,UAAUA,CAAA,EAAiB;IAAA,IAAhBC,OAAO,GAAAT,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACvB,IAAIS,OAAO,KAAK,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;IAEzC,IAAI,CAACA,OAAO,EAAE;MACZ,OAAO,IAAI,CAACA,OAAO,EAAE;QACnB,IAAI,CAACN,IAAI,GAAG,IAAI,CAACA,IAAI,CAACO,KAAK,CAAC,UAAU,CAACT,MAAM,CAAC;MAChD;MACA,OAAO,IAAI;IACb;IACA,IAAI,CAACE,IAAI,GAAI,WAAU,IAAI,CAACA,IAAK,EAAC;IAClC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIM,OAAOA,CAAA,EAAG;IACZ,OAAOhB,QAAQ,CAAC,IAAI,CAACU,IAAI,CAAC,CAACQ,UAAU,CAAC,UAAU,CAAC;EACnD;EAEAC,MAAMA,CAAA,EAAG;IACP,OAAOlB,OAAO,CAAC,IAAI,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOmB,IAAIA,CAACC,KAAK,EAAE;IACjB,OAAO,IAAIlB,iBAAiB,CAACkB,KAAK,CAAChB,UAAU,EAAE;MAC7CK,IAAI,EAAEW,KAAK,CAACX,IAAI;MAChBC,WAAW,EAAEU,KAAK,CAACV;IACrB,CAAC,CAAC;EACJ;AACF;AAEAW,MAAM,CAACC,OAAO,GAAGpB,iBAAiB;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}