{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst VoiceState = require('../structures/VoiceState');\n\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {CachedManager}\n */\nclass VoiceStateManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, VoiceState, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n  _add(data) {\n    let cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n    const entry = new this.holds(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n}\nmodule.exports = VoiceStateManager;","map":{"version":3,"names":["CachedManager","require","VoiceState","VoiceStateManager","constructor","guild","iterable","client","_add","data","cache","arguments","length","undefined","existing","get","user_id","_patch","entry","holds","set","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/managers/VoiceStateManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst VoiceState = require('../structures/VoiceState');\n\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {CachedManager}\n */\nclass VoiceStateManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, VoiceState, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n  _add(data, cache = true) {\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n\n    const entry = new this.holds(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n}\n\nmodule.exports = VoiceStateManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMC,UAAU,GAAGD,OAAO,CAAC,0BAA0B,CAAC;;AAEtD;AACA;AACA;AACA;AACA,MAAME,iBAAiB,SAASH,aAAa,CAAC;EAC5CI,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,KAAK,CAACD,KAAK,CAACE,MAAM,EAAEL,UAAU,EAAEI,QAAQ,CAAC;;IAEzC;AACJ;AACA;AACA;IACI,IAAI,CAACD,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;AACA;AACA;;EAEEG,IAAIA,CAACC,IAAI,EAAgB;IAAA,IAAdC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACrB,MAAMG,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACK,GAAG,CAACN,IAAI,CAACO,OAAO,CAAC;IAC7C,IAAIF,QAAQ,EAAE,OAAOA,QAAQ,CAACG,MAAM,CAACR,IAAI,CAAC;IAE1C,MAAMS,KAAK,GAAG,IAAI,IAAI,CAACC,KAAK,CAAC,IAAI,CAACd,KAAK,EAAEI,IAAI,CAAC;IAC9C,IAAIC,KAAK,EAAE,IAAI,CAACA,KAAK,CAACU,GAAG,CAACX,IAAI,CAACO,OAAO,EAAEE,KAAK,CAAC;IAC9C,OAAOA,KAAK;EACd;AACF;AAEAG,MAAM,CAACC,OAAO,GAAGnB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}