{"ast":null,"code":"'use strict';\n\nconst {\n  userMention\n} = require('@discordjs/builders');\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst Base = require('./Base');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst UserFlagsBitField = require('../util/UserFlagsBitField');\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass User extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The user's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    this.bot = null;\n    this.system = null;\n    this.flags = null;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('username' in data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       */\n      this.username = data.username;\n    } else {\n      this.username ??= null;\n    }\n    if ('bot' in data) {\n      /**\n       * Whether or not the user is a bot\n       * @type {?boolean}\n       */\n      this.bot = Boolean(data.bot);\n    } else if (!this.partial && typeof this.bot !== 'boolean') {\n      this.bot = false;\n    }\n    if ('discriminator' in data) {\n      /**\n       * A discriminator based on username for the user\n       * @type {?string}\n       */\n      this.discriminator = data.discriminator;\n    } else {\n      this.discriminator ??= null;\n    }\n    if ('avatar' in data) {\n      /**\n       * The user avatar's hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else {\n      this.avatar ??= null;\n    }\n    if ('banner' in data) {\n      /**\n       * The user banner's hash\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    } else if (this.banner !== null) {\n      this.banner ??= undefined;\n    }\n    if ('accent_color' in data) {\n      /**\n       * The base 10 accent color of the user's banner\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?number}\n       */\n      this.accentColor = data.accent_color;\n    } else if (this.accentColor !== null) {\n      this.accentColor ??= undefined;\n    }\n    if ('system' in data) {\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       */\n      this.system = Boolean(data.system);\n    } else if (!this.partial && typeof this.system !== 'boolean') {\n      this.system = false;\n    }\n    if ('public_flags' in data) {\n      /**\n       * The flags for this user\n       * @type {?UserFlagsBitField}\n       */\n      this.flags = new UserFlagsBitField(data.public_flags);\n    }\n  }\n\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.avatar && this.client.rest.cdn.avatar(this.id, this.avatar, options);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    return this.client.rest.cdn.defaultAvatar(this.discriminator % 5);\n  }\n\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.defaultAvatarURL;\n  }\n\n  /**\n   * The hexadecimal version of the user accent color, with a leading hash\n   * <info>The user must be force fetched for this property to be present</info>\n   * @type {?string}\n   * @readonly\n   */\n  get hexAccentColor() {\n    if (typeof this.accentColor !== 'number') return this.accentColor;\n    return `#${this.accentColor.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * A link to the user's banner. See {@link User#banner} for more info\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  bannerURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);\n  }\n\n  /**\n   * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n   * @type {?string}\n   * @readonly\n   */\n  get tag() {\n    return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n\n  /**\n   * Creates a DM channel between the client and the user.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this.client.users.createDM(this.id, {\n      force\n    });\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.client.users.deleteDM(this.id);\n  }\n\n  /**\n   * Checks if the user is equal to another.\n   * It compares id, username, discriminator, avatar, banner, accent color, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    return user && this.id === user.id && this.username === user.username && this.discriminator === user.discriminator && this.avatar === user.avatar && this.flags?.bitfield === user.flags?.bitfield && this.banner === user.banner && this.accentColor === user.accentColor;\n  }\n\n  /**\n   * Compares the user with an API user object\n   * @param {APIUser} user The API user object to compare\n   * @returns {boolean}\n   * @private\n   */\n  _equals(user) {\n    return user && this.id === user.id && this.username === user.username && this.discriminator === user.discriminator && this.avatar === user.avatar && this.flags?.bitfield === user.public_flags && ('banner' in user ? this.banner === user.banner : true) && ('accent_color' in user ? this.accentColor === user.accent_color : true);\n  }\n\n  /**\n   * Fetches this user's flags.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<UserFlagsBitField>}\n   */\n  fetchFlags() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this.client.users.fetchFlags(this.id, {\n      force\n    });\n  }\n\n  /**\n   * Fetches this user.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<User>}\n   */\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.client.users.fetch(this.id, {\n      force\n    });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return userMention(this.id);\n  }\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n    const json = super.toJSON({\n      createdTimestamp: true,\n      defaultAvatarURL: true,\n      hexAccentColor: true,\n      tag: true\n    }, ...props);\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    json.bannerURL = this.banner ? this.bannerURL() : this.banner;\n    return json;\n  }\n}\n\n/**\n * Sends a message to this user.\n * @method send\n * @memberof User\n * @instance\n * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n * @returns {Promise<Message>}\n * @example\n * // Send a direct message\n * user.send('Hello!')\n *   .then(message => console.log(`Sent message: ${message.content} to ${user.tag}`))\n *   .catch(console.error);\n */\n\nTextBasedChannel.applyToClass(User);\nmodule.exports = User;\n\n/**\n * @external APIUser\n * @see {@link https://discord.com/developers/docs/resources/user#user-object}\n */","map":{"version":3,"names":["userMention","require","DiscordSnowflake","Base","TextBasedChannel","UserFlagsBitField","User","constructor","client","data","id","bot","system","flags","_patch","username","Boolean","partial","discriminator","avatar","banner","undefined","accentColor","accent_color","public_flags","createdTimestamp","timestampFrom","createdAt","Date","avatarURL","options","arguments","length","rest","cdn","defaultAvatarURL","defaultAvatar","displayAvatarURL","hexAccentColor","toString","padStart","bannerURL","tag","dmChannel","users","createDM","force","deleteDM","equals","user","bitfield","_equals","fetchFlags","fetch","toJSON","_len","props","Array","_key","json","applyToClass","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/User.js"],"sourcesContent":["'use strict';\n\nconst { userMention } = require('@discordjs/builders');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst UserFlagsBitField = require('../util/UserFlagsBitField');\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass User extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The user's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this.bot = null;\n\n    this.system = null;\n\n    this.flags = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('username' in data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       */\n      this.username = data.username;\n    } else {\n      this.username ??= null;\n    }\n\n    if ('bot' in data) {\n      /**\n       * Whether or not the user is a bot\n       * @type {?boolean}\n       */\n      this.bot = Boolean(data.bot);\n    } else if (!this.partial && typeof this.bot !== 'boolean') {\n      this.bot = false;\n    }\n\n    if ('discriminator' in data) {\n      /**\n       * A discriminator based on username for the user\n       * @type {?string}\n       */\n      this.discriminator = data.discriminator;\n    } else {\n      this.discriminator ??= null;\n    }\n\n    if ('avatar' in data) {\n      /**\n       * The user avatar's hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else {\n      this.avatar ??= null;\n    }\n\n    if ('banner' in data) {\n      /**\n       * The user banner's hash\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    } else if (this.banner !== null) {\n      this.banner ??= undefined;\n    }\n\n    if ('accent_color' in data) {\n      /**\n       * The base 10 accent color of the user's banner\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?number}\n       */\n      this.accentColor = data.accent_color;\n    } else if (this.accentColor !== null) {\n      this.accentColor ??= undefined;\n    }\n\n    if ('system' in data) {\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       */\n      this.system = Boolean(data.system);\n    } else if (!this.partial && typeof this.system !== 'boolean') {\n      this.system = false;\n    }\n\n    if ('public_flags' in data) {\n      /**\n       * The flags for this user\n       * @type {?UserFlagsBitField}\n       */\n      this.flags = new UserFlagsBitField(data.public_flags);\n    }\n  }\n\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarURL(options = {}) {\n    return this.avatar && this.client.rest.cdn.avatar(this.id, this.avatar, options);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    return this.client.rest.cdn.defaultAvatar(this.discriminator % 5);\n  }\n\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.defaultAvatarURL;\n  }\n\n  /**\n   * The hexadecimal version of the user accent color, with a leading hash\n   * <info>The user must be force fetched for this property to be present</info>\n   * @type {?string}\n   * @readonly\n   */\n  get hexAccentColor() {\n    if (typeof this.accentColor !== 'number') return this.accentColor;\n    return `#${this.accentColor.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * A link to the user's banner. See {@link User#banner} for more info\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  bannerURL(options = {}) {\n    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);\n  }\n\n  /**\n   * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n   * @type {?string}\n   * @readonly\n   */\n  get tag() {\n    return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n\n  /**\n   * Creates a DM channel between the client and the user.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM(force = false) {\n    return this.client.users.createDM(this.id, { force });\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.client.users.deleteDM(this.id);\n  }\n\n  /**\n   * Checks if the user is equal to another.\n   * It compares id, username, discriminator, avatar, banner, accent color, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    return (\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar &&\n      this.flags?.bitfield === user.flags?.bitfield &&\n      this.banner === user.banner &&\n      this.accentColor === user.accentColor\n    );\n  }\n\n  /**\n   * Compares the user with an API user object\n   * @param {APIUser} user The API user object to compare\n   * @returns {boolean}\n   * @private\n   */\n  _equals(user) {\n    return (\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar &&\n      this.flags?.bitfield === user.public_flags &&\n      ('banner' in user ? this.banner === user.banner : true) &&\n      ('accent_color' in user ? this.accentColor === user.accent_color : true)\n    );\n  }\n\n  /**\n   * Fetches this user's flags.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<UserFlagsBitField>}\n   */\n  fetchFlags(force = false) {\n    return this.client.users.fetchFlags(this.id, { force });\n  }\n\n  /**\n   * Fetches this user.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<User>}\n   */\n  fetch(force = true) {\n    return this.client.users.fetch(this.id, { force });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return userMention(this.id);\n  }\n\n  toJSON(...props) {\n    const json = super.toJSON(\n      {\n        createdTimestamp: true,\n        defaultAvatarURL: true,\n        hexAccentColor: true,\n        tag: true,\n      },\n      ...props,\n    );\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    json.bannerURL = this.banner ? this.bannerURL() : this.banner;\n    return json;\n  }\n}\n\n/**\n * Sends a message to this user.\n * @method send\n * @memberof User\n * @instance\n * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n * @returns {Promise<Message>}\n * @example\n * // Send a direct message\n * user.send('Hello!')\n *   .then(message => console.log(`Sent message: ${message.content} to ${user.tag}`))\n *   .catch(console.error);\n */\n\nTextBasedChannel.applyToClass(User);\n\nmodule.exports = User;\n\n/**\n * @external APIUser\n * @see {@link https://discord.com/developers/docs/resources/user#user-object}\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAY,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtD,MAAM;EAAEC;AAAiB,CAAC,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,+BAA+B,CAAC;AACjE,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA,MAAMK,IAAI,SAASH,IAAI,CAAC;EACtBI,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,CAAC;;IAEb;AACJ;AACA;AACA;IACI,IAAI,CAACE,EAAE,GAAGD,IAAI,CAACC,EAAE;IAEjB,IAAI,CAACC,GAAG,GAAG,IAAI;IAEf,IAAI,CAACC,MAAM,GAAG,IAAI;IAElB,IAAI,CAACC,KAAK,GAAG,IAAI;IAEjB,IAAI,CAACC,MAAM,CAACL,IAAI,CAAC;EACnB;EAEAK,MAAMA,CAACL,IAAI,EAAE;IACX,IAAI,UAAU,IAAIA,IAAI,EAAE;MACtB;AACN;AACA;AACA;MACM,IAAI,CAACM,QAAQ,GAAGN,IAAI,CAACM,QAAQ;IAC/B,CAAC,MAAM;MACL,IAAI,CAACA,QAAQ,KAAK,IAAI;IACxB;IAEA,IAAI,KAAK,IAAIN,IAAI,EAAE;MACjB;AACN;AACA;AACA;MACM,IAAI,CAACE,GAAG,GAAGK,OAAO,CAACP,IAAI,CAACE,GAAG,CAAC;IAC9B,CAAC,MAAM,IAAI,CAAC,IAAI,CAACM,OAAO,IAAI,OAAO,IAAI,CAACN,GAAG,KAAK,SAAS,EAAE;MACzD,IAAI,CAACA,GAAG,GAAG,KAAK;IAClB;IAEA,IAAI,eAAe,IAAIF,IAAI,EAAE;MAC3B;AACN;AACA;AACA;MACM,IAAI,CAACS,aAAa,GAAGT,IAAI,CAACS,aAAa;IACzC,CAAC,MAAM;MACL,IAAI,CAACA,aAAa,KAAK,IAAI;IAC7B;IAEA,IAAI,QAAQ,IAAIT,IAAI,EAAE;MACpB;AACN;AACA;AACA;MACM,IAAI,CAACU,MAAM,GAAGV,IAAI,CAACU,MAAM;IAC3B,CAAC,MAAM;MACL,IAAI,CAACA,MAAM,KAAK,IAAI;IACtB;IAEA,IAAI,QAAQ,IAAIV,IAAI,EAAE;MACpB;AACN;AACA;AACA;AACA;MACM,IAAI,CAACW,MAAM,GAAGX,IAAI,CAACW,MAAM;IAC3B,CAAC,MAAM,IAAI,IAAI,CAACA,MAAM,KAAK,IAAI,EAAE;MAC/B,IAAI,CAACA,MAAM,KAAKC,SAAS;IAC3B;IAEA,IAAI,cAAc,IAAIZ,IAAI,EAAE;MAC1B;AACN;AACA;AACA;AACA;MACM,IAAI,CAACa,WAAW,GAAGb,IAAI,CAACc,YAAY;IACtC,CAAC,MAAM,IAAI,IAAI,CAACD,WAAW,KAAK,IAAI,EAAE;MACpC,IAAI,CAACA,WAAW,KAAKD,SAAS;IAChC;IAEA,IAAI,QAAQ,IAAIZ,IAAI,EAAE;MACpB;AACN;AACA;AACA;MACM,IAAI,CAACG,MAAM,GAAGI,OAAO,CAACP,IAAI,CAACG,MAAM,CAAC;IACpC,CAAC,MAAM,IAAI,CAAC,IAAI,CAACK,OAAO,IAAI,OAAO,IAAI,CAACL,MAAM,KAAK,SAAS,EAAE;MAC5D,IAAI,CAACA,MAAM,GAAG,KAAK;IACrB;IAEA,IAAI,cAAc,IAAIH,IAAI,EAAE;MAC1B;AACN;AACA;AACA;MACM,IAAI,CAACI,KAAK,GAAG,IAAIR,iBAAiB,CAACI,IAAI,CAACe,YAAY,CAAC;IACvD;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIP,OAAOA,CAAA,EAAG;IACZ,OAAO,OAAO,IAAI,CAACF,QAAQ,KAAK,QAAQ;EAC1C;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIU,gBAAgBA,CAAA,EAAG;IACrB,OAAOvB,gBAAgB,CAACwB,aAAa,CAAC,IAAI,CAAChB,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIiB,SAASA,CAAA,EAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACEI,SAASA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IACpB,OAAO,IAAI,CAACZ,MAAM,IAAI,IAAI,CAACX,MAAM,CAACyB,IAAI,CAACC,GAAG,CAACf,MAAM,CAAC,IAAI,CAACT,EAAE,EAAE,IAAI,CAACS,MAAM,EAAEW,OAAO,CAAC;EAClF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIK,gBAAgBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC3B,MAAM,CAACyB,IAAI,CAACC,GAAG,CAACE,aAAa,CAAC,IAAI,CAAClB,aAAa,GAAG,CAAC,CAAC;EACnE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEmB,gBAAgBA,CAACP,OAAO,EAAE;IACxB,OAAO,IAAI,CAACD,SAAS,CAACC,OAAO,CAAC,IAAI,IAAI,CAACK,gBAAgB;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIG,cAAcA,CAAA,EAAG;IACnB,IAAI,OAAO,IAAI,CAAChB,WAAW,KAAK,QAAQ,EAAE,OAAO,IAAI,CAACA,WAAW;IACjE,OAAQ,IAAG,IAAI,CAACA,WAAW,CAACiB,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAASA,CAAA,EAAe;IAAA,IAAdX,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IACpB,OAAO,IAAI,CAACX,MAAM,IAAI,IAAI,CAACZ,MAAM,CAACyB,IAAI,CAACC,GAAG,CAACd,MAAM,CAAC,IAAI,CAACV,EAAE,EAAE,IAAI,CAACU,MAAM,EAAEU,OAAO,CAAC;EAClF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIY,GAAGA,CAAA,EAAG;IACR,OAAO,OAAO,IAAI,CAAC3B,QAAQ,KAAK,QAAQ,GAAI,GAAE,IAAI,CAACA,QAAS,IAAG,IAAI,CAACG,aAAc,EAAC,GAAG,IAAI;EAC5F;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIyB,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAACnC,MAAM,CAACoC,KAAK,CAACD,SAAS,CAAC,IAAI,CAACjC,EAAE,CAAC;EAC7C;;EAEA;AACF;AACA;AACA;AACA;EACEmC,QAAQA,CAAA,EAAgB;IAAA,IAAfC,KAAK,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IACpB,OAAO,IAAI,CAACvB,MAAM,CAACoC,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACnC,EAAE,EAAE;MAAEoC;IAAM,CAAC,CAAC;EACvD;;EAEA;AACF;AACA;AACA;EACEC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACvC,MAAM,CAACoC,KAAK,CAACG,QAAQ,CAAC,IAAI,CAACrC,EAAE,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEsC,MAAMA,CAACC,IAAI,EAAE;IACX,OACEA,IAAI,IACJ,IAAI,CAACvC,EAAE,KAAKuC,IAAI,CAACvC,EAAE,IACnB,IAAI,CAACK,QAAQ,KAAKkC,IAAI,CAAClC,QAAQ,IAC/B,IAAI,CAACG,aAAa,KAAK+B,IAAI,CAAC/B,aAAa,IACzC,IAAI,CAACC,MAAM,KAAK8B,IAAI,CAAC9B,MAAM,IAC3B,IAAI,CAACN,KAAK,EAAEqC,QAAQ,KAAKD,IAAI,CAACpC,KAAK,EAAEqC,QAAQ,IAC7C,IAAI,CAAC9B,MAAM,KAAK6B,IAAI,CAAC7B,MAAM,IAC3B,IAAI,CAACE,WAAW,KAAK2B,IAAI,CAAC3B,WAAW;EAEzC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE6B,OAAOA,CAACF,IAAI,EAAE;IACZ,OACEA,IAAI,IACJ,IAAI,CAACvC,EAAE,KAAKuC,IAAI,CAACvC,EAAE,IACnB,IAAI,CAACK,QAAQ,KAAKkC,IAAI,CAAClC,QAAQ,IAC/B,IAAI,CAACG,aAAa,KAAK+B,IAAI,CAAC/B,aAAa,IACzC,IAAI,CAACC,MAAM,KAAK8B,IAAI,CAAC9B,MAAM,IAC3B,IAAI,CAACN,KAAK,EAAEqC,QAAQ,KAAKD,IAAI,CAACzB,YAAY,KACzC,QAAQ,IAAIyB,IAAI,GAAG,IAAI,CAAC7B,MAAM,KAAK6B,IAAI,CAAC7B,MAAM,GAAG,IAAI,CAAC,KACtD,cAAc,IAAI6B,IAAI,GAAG,IAAI,CAAC3B,WAAW,KAAK2B,IAAI,CAAC1B,YAAY,GAAG,IAAI,CAAC;EAE5E;;EAEA;AACF;AACA;AACA;AACA;EACE6B,UAAUA,CAAA,EAAgB;IAAA,IAAfN,KAAK,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IACtB,OAAO,IAAI,CAACvB,MAAM,CAACoC,KAAK,CAACQ,UAAU,CAAC,IAAI,CAAC1C,EAAE,EAAE;MAAEoC;IAAM,CAAC,CAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;EACEO,KAAKA,CAAA,EAAe;IAAA,IAAdP,KAAK,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,IAAI;IAChB,OAAO,IAAI,CAACvB,MAAM,CAACoC,KAAK,CAACS,KAAK,CAAC,IAAI,CAAC3C,EAAE,EAAE;MAAEoC;IAAM,CAAC,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEP,QAAQA,CAAA,EAAG;IACT,OAAOvC,WAAW,CAAC,IAAI,CAACU,EAAE,CAAC;EAC7B;EAEA4C,MAAMA,CAAA,EAAW;IAAA,SAAAC,IAAA,GAAAxB,SAAA,CAAAC,MAAA,EAAPwB,KAAK,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;MAALF,KAAK,CAAAE,IAAA,IAAA3B,SAAA,CAAA2B,IAAA;IAAA;IACb,MAAMC,IAAI,GAAG,KAAK,CAACL,MAAM,CACvB;MACE7B,gBAAgB,EAAE,IAAI;MACtBU,gBAAgB,EAAE,IAAI;MACtBG,cAAc,EAAE,IAAI;MACpBI,GAAG,EAAE;IACP,CAAC,EACD,GAAGc,KAAK,CACT;IACDG,IAAI,CAAC9B,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;IACjC8B,IAAI,CAACtB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,EAAE;IAC/CsB,IAAI,CAAClB,SAAS,GAAG,IAAI,CAACrB,MAAM,GAAG,IAAI,CAACqB,SAAS,EAAE,GAAG,IAAI,CAACrB,MAAM;IAC7D,OAAOuC,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvD,gBAAgB,CAACwD,YAAY,CAACtD,IAAI,CAAC;AAEnCuD,MAAM,CAACC,OAAO,GAAGxD,IAAI;;AAErB;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}