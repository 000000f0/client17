{"ast":null,"code":"'use strict';\n\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst VoiceState = require('./VoiceState');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');\nconst {\n  GuildMemberFlagsBitField\n} = require('../util/GuildMemberFlagsBitField');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass GuildMember extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The last timestamp this member started boosting the guild\n     * @type {?number}\n     */\n    this.premiumSinceTimestamp = null;\n\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     */\n    this.nickname = null;\n\n    /**\n     * Whether this member has yet to pass the guild's membership gate\n     * @type {?boolean}\n     */\n    this.pending = null;\n\n    /**\n     * The timestamp this member's timeout will be removed\n     * @type {?number}\n     */\n    this.communicationDisabledUntilTimestamp = null;\n\n    /**\n     * The role ids of the member\n     * @type {Snowflake[]}\n     * @private\n     */\n    this._roles = [];\n    if (data) this._patch(data);\n  }\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user that this guild member instance represents\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n    if ('nick' in data) this.nickname = data.nick;\n    if ('avatar' in data) {\n      /**\n       * The guild member's avatar hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else if (typeof this.avatar !== 'string') {\n      this.avatar = null;\n    }\n    if ('joined_at' in data) this.joinedTimestamp = Date.parse(data.joined_at);\n    if ('premium_since' in data) {\n      this.premiumSinceTimestamp = data.premium_since ? Date.parse(data.premium_since) : null;\n    }\n    if ('roles' in data) this._roles = data.roles;\n    if ('pending' in data) {\n      this.pending = data.pending;\n    } else if (!this.partial) {\n      // See https://github.com/discordjs/discord.js/issues/6546 for more info.\n      this.pending ??= false;\n    }\n    if ('communication_disabled_until' in data) {\n      this.communicationDisabledUntilTimestamp = data.communication_disabled_until && Date.parse(data.communication_disabled_until);\n    }\n    if ('flags' in data) {\n      /**\n       * The flags of this member\n       * @type {Readonly<GuildMemberFlagsBitField>}\n       */\n      this.flags = new GuildMemberFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new GuildMemberFlagsBitField().freeze();\n    }\n  }\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.joinedTimestamp === null;\n  }\n\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, {\n      user_id: this.id\n    });\n  }\n\n  /**\n   * A link to the member's guild avatar.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.avatar && this.client.rest.cdn.guildMemberAvatar(this.guild.id, this.id, this.avatar, options);\n  }\n\n  /**\n   * A link to the member's guild avatar if they have one.\n   * Otherwise, a link to their {@link User#displayAvatarURL} will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.user.displayAvatarURL(options);\n  }\n\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The time this member's timeout will be removed\n   * @type {?Date}\n   * @readonly\n   */\n  get communicationDisabledUntil() {\n    return this.communicationDisabledUntilTimestamp && new Date(this.communicationDisabledUntilTimestamp);\n  }\n\n  /**\n   * The last time this member started boosting the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get premiumSince() {\n    return this.premiumSinceTimestamp && new Date(this.premiumSinceTimestamp);\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {?Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.guild.presences.resolve(this.id);\n  }\n\n  /**\n   * The displayed color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n  get displayColor() {\n    return this.roles.color?.color ?? 0;\n  }\n\n  /**\n   * The displayed color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n  get displayHexColor() {\n    return this.roles.color?.hexColor ?? '#000000';\n  }\n\n  /**\n   * The member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The DM between the client's user and this member\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n\n  /**\n   * The nickname of this member, or their username if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname ?? this.user.username;\n  }\n\n  /**\n   * The overall set of permissions for this member, taking only roles and owner status into account\n   * @type {Readonly<PermissionsBitField>}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerId) return new PermissionsBitField(PermissionsBitField.All).freeze();\n    return new PermissionsBitField(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.user.id === this.guild.ownerId) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerId) return true;\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);\n  }\n\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);\n  }\n\n  /**\n   * Whether this member is moderatable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get moderatable() {\n    return !this.permissions.has(PermissionFlagsBits.Administrator) && this.manageable && (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false);\n  }\n\n  /**\n   * Whether this member is currently timed out\n   * @returns {boolean}\n   */\n  isCommunicationDisabled() {\n    return this.communicationDisabledUntilTimestamp > Date.now();\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {GuildChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<PermissionsBitField>}\n   */\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    return channel.permissionsFor(this);\n  }\n\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditOptions} options The options to provide\n   * @returns {Promise<GuildMember>}\n   */\n  edit(options) {\n    return this.guild.members.edit(this, options);\n  }\n\n  /**\n   * Sets the flags for this member.\n   * @param {GuildMemberFlagsResolvable} flags The flags to set\n   * @param {string} [reason] Reason for setting the flags\n   * @returns {Promise<GuildMember>}\n   */\n  setFlags(flags, reason) {\n    return this.edit({\n      flags,\n      reason\n    });\n  }\n\n  /**\n   * Sets the nickname for this member.\n   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set a nickname for a guild member\n   * guildMember.setNickname('cool nickname', 'Needed a new nickname')\n   *   .then(member => console.log(`Set nickname of ${member.user.username}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove a nickname for a guild member\n   * guildMember.setNickname(null, 'No nicknames allowed!')\n   *   .then(member => console.log(`Removed nickname for ${member.user.username}`))\n   *   .catch(console.error);\n   */\n  setNickname(nick, reason) {\n    return this.edit({\n      nick,\n      reason\n    });\n  }\n\n  /**\n   * Creates a DM channel between the client and this member.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this.user.createDM(force);\n  }\n\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.guild.members.kick(this, reason);\n  }\n\n  /**\n   * Bans this guild member.\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Ban a guild member, deleting a week's worth of messages\n   * guildMember.ban({ deleteMessageSeconds: 60 * 60 * 24 * 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  ban(options) {\n    return this.guild.bans.create(this, options);\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {DateResolvable|null} communicationDisabledUntil The date or timestamp\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.disableCommunicationUntil(Date.now() + (5 * 60 * 1000), 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove the timeout of a guild member\n   * guildMember.disableCommunicationUntil(null)\n   *   .then(member => console.log(`Removed timeout for ${member.displayName}`))\n   *   .catch(console.error);\n   */\n  disableCommunicationUntil(communicationDisabledUntil, reason) {\n    return this.edit({\n      communicationDisabledUntil,\n      reason\n    });\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {number|null} timeout The time in milliseconds\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.timeout(5 * 60 * 1000, 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  timeout(timeout, reason) {\n    return this.disableCommunicationUntil(timeout && Date.now() + timeout, reason);\n  }\n\n  /**\n   * Fetches this GuildMember.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildMember>}\n   */\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.guild.members.fetch({\n      user: this.id,\n      cache: true,\n      force\n    });\n  }\n\n  /**\n   * Whether this guild member equals another guild member. It compares all properties, so for most\n   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\n   * and is often what most users need.\n   * @param {GuildMember} member The member to compare with\n   * @returns {boolean}\n   */\n  equals(member) {\n    return member instanceof this.constructor && this.id === member.id && this.partial === member.partial && this.guild.id === member.guild.id && this.joinedTimestamp === member.joinedTimestamp && this.nickname === member.nickname && this.avatar === member.avatar && this.pending === member.pending && this.communicationDisabledUntilTimestamp === member.communicationDisabledUntilTimestamp && this.flags.bitfield === member.flags.bitfield && (this._roles === member._roles || this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i]));\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return this.user.toString();\n  }\n  toJSON() {\n    const json = super.toJSON({\n      guild: 'guildId',\n      user: 'userId',\n      displayName: true,\n      roles: true\n    });\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    return json;\n  }\n}\n\n/**\n * Sends a message to this user.\n * @method send\n * @memberof GuildMember\n * @instance\n * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n * @returns {Promise<Message>}\n * @example\n * // Send a direct message\n * guildMember.send('Hello!')\n *   .then(message => console.log(`Sent message: ${message.content} to ${guildMember.displayName}`))\n *   .catch(console.error);\n */\n\nTextBasedChannel.applyToClass(GuildMember);\nexports.GuildMember = GuildMember;\n\n/**\n * @external APIGuildMember\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-member-object}\n */","map":{"version":3,"names":["PermissionFlagsBits","require","Base","VoiceState","TextBasedChannel","DiscordjsError","ErrorCodes","GuildMemberRoleManager","GuildMemberFlagsBitField","PermissionsBitField","GuildMember","constructor","client","data","guild","joinedTimestamp","premiumSinceTimestamp","nickname","pending","communicationDisabledUntilTimestamp","_roles","_patch","user","users","_add","nick","avatar","Date","parse","joined_at","premium_since","roles","partial","communication_disabled_until","flags","freeze","_clone","clone","slice","voice","voiceStates","cache","get","id","user_id","avatarURL","options","arguments","length","undefined","rest","cdn","guildMemberAvatar","displayAvatarURL","joinedAt","communicationDisabledUntil","premiumSince","presence","presences","resolve","displayColor","color","displayHexColor","hexColor","dmChannel","displayName","username","permissions","ownerId","All","map","role","manageable","members","me","GuildUncachedMe","highest","comparePositionTo","kickable","has","KickMembers","bannable","BanMembers","moderatable","Administrator","ModerateMembers","isCommunicationDisabled","now","permissionsIn","channel","channels","GuildChannelResolve","permissionsFor","edit","setFlags","reason","setNickname","createDM","force","deleteDM","kick","ban","bans","create","disableCommunicationUntil","timeout","fetch","equals","member","bitfield","every","i","toString","toJSON","json","applyToClass","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/GuildMember.js"],"sourcesContent":["'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst VoiceState = require('./VoiceState');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');\nconst { GuildMemberFlagsBitField } = require('../util/GuildMemberFlagsBitField');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass GuildMember extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The last timestamp this member started boosting the guild\n     * @type {?number}\n     */\n    this.premiumSinceTimestamp = null;\n\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     */\n    this.nickname = null;\n\n    /**\n     * Whether this member has yet to pass the guild's membership gate\n     * @type {?boolean}\n     */\n    this.pending = null;\n\n    /**\n     * The timestamp this member's timeout will be removed\n     * @type {?number}\n     */\n    this.communicationDisabledUntilTimestamp = null;\n\n    /**\n     * The role ids of the member\n     * @type {Snowflake[]}\n     * @private\n     */\n    this._roles = [];\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user that this guild member instance represents\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('nick' in data) this.nickname = data.nick;\n    if ('avatar' in data) {\n      /**\n       * The guild member's avatar hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else if (typeof this.avatar !== 'string') {\n      this.avatar = null;\n    }\n    if ('joined_at' in data) this.joinedTimestamp = Date.parse(data.joined_at);\n    if ('premium_since' in data) {\n      this.premiumSinceTimestamp = data.premium_since ? Date.parse(data.premium_since) : null;\n    }\n    if ('roles' in data) this._roles = data.roles;\n\n    if ('pending' in data) {\n      this.pending = data.pending;\n    } else if (!this.partial) {\n      // See https://github.com/discordjs/discord.js/issues/6546 for more info.\n      this.pending ??= false;\n    }\n\n    if ('communication_disabled_until' in data) {\n      this.communicationDisabledUntilTimestamp =\n        data.communication_disabled_until && Date.parse(data.communication_disabled_until);\n    }\n\n    if ('flags' in data) {\n      /**\n       * The flags of this member\n       * @type {Readonly<GuildMemberFlagsBitField>}\n       */\n      this.flags = new GuildMemberFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new GuildMemberFlagsBitField().freeze();\n    }\n  }\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.joinedTimestamp === null;\n  }\n\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, { user_id: this.id });\n  }\n\n  /**\n   * A link to the member's guild avatar.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarURL(options = {}) {\n    return this.avatar && this.client.rest.cdn.guildMemberAvatar(this.guild.id, this.id, this.avatar, options);\n  }\n\n  /**\n   * A link to the member's guild avatar if they have one.\n   * Otherwise, a link to their {@link User#displayAvatarURL} will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.user.displayAvatarURL(options);\n  }\n\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The time this member's timeout will be removed\n   * @type {?Date}\n   * @readonly\n   */\n  get communicationDisabledUntil() {\n    return this.communicationDisabledUntilTimestamp && new Date(this.communicationDisabledUntilTimestamp);\n  }\n\n  /**\n   * The last time this member started boosting the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get premiumSince() {\n    return this.premiumSinceTimestamp && new Date(this.premiumSinceTimestamp);\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {?Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.guild.presences.resolve(this.id);\n  }\n\n  /**\n   * The displayed color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n  get displayColor() {\n    return this.roles.color?.color ?? 0;\n  }\n\n  /**\n   * The displayed color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n  get displayHexColor() {\n    return this.roles.color?.hexColor ?? '#000000';\n  }\n\n  /**\n   * The member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The DM between the client's user and this member\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n\n  /**\n   * The nickname of this member, or their username if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname ?? this.user.username;\n  }\n\n  /**\n   * The overall set of permissions for this member, taking only roles and owner status into account\n   * @type {Readonly<PermissionsBitField>}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerId) return new PermissionsBitField(PermissionsBitField.All).freeze();\n    return new PermissionsBitField(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.user.id === this.guild.ownerId) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerId) return true;\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);\n  }\n\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);\n  }\n\n  /**\n   * Whether this member is moderatable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get moderatable() {\n    return (\n      !this.permissions.has(PermissionFlagsBits.Administrator) &&\n      this.manageable &&\n      (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)\n    );\n  }\n\n  /**\n   * Whether this member is currently timed out\n   * @returns {boolean}\n   */\n  isCommunicationDisabled() {\n    return this.communicationDisabledUntilTimestamp > Date.now();\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {GuildChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<PermissionsBitField>}\n   */\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    return channel.permissionsFor(this);\n  }\n\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditOptions} options The options to provide\n   * @returns {Promise<GuildMember>}\n   */\n  edit(options) {\n    return this.guild.members.edit(this, options);\n  }\n\n  /**\n   * Sets the flags for this member.\n   * @param {GuildMemberFlagsResolvable} flags The flags to set\n   * @param {string} [reason] Reason for setting the flags\n   * @returns {Promise<GuildMember>}\n   */\n  setFlags(flags, reason) {\n    return this.edit({ flags, reason });\n  }\n\n  /**\n   * Sets the nickname for this member.\n   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set a nickname for a guild member\n   * guildMember.setNickname('cool nickname', 'Needed a new nickname')\n   *   .then(member => console.log(`Set nickname of ${member.user.username}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove a nickname for a guild member\n   * guildMember.setNickname(null, 'No nicknames allowed!')\n   *   .then(member => console.log(`Removed nickname for ${member.user.username}`))\n   *   .catch(console.error);\n   */\n  setNickname(nick, reason) {\n    return this.edit({ nick, reason });\n  }\n\n  /**\n   * Creates a DM channel between the client and this member.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM(force = false) {\n    return this.user.createDM(force);\n  }\n\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.guild.members.kick(this, reason);\n  }\n\n  /**\n   * Bans this guild member.\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Ban a guild member, deleting a week's worth of messages\n   * guildMember.ban({ deleteMessageSeconds: 60 * 60 * 24 * 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  ban(options) {\n    return this.guild.bans.create(this, options);\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {DateResolvable|null} communicationDisabledUntil The date or timestamp\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.disableCommunicationUntil(Date.now() + (5 * 60 * 1000), 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove the timeout of a guild member\n   * guildMember.disableCommunicationUntil(null)\n   *   .then(member => console.log(`Removed timeout for ${member.displayName}`))\n   *   .catch(console.error);\n   */\n  disableCommunicationUntil(communicationDisabledUntil, reason) {\n    return this.edit({ communicationDisabledUntil, reason });\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {number|null} timeout The time in milliseconds\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.timeout(5 * 60 * 1000, 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  timeout(timeout, reason) {\n    return this.disableCommunicationUntil(timeout && Date.now() + timeout, reason);\n  }\n\n  /**\n   * Fetches this GuildMember.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildMember>}\n   */\n  fetch(force = true) {\n    return this.guild.members.fetch({ user: this.id, cache: true, force });\n  }\n\n  /**\n   * Whether this guild member equals another guild member. It compares all properties, so for most\n   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\n   * and is often what most users need.\n   * @param {GuildMember} member The member to compare with\n   * @returns {boolean}\n   */\n  equals(member) {\n    return (\n      member instanceof this.constructor &&\n      this.id === member.id &&\n      this.partial === member.partial &&\n      this.guild.id === member.guild.id &&\n      this.joinedTimestamp === member.joinedTimestamp &&\n      this.nickname === member.nickname &&\n      this.avatar === member.avatar &&\n      this.pending === member.pending &&\n      this.communicationDisabledUntilTimestamp === member.communicationDisabledUntilTimestamp &&\n      this.flags.bitfield === member.flags.bitfield &&\n      (this._roles === member._roles ||\n        (this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i])))\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return this.user.toString();\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      guild: 'guildId',\n      user: 'userId',\n      displayName: true,\n      roles: true,\n    });\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    return json;\n  }\n}\n\n/**\n * Sends a message to this user.\n * @method send\n * @memberof GuildMember\n * @instance\n * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n * @returns {Promise<Message>}\n * @example\n * // Send a direct message\n * guildMember.send('Hello!')\n *   .then(message => console.log(`Sent message: ${message.content} to ${guildMember.displayName}`))\n *   .catch(console.error);\n */\n\nTextBasedChannel.applyToClass(GuildMember);\n\nexports.GuildMember = GuildMember;\n\n/**\n * @external APIGuildMember\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-member-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}