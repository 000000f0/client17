{"ast":null,"code":"'use strict';\n\nconst {\n  SelectMenuBuilder: BuildersSelectMenu,\n  normalizeArray\n} = require('@discordjs/builders');\nconst {\n  isJSONEncodable\n} = require('@discordjs/util');\nconst {\n  toSnakeCase\n} = require('../util/Transformers');\nconst {\n  resolvePartialEmoji\n} = require('../util/Util');\n\n/**\n * Class used to build select menu components to be sent through the API\n * @extends {BuildersSelectMenu}\n */\nclass StringSelectMenuBuilder extends BuildersSelectMenu {\n  constructor() {\n    let {\n      options,\n      ...data\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(toSnakeCase({\n      ...data,\n      options: options?.map(_ref => {\n        let {\n          emoji,\n          ...option\n        } = _ref;\n        return {\n          ...option,\n          emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji\n        };\n      })\n    }));\n  }\n\n  /**\n   * Normalizes a select menu option emoji\n   * @param {SelectMenuOptionData|APISelectMenuOption} selectMenuOption The option to normalize\n   * @returns {SelectMenuOptionBuilder|APISelectMenuOption}\n   * @private\n   */\n  static normalizeEmoji(selectMenuOption) {\n    if (isJSONEncodable(selectMenuOption)) {\n      return selectMenuOption;\n    }\n    const {\n      emoji,\n      ...option\n    } = selectMenuOption;\n    return {\n      ...option,\n      emoji: typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji\n    };\n  }\n\n  /**\n   * Adds options to this select menu\n   * @param {RestOrArray<APISelectMenuOption>} options The options to add to this select menu\n   * @returns {StringSelectMenuBuilder}\n   */\n  addOptions() {\n    for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {\n      options[_key] = arguments[_key];\n    }\n    return super.addOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));\n  }\n\n  /**\n   * Sets the options on this select menu\n   * @param {RestOrArray<APISelectMenuOption>} options The options to set on this select menu\n   * @returns {StringSelectMenuBuilder}\n   */\n  setOptions() {\n    for (var _len2 = arguments.length, options = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      options[_key2] = arguments[_key2];\n    }\n    return super.setOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));\n  }\n\n  /**\n   * Creates a new select menu builder from json data\n   * @param {StringSelectMenuBuilder|StringSelectMenuComponent|APIStringSelectComponent} other The other data\n   * @returns {StringSelectMenuBuilder}\n   */\n  static from(other) {\n    if (isJSONEncodable(other)) {\n      return new this(other.toJSON());\n    }\n    return new this(other);\n  }\n}\nmodule.exports = StringSelectMenuBuilder;\n\n/**\n * @external BuildersSelectMenu\n * @see {@link https://discord.js.org/docs/packages/builders/stable/StringSelectMenuBuilder:Class}\n */","map":{"version":3,"names":["SelectMenuBuilder","BuildersSelectMenu","normalizeArray","require","isJSONEncodable","toSnakeCase","resolvePartialEmoji","StringSelectMenuBuilder","constructor","options","data","arguments","length","undefined","map","_ref","emoji","option","normalizeEmoji","selectMenuOption","addOptions","_len","Array","_key","setOptions","_len2","_key2","from","other","toJSON","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/StringSelectMenuBuilder.js"],"sourcesContent":["'use strict';\n\nconst { SelectMenuBuilder: BuildersSelectMenu, normalizeArray } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\nconst { resolvePartialEmoji } = require('../util/Util');\n\n/**\n * Class used to build select menu components to be sent through the API\n * @extends {BuildersSelectMenu}\n */\nclass StringSelectMenuBuilder extends BuildersSelectMenu {\n  constructor({ options, ...data } = {}) {\n    super(\n      toSnakeCase({\n        ...data,\n        options: options?.map(({ emoji, ...option }) => ({\n          ...option,\n          emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,\n        })),\n      }),\n    );\n  }\n\n  /**\n   * Normalizes a select menu option emoji\n   * @param {SelectMenuOptionData|APISelectMenuOption} selectMenuOption The option to normalize\n   * @returns {SelectMenuOptionBuilder|APISelectMenuOption}\n   * @private\n   */\n  static normalizeEmoji(selectMenuOption) {\n    if (isJSONEncodable(selectMenuOption)) {\n      return selectMenuOption;\n    }\n\n    const { emoji, ...option } = selectMenuOption;\n    return {\n      ...option,\n      emoji: typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,\n    };\n  }\n\n  /**\n   * Adds options to this select menu\n   * @param {RestOrArray<APISelectMenuOption>} options The options to add to this select menu\n   * @returns {StringSelectMenuBuilder}\n   */\n  addOptions(...options) {\n    return super.addOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));\n  }\n\n  /**\n   * Sets the options on this select menu\n   * @param {RestOrArray<APISelectMenuOption>} options The options to set on this select menu\n   * @returns {StringSelectMenuBuilder}\n   */\n  setOptions(...options) {\n    return super.setOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));\n  }\n\n  /**\n   * Creates a new select menu builder from json data\n   * @param {StringSelectMenuBuilder|StringSelectMenuComponent|APIStringSelectComponent} other The other data\n   * @returns {StringSelectMenuBuilder}\n   */\n  static from(other) {\n    if (isJSONEncodable(other)) {\n      return new this(other.toJSON());\n    }\n    return new this(other);\n  }\n}\n\nmodule.exports = StringSelectMenuBuilder;\n\n/**\n * @external BuildersSelectMenu\n * @see {@link https://discord.js.org/docs/packages/builders/stable/StringSelectMenuBuilder:Class}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}