{"ast":null,"code":"'use strict';\n\nconst BaseGuild = require('./BaseGuild');\n\n/**\n * Bundles common attributes and methods between {@link Guild} and {@link InviteGuild}\n * @extends {BaseGuild}\n * @abstract\n */\nclass AnonymousGuild extends BaseGuild {\n  constructor(client, data) {\n    let immediatePatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    super(client, data);\n    if (immediatePatch) this._patch(data);\n  }\n  _patch(data) {\n    if ('features' in data) this.features = data.features;\n    if ('splash' in data) {\n      /**\n       * The hash of the guild invite splash image\n       * @type {?string}\n       */\n      this.splash = data.splash;\n    }\n    if ('banner' in data) {\n      /**\n       * The hash of the guild banner\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    }\n    if ('description' in data) {\n      /**\n       * The description of the guild, if any\n       * @type {?string}\n       */\n      this.description = data.description;\n    }\n    if ('verification_level' in data) {\n      /**\n       * The verification level of the guild\n       * @type {GuildVerificationLevel}\n       */\n      this.verificationLevel = data.verification_level;\n    }\n    if ('vanity_url_code' in data) {\n      /**\n       * The vanity invite code of the guild, if any\n       * @type {?string}\n       */\n      this.vanityURLCode = data.vanity_url_code;\n    }\n    if ('nsfw_level' in data) {\n      /**\n       * The NSFW level of this guild\n       * @type {GuildNSFWLevel}\n       */\n      this.nsfwLevel = data.nsfw_level;\n    }\n    if ('premium_subscription_count' in data) {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    } else {\n      this.premiumSubscriptionCount ??= null;\n    }\n  }\n\n  /**\n   * The URL to this guild's banner.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  bannerURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);\n  }\n\n  /**\n   * The URL to this guild's invite splash image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  splashURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);\n  }\n}\nmodule.exports = AnonymousGuild;","map":{"version":3,"names":["BaseGuild","require","AnonymousGuild","constructor","client","data","immediatePatch","arguments","length","undefined","_patch","features","splash","banner","description","verificationLevel","verification_level","vanityURLCode","vanity_url_code","nsfwLevel","nsfw_level","premiumSubscriptionCount","premium_subscription_count","bannerURL","options","rest","cdn","id","splashURL","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/AnonymousGuild.js"],"sourcesContent":["'use strict';\n\nconst BaseGuild = require('./BaseGuild');\n\n/**\n * Bundles common attributes and methods between {@link Guild} and {@link InviteGuild}\n * @extends {BaseGuild}\n * @abstract\n */\nclass AnonymousGuild extends BaseGuild {\n  constructor(client, data, immediatePatch = true) {\n    super(client, data);\n    if (immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('features' in data) this.features = data.features;\n\n    if ('splash' in data) {\n      /**\n       * The hash of the guild invite splash image\n       * @type {?string}\n       */\n      this.splash = data.splash;\n    }\n\n    if ('banner' in data) {\n      /**\n       * The hash of the guild banner\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description of the guild, if any\n       * @type {?string}\n       */\n      this.description = data.description;\n    }\n\n    if ('verification_level' in data) {\n      /**\n       * The verification level of the guild\n       * @type {GuildVerificationLevel}\n       */\n      this.verificationLevel = data.verification_level;\n    }\n\n    if ('vanity_url_code' in data) {\n      /**\n       * The vanity invite code of the guild, if any\n       * @type {?string}\n       */\n      this.vanityURLCode = data.vanity_url_code;\n    }\n\n    if ('nsfw_level' in data) {\n      /**\n       * The NSFW level of this guild\n       * @type {GuildNSFWLevel}\n       */\n      this.nsfwLevel = data.nsfw_level;\n    }\n\n    if ('premium_subscription_count' in data) {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    } else {\n      this.premiumSubscriptionCount ??= null;\n    }\n  }\n\n  /**\n   * The URL to this guild's banner.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  bannerURL(options = {}) {\n    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);\n  }\n\n  /**\n   * The URL to this guild's invite splash image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  splashURL(options = {}) {\n    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);\n  }\n}\n\nmodule.exports = AnonymousGuild;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASF,SAAS,CAAC;EACrCG,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAyB;IAAA,IAAvBC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAC7C,KAAK,CAACH,MAAM,EAAEC,IAAI,CAAC;IACnB,IAAIC,cAAc,EAAE,IAAI,CAACI,MAAM,CAACL,IAAI,CAAC;EACvC;EAEAK,MAAMA,CAACL,IAAI,EAAE;IACX,IAAI,UAAU,IAAIA,IAAI,EAAE,IAAI,CAACM,QAAQ,GAAGN,IAAI,CAACM,QAAQ;IAErD,IAAI,QAAQ,IAAIN,IAAI,EAAE;MACpB;AACN;AACA;AACA;MACM,IAAI,CAACO,MAAM,GAAGP,IAAI,CAACO,MAAM;IAC3B;IAEA,IAAI,QAAQ,IAAIP,IAAI,EAAE;MACpB;AACN;AACA;AACA;MACM,IAAI,CAACQ,MAAM,GAAGR,IAAI,CAACQ,MAAM;IAC3B;IAEA,IAAI,aAAa,IAAIR,IAAI,EAAE;MACzB;AACN;AACA;AACA;MACM,IAAI,CAACS,WAAW,GAAGT,IAAI,CAACS,WAAW;IACrC;IAEA,IAAI,oBAAoB,IAAIT,IAAI,EAAE;MAChC;AACN;AACA;AACA;MACM,IAAI,CAACU,iBAAiB,GAAGV,IAAI,CAACW,kBAAkB;IAClD;IAEA,IAAI,iBAAiB,IAAIX,IAAI,EAAE;MAC7B;AACN;AACA;AACA;MACM,IAAI,CAACY,aAAa,GAAGZ,IAAI,CAACa,eAAe;IAC3C;IAEA,IAAI,YAAY,IAAIb,IAAI,EAAE;MACxB;AACN;AACA;AACA;MACM,IAAI,CAACc,SAAS,GAAGd,IAAI,CAACe,UAAU;IAClC;IAEA,IAAI,4BAA4B,IAAIf,IAAI,EAAE;MACxC;AACN;AACA;AACA;MACM,IAAI,CAACgB,wBAAwB,GAAGhB,IAAI,CAACiB,0BAA0B;IACjE,CAAC,MAAM;MACL,IAAI,CAACD,wBAAwB,KAAK,IAAI;IACxC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEE,SAASA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpB,OAAO,IAAI,CAACM,MAAM,IAAI,IAAI,CAACT,MAAM,CAACqB,IAAI,CAACC,GAAG,CAACb,MAAM,CAAC,IAAI,CAACc,EAAE,EAAE,IAAI,CAACd,MAAM,EAAEW,OAAO,CAAC;EAClF;;EAEA;AACF;AACA;AACA;AACA;EACEI,SAASA,CAAA,EAAe;IAAA,IAAdJ,OAAO,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpB,OAAO,IAAI,CAACK,MAAM,IAAI,IAAI,CAACR,MAAM,CAACqB,IAAI,CAACC,GAAG,CAACd,MAAM,CAAC,IAAI,CAACe,EAAE,EAAE,IAAI,CAACf,MAAM,EAAEY,OAAO,CAAC;EAClF;AACF;AAEAK,MAAM,CAACC,OAAO,GAAG5B,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}