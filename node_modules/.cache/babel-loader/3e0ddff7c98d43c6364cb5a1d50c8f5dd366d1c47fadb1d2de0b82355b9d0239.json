{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Faces: () => Faces,\n  TimestampStyles: () => TimestampStyles,\n  blockQuote: () => blockQuote,\n  bold: () => bold,\n  channelLink: () => channelLink,\n  channelMention: () => channelMention,\n  chatInputApplicationCommandMention: () => chatInputApplicationCommandMention,\n  codeBlock: () => codeBlock,\n  escapeBold: () => escapeBold,\n  escapeBulletedList: () => escapeBulletedList,\n  escapeCodeBlock: () => escapeCodeBlock,\n  escapeEscape: () => escapeEscape,\n  escapeHeading: () => escapeHeading,\n  escapeInlineCode: () => escapeInlineCode,\n  escapeItalic: () => escapeItalic,\n  escapeMarkdown: () => escapeMarkdown,\n  escapeMaskedLink: () => escapeMaskedLink,\n  escapeNumberedList: () => escapeNumberedList,\n  escapeSpoiler: () => escapeSpoiler,\n  escapeStrikethrough: () => escapeStrikethrough,\n  escapeUnderline: () => escapeUnderline,\n  formatEmoji: () => formatEmoji,\n  hideLinkEmbed: () => hideLinkEmbed,\n  hyperlink: () => hyperlink,\n  inlineCode: () => inlineCode,\n  italic: () => italic,\n  messageLink: () => messageLink,\n  quote: () => quote,\n  roleMention: () => roleMention,\n  spoiler: () => spoiler,\n  strikethrough: () => strikethrough,\n  time: () => time,\n  underscore: () => underscore,\n  userMention: () => userMention\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/escapers.ts\nfunction escapeMarkdown(text) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    codeBlock: codeBlock2 = true,\n    inlineCode: inlineCode2 = true,\n    bold: bold2 = true,\n    italic: italic2 = true,\n    underline = true,\n    strikethrough: strikethrough2 = true,\n    spoiler: spoiler2 = true,\n    codeBlockContent = true,\n    inlineCodeContent = true,\n    escape = true,\n    heading = false,\n    bulletedList = false,\n    numberedList = false,\n    maskedLink = false\n  } = options;\n  if (!codeBlockContent) {\n    return text.split(\"```\").map((subString, index, array) => {\n      if (index % 2 && index !== array.length - 1) return subString;\n      return escapeMarkdown(subString, {\n        inlineCode: inlineCode2,\n        bold: bold2,\n        italic: italic2,\n        underline,\n        strikethrough: strikethrough2,\n        spoiler: spoiler2,\n        inlineCodeContent,\n        escape,\n        heading,\n        bulletedList,\n        numberedList,\n        maskedLink\n      });\n    }).join(codeBlock2 ? \"\\\\`\\\\`\\\\`\" : \"```\");\n  }\n  if (!inlineCodeContent) {\n    return text.split(/(?<=^|[^`])`(?=[^`]|$)/g).map((subString, index, array) => {\n      if (index % 2 && index !== array.length - 1) return subString;\n      return escapeMarkdown(subString, {\n        codeBlock: codeBlock2,\n        bold: bold2,\n        italic: italic2,\n        underline,\n        strikethrough: strikethrough2,\n        spoiler: spoiler2,\n        escape,\n        heading,\n        bulletedList,\n        numberedList,\n        maskedLink\n      });\n    }).join(inlineCode2 ? \"\\\\`\" : \"`\");\n  }\n  let res = text;\n  if (escape) res = escapeEscape(res);\n  if (inlineCode2) res = escapeInlineCode(res);\n  if (codeBlock2) res = escapeCodeBlock(res);\n  if (italic2) res = escapeItalic(res);\n  if (bold2) res = escapeBold(res);\n  if (underline) res = escapeUnderline(res);\n  if (strikethrough2) res = escapeStrikethrough(res);\n  if (spoiler2) res = escapeSpoiler(res);\n  if (heading) res = escapeHeading(res);\n  if (bulletedList) res = escapeBulletedList(res);\n  if (numberedList) res = escapeNumberedList(res);\n  if (maskedLink) res = escapeMaskedLink(res);\n  return res;\n}\n__name(escapeMarkdown, \"escapeMarkdown\");\nfunction escapeCodeBlock(text) {\n  return text.replaceAll(\"```\", \"\\\\`\\\\`\\\\`\");\n}\n__name(escapeCodeBlock, \"escapeCodeBlock\");\nfunction escapeInlineCode(text) {\n  return text.replaceAll(/(?<=^|[^`])``?(?=[^`]|$)/g, match => match.length === 2 ? \"\\\\`\\\\`\" : \"\\\\`\");\n}\n__name(escapeInlineCode, \"escapeInlineCode\");\nfunction escapeItalic(text) {\n  let idx = 0;\n  const newText = text.replaceAll(/(?<=^|[^*])\\*([^*]|\\*\\*|$)/g, (_, match) => {\n    if (match === \"**\") return ++idx % 2 ? `\\\\*${match}` : `${match}\\\\*`;\n    return `\\\\*${match}`;\n  });\n  idx = 0;\n  return newText.replaceAll(/(?<=^|[^_])(?<!<a?:.+)_(?!:\\d+>)([^_]|__|$)/g, (_, match) => {\n    if (match === \"__\") return ++idx % 2 ? `\\\\_${match}` : `${match}\\\\_`;\n    return `\\\\_${match}`;\n  });\n}\n__name(escapeItalic, \"escapeItalic\");\nfunction escapeBold(text) {\n  let idx = 0;\n  return text.replaceAll(/\\*\\*(\\*)?/g, (_, match) => {\n    if (match) return ++idx % 2 ? `${match}\\\\*\\\\*` : `\\\\*\\\\*${match}`;\n    return \"\\\\*\\\\*\";\n  });\n}\n__name(escapeBold, \"escapeBold\");\nfunction escapeUnderline(text) {\n  let idx = 0;\n  return text.replaceAll(/(?<!<a?:.+)__(_)?(?!:\\d+>)/g, (_, match) => {\n    if (match) return ++idx % 2 ? `${match}\\\\_\\\\_` : `\\\\_\\\\_${match}`;\n    return \"\\\\_\\\\_\";\n  });\n}\n__name(escapeUnderline, \"escapeUnderline\");\nfunction escapeStrikethrough(text) {\n  return text.replaceAll(\"~~\", \"\\\\~\\\\~\");\n}\n__name(escapeStrikethrough, \"escapeStrikethrough\");\nfunction escapeSpoiler(text) {\n  return text.replaceAll(\"||\", \"\\\\|\\\\|\");\n}\n__name(escapeSpoiler, \"escapeSpoiler\");\nfunction escapeEscape(text) {\n  return text.replaceAll(\"\\\\\", \"\\\\\\\\\");\n}\n__name(escapeEscape, \"escapeEscape\");\nfunction escapeHeading(text) {\n  return text.replaceAll(/^( {0,2})([*-] )?( *)(#{1,3} )/gm, \"$1$2$3\\\\$4\");\n}\n__name(escapeHeading, \"escapeHeading\");\nfunction escapeBulletedList(text) {\n  return text.replaceAll(/^( *)([*-])( +)/gm, \"$1\\\\$2$3\");\n}\n__name(escapeBulletedList, \"escapeBulletedList\");\nfunction escapeNumberedList(text) {\n  return text.replaceAll(/^( *\\d+)\\./gm, \"$1\\\\.\");\n}\n__name(escapeNumberedList, \"escapeNumberedList\");\nfunction escapeMaskedLink(text) {\n  return text.replaceAll(/\\[.+]\\(.+\\)/gm, \"\\\\$&\");\n}\n__name(escapeMaskedLink, \"escapeMaskedLink\");\n\n// src/formatters.ts\nfunction codeBlock(language, content) {\n  return content === void 0 ? `\\`\\`\\`\n${language}\n\\`\\`\\`` : `\\`\\`\\`${language}\n${content}\n\\`\\`\\``;\n}\n__name(codeBlock, \"codeBlock\");\nfunction inlineCode(content) {\n  return `\\`${content}\\``;\n}\n__name(inlineCode, \"inlineCode\");\nfunction italic(content) {\n  return `_${content}_`;\n}\n__name(italic, \"italic\");\nfunction bold(content) {\n  return `**${content}**`;\n}\n__name(bold, \"bold\");\nfunction underscore(content) {\n  return `__${content}__`;\n}\n__name(underscore, \"underscore\");\nfunction strikethrough(content) {\n  return `~~${content}~~`;\n}\n__name(strikethrough, \"strikethrough\");\nfunction quote(content) {\n  return `> ${content}`;\n}\n__name(quote, \"quote\");\nfunction blockQuote(content) {\n  return `>>> ${content}`;\n}\n__name(blockQuote, \"blockQuote\");\nfunction hideLinkEmbed(url) {\n  return `<${url}>`;\n}\n__name(hideLinkEmbed, \"hideLinkEmbed\");\nfunction hyperlink(content, url, title) {\n  return title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n__name(hyperlink, \"hyperlink\");\nfunction spoiler(content) {\n  return `||${content}||`;\n}\n__name(spoiler, \"spoiler\");\nfunction userMention(userId) {\n  return `<@${userId}>`;\n}\n__name(userMention, \"userMention\");\nfunction channelMention(channelId) {\n  return `<#${channelId}>`;\n}\n__name(channelMention, \"channelMention\");\nfunction roleMention(roleId) {\n  return `<@&${roleId}>`;\n}\n__name(roleMention, \"roleMention\");\nfunction chatInputApplicationCommandMention(commandName, subcommandGroupName, subcommandName, commandId) {\n  if (commandId !== void 0) {\n    return `</${commandName} ${subcommandGroupName} ${subcommandName}:${commandId}>`;\n  }\n  if (subcommandName !== void 0) {\n    return `</${commandName} ${subcommandGroupName}:${subcommandName}>`;\n  }\n  return `</${commandName}:${subcommandGroupName}>`;\n}\n__name(chatInputApplicationCommandMention, \"chatInputApplicationCommandMention\");\nfunction formatEmoji(emojiId) {\n  let animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return `<${animated ? \"a\" : \"\"}:_:${emojiId}>`;\n}\n__name(formatEmoji, \"formatEmoji\");\nfunction channelLink(channelId, guildId) {\n  return `https://discord.com/channels/${guildId ?? \"@me\"}/${channelId}`;\n}\n__name(channelLink, \"channelLink\");\nfunction messageLink(channelId, messageId, guildId) {\n  return `${guildId === void 0 ? channelLink(channelId) : channelLink(channelId, guildId)}/${messageId}`;\n}\n__name(messageLink, \"messageLink\");\nfunction time(timeOrSeconds, style) {\n  if (typeof timeOrSeconds !== \"number\") {\n    timeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1e3);\n  }\n  return typeof style === \"string\" ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n__name(time, \"time\");\nvar TimestampStyles = {\n  /**\n   * Short time format, consisting of hours and minutes.\n   *\n   * @example `16:20`\n   */\n  ShortTime: \"t\",\n  /**\n   * Long time format, consisting of hours, minutes, and seconds.\n   *\n   * @example `16:20:30`\n   */\n  LongTime: \"T\",\n  /**\n   * Short date format, consisting of day, month, and year.\n   *\n   * @example `20/04/2021`\n   */\n  ShortDate: \"d\",\n  /**\n   * Long date format, consisting of day, month, and year.\n   *\n   * @example `20 April 2021`\n   */\n  LongDate: \"D\",\n  /**\n   * Short date-time format, consisting of short date and short time formats.\n   *\n   * @example `20 April 2021 16:20`\n   */\n  ShortDateTime: \"f\",\n  /**\n   * Long date-time format, consisting of long date and short time formats.\n   *\n   * @example `Tuesday, 20 April 2021 16:20`\n   */\n  LongDateTime: \"F\",\n  /**\n   * Relative time format, consisting of a relative duration format.\n   *\n   * @example `2 months ago`\n   */\n  RelativeTime: \"R\"\n};\nvar Faces = /* @__PURE__ */(Faces2 => {\n  Faces2[\"Shrug\"] = \"\\xAF_(\\u30C4)_/\\xAF\";\n  Faces2[\"Tableflip\"] = \"(\\u256F\\xB0\\u25A1\\xB0)\\u256F\\uFE35 \\u253B\\u2501\\u253B\";\n  Faces2[\"Unflip\"] = \"\\u252C\\u2500\\u252C\\u30CE( \\xBA _ \\xBA\\u30CE)\";\n  return Faces2;\n})(Faces || {});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Faces,\n  TimestampStyles,\n  blockQuote,\n  bold,\n  channelLink,\n  channelMention,\n  chatInputApplicationCommandMention,\n  codeBlock,\n  escapeBold,\n  escapeBulletedList,\n  escapeCodeBlock,\n  escapeEscape,\n  escapeHeading,\n  escapeInlineCode,\n  escapeItalic,\n  escapeMarkdown,\n  escapeMaskedLink,\n  escapeNumberedList,\n  escapeSpoiler,\n  escapeStrikethrough,\n  escapeUnderline,\n  formatEmoji,\n  hideLinkEmbed,\n  hyperlink,\n  inlineCode,\n  italic,\n  messageLink,\n  quote,\n  roleMention,\n  spoiler,\n  strikethrough,\n  time,\n  underscore,\n  userMention\n});","map":{"version":3,"names":["src_exports","__export","Faces","TimestampStyles","blockQuote","bold","channelLink","channelMention","chatInputApplicationCommandMention","codeBlock","escapeBold","escapeBulletedList","escapeCodeBlock","escapeEscape","escapeHeading","escapeInlineCode","escapeItalic","escapeMarkdown","escapeMaskedLink","escapeNumberedList","escapeSpoiler","escapeStrikethrough","escapeUnderline","formatEmoji","hideLinkEmbed","hyperlink","inlineCode","italic","messageLink","quote","roleMention","spoiler","strikethrough","time","underscore","userMention","module","exports","__toCommonJS","text","options","arguments","length","undefined","codeBlock2","inlineCode2","bold2","italic2","underline","strikethrough2","spoiler2","codeBlockContent","inlineCodeContent","escape","heading","bulletedList","numberedList","maskedLink","split","map","subString","index","array","join","res","__name","replaceAll","match","idx","newText","_","language","content","url","title","userId","channelId","roleId","commandName","subcommandGroupName","subcommandName","commandId","emojiId","animated","guildId","messageId","timeOrSeconds","style","Math","floor","getTime","Date","now","ShortTime","LongTime","ShortDate","LongDate","ShortDateTime","LongDateTime","RelativeTime","Faces2"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/formatters/src/index.ts","/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/formatters/src/escapers.ts","/Users/williedejongh/Downloads/ark3-main4/node_modules/@discordjs/formatters/src/formatters.ts"],"sourcesContent":["export * from './escapers.js';\nexport * from './formatters.js';\n","/* eslint-disable prefer-named-capture-group */\n\n/**\n * The options that affect what will be escaped.\n */\nexport interface EscapeMarkdownOptions {\n\t/**\n\t * Whether to escape bold text.\n\t *\n\t * @defaultValue `true`\n\t */\n\tbold?: boolean;\n\n\t/**\n\t * Whether to escape bulleted lists.\n\t *\n\t * @defaultValue `false`\n\t */\n\tbulletedList?: boolean;\n\n\t/**\n\t * Whether to escape code blocks.\n\t *\n\t * @defaultValue `true`\n\t */\n\tcodeBlock?: boolean;\n\n\t/**\n\t * Whether to escape text inside code blocks.\n\t *\n\t * @defaultValue `true`\n\t */\n\tcodeBlockContent?: boolean;\n\n\t/**\n\t * Whether to escape `\\`.\n\t *\n\t * @defaultValue `true`\n\t */\n\tescape?: boolean;\n\n\t/**\n\t * Whether to escape headings.\n\t *\n\t * @defaultValue `false`\n\t */\n\theading?: boolean;\n\n\t/**\n\t * Whether to escape inline code.\n\t *\n\t * @defaultValue `true`\n\t */\n\tinlineCode?: boolean;\n\n\t/**\n\t * Whether to escape text inside inline code.\n\t *\n\t * @defaultValue `true`\n\t */\n\tinlineCodeContent?: boolean;\n\t/**\n\t * Whether to escape italics.\n\t *\n\t * @defaultValue `true`\n\t */\n\titalic?: boolean;\n\n\t/**\n\t * Whether to escape masked links.\n\t *\n\t * @defaultValue `false`\n\t */\n\tmaskedLink?: boolean;\n\n\t/**\n\t * Whether to escape numbered lists.\n\t *\n\t * @defaultValue `false`\n\t */\n\tnumberedList?: boolean;\n\n\t/**\n\t * Whether to escape spoilers.\n\t *\n\t * @defaultValue `true`\n\t */\n\tspoiler?: boolean;\n\n\t/**\n\t * Whether to escape strikethroughs.\n\t *\n\t * @defaultValue `true`\n\t */\n\tstrikethrough?: boolean;\n\n\t/**\n\t * Whether to escape underlines.\n\t *\n\t * @defaultValue `true`\n\t */\n\tunderline?: boolean;\n}\n\n/**\n * Escapes any Discord-flavored markdown in a string.\n *\n * @param text - Content to escape\n * @param options - Options for escaping the markdown\n */\nexport function escapeMarkdown(text: string, options: EscapeMarkdownOptions = {}): string {\n\tconst {\n\t\tcodeBlock = true,\n\t\tinlineCode = true,\n\t\tbold = true,\n\t\titalic = true,\n\t\tunderline = true,\n\t\tstrikethrough = true,\n\t\tspoiler = true,\n\t\tcodeBlockContent = true,\n\t\tinlineCodeContent = true,\n\t\tescape = true,\n\t\theading = false,\n\t\tbulletedList = false,\n\t\tnumberedList = false,\n\t\tmaskedLink = false,\n\t} = options;\n\n\tif (!codeBlockContent) {\n\t\treturn text\n\t\t\t.split('```')\n\t\t\t.map((subString, index, array) => {\n\t\t\t\tif (index % 2 && index !== array.length - 1) return subString;\n\t\t\t\treturn escapeMarkdown(subString, {\n\t\t\t\t\tinlineCode,\n\t\t\t\t\tbold,\n\t\t\t\t\titalic,\n\t\t\t\t\tunderline,\n\t\t\t\t\tstrikethrough,\n\t\t\t\t\tspoiler,\n\t\t\t\t\tinlineCodeContent,\n\t\t\t\t\tescape,\n\t\t\t\t\theading,\n\t\t\t\t\tbulletedList,\n\t\t\t\t\tnumberedList,\n\t\t\t\t\tmaskedLink,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.join(codeBlock ? '\\\\`\\\\`\\\\`' : '```');\n\t}\n\n\tif (!inlineCodeContent) {\n\t\treturn text\n\t\t\t.split(/(?<=^|[^`])`(?=[^`]|$)/g)\n\t\t\t.map((subString, index, array) => {\n\t\t\t\tif (index % 2 && index !== array.length - 1) return subString;\n\t\t\t\treturn escapeMarkdown(subString, {\n\t\t\t\t\tcodeBlock,\n\t\t\t\t\tbold,\n\t\t\t\t\titalic,\n\t\t\t\t\tunderline,\n\t\t\t\t\tstrikethrough,\n\t\t\t\t\tspoiler,\n\t\t\t\t\tescape,\n\t\t\t\t\theading,\n\t\t\t\t\tbulletedList,\n\t\t\t\t\tnumberedList,\n\t\t\t\t\tmaskedLink,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.join(inlineCode ? '\\\\`' : '`');\n\t}\n\n\tlet res = text;\n\tif (escape) res = escapeEscape(res);\n\tif (inlineCode) res = escapeInlineCode(res);\n\tif (codeBlock) res = escapeCodeBlock(res);\n\tif (italic) res = escapeItalic(res);\n\tif (bold) res = escapeBold(res);\n\tif (underline) res = escapeUnderline(res);\n\tif (strikethrough) res = escapeStrikethrough(res);\n\tif (spoiler) res = escapeSpoiler(res);\n\tif (heading) res = escapeHeading(res);\n\tif (bulletedList) res = escapeBulletedList(res);\n\tif (numberedList) res = escapeNumberedList(res);\n\tif (maskedLink) res = escapeMaskedLink(res);\n\treturn res;\n}\n\n/**\n * Escapes code block markdown in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeCodeBlock(text: string): string {\n\treturn text.replaceAll('```', '\\\\`\\\\`\\\\`');\n}\n\n/**\n * Escapes inline code markdown in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeInlineCode(text: string): string {\n\treturn text.replaceAll(/(?<=^|[^`])``?(?=[^`]|$)/g, (match) => (match.length === 2 ? '\\\\`\\\\`' : '\\\\`'));\n}\n\n/**\n * Escapes italic markdown in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeItalic(text: string): string {\n\tlet idx = 0;\n\tconst newText = text.replaceAll(/(?<=^|[^*])\\*([^*]|\\*\\*|$)/g, (_, match) => {\n\t\tif (match === '**') return ++idx % 2 ? `\\\\*${match}` : `${match}\\\\*`;\n\t\treturn `\\\\*${match}`;\n\t});\n\tidx = 0;\n\treturn newText.replaceAll(/(?<=^|[^_])(?<!<a?:.+)_(?!:\\d+>)([^_]|__|$)/g, (_, match) => {\n\t\tif (match === '__') return ++idx % 2 ? `\\\\_${match}` : `${match}\\\\_`;\n\t\treturn `\\\\_${match}`;\n\t});\n}\n\n/**\n * Escapes bold markdown in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeBold(text: string): string {\n\tlet idx = 0;\n\treturn text.replaceAll(/\\*\\*(\\*)?/g, (_, match) => {\n\t\tif (match) return ++idx % 2 ? `${match}\\\\*\\\\*` : `\\\\*\\\\*${match}`;\n\t\treturn '\\\\*\\\\*';\n\t});\n}\n\n/**\n * Escapes underline markdown in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeUnderline(text: string): string {\n\tlet idx = 0;\n\treturn text.replaceAll(/(?<!<a?:.+)__(_)?(?!:\\d+>)/g, (_, match) => {\n\t\tif (match) return ++idx % 2 ? `${match}\\\\_\\\\_` : `\\\\_\\\\_${match}`;\n\t\treturn '\\\\_\\\\_';\n\t});\n}\n\n/**\n * Escapes strikethrough markdown in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeStrikethrough(text: string): string {\n\treturn text.replaceAll('~~', '\\\\~\\\\~');\n}\n\n/**\n * Escapes spoiler markdown in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeSpoiler(text: string): string {\n\treturn text.replaceAll('||', '\\\\|\\\\|');\n}\n\n/**\n * Escapes escape characters in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeEscape(text: string): string {\n\treturn text.replaceAll('\\\\', '\\\\\\\\');\n}\n\n/**\n * Escapes heading characters in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeHeading(text: string): string {\n\treturn text.replaceAll(/^( {0,2})([*-] )?( *)(#{1,3} )/gm, '$1$2$3\\\\$4');\n}\n\n/**\n * Escapes bulleted list characters in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeBulletedList(text: string): string {\n\treturn text.replaceAll(/^( *)([*-])( +)/gm, '$1\\\\$2$3');\n}\n\n/**\n * Escapes numbered list characters in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeNumberedList(text: string): string {\n\treturn text.replaceAll(/^( *\\d+)\\./gm, '$1\\\\.');\n}\n\n/**\n * Escapes masked link characters in a string.\n *\n * @param text - Content to escape\n */\nexport function escapeMaskedLink(text: string): string {\n\treturn text.replaceAll(/\\[.+]\\(.+\\)/gm, '\\\\$&');\n}\n","import type { URL } from 'node:url';\nimport type { Snowflake } from 'discord-api-types/globals';\n\n/**\n * Wraps the content inside a code block with no language.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function codeBlock<C extends string>(content: C): `\\`\\`\\`\\n${C}\\n\\`\\`\\``;\n\n/**\n * Wraps the content inside a code block with the specified language.\n *\n * @typeParam L - This is inferred by the supplied language\n * @typeParam C - This is inferred by the supplied content\n * @param language - The language for the code block\n * @param content - The content to wrap\n */\nexport function codeBlock<L extends string, C extends string>(language: L, content: C): `\\`\\`\\`${L}\\n${C}\\n\\`\\`\\``;\n\nexport function codeBlock(language: string, content?: string): string {\n\treturn content === undefined ? `\\`\\`\\`\\n${language}\\n\\`\\`\\`` : `\\`\\`\\`${language}\\n${content}\\n\\`\\`\\``;\n}\n\n/**\n * Wraps the content inside \\`backticks\\` which formats it as inline code.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function inlineCode<C extends string>(content: C): `\\`${C}\\`` {\n\treturn `\\`${content}\\``;\n}\n\n/**\n * Formats the content into italic text.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function italic<C extends string>(content: C): `_${C}_` {\n\treturn `_${content}_`;\n}\n\n/**\n * Formats the content into bold text.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function bold<C extends string>(content: C): `**${C}**` {\n\treturn `**${content}**`;\n}\n\n/**\n * Formats the content into underscored text.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function underscore<C extends string>(content: C): `__${C}__` {\n\treturn `__${content}__`;\n}\n\n/**\n * Formats the content into strike-through text.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function strikethrough<C extends string>(content: C): `~~${C}~~` {\n\treturn `~~${content}~~`;\n}\n\n/**\n * Formats the content into a quote.\n *\n * @remarks This needs to be at the start of the line for Discord to format it.\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function quote<C extends string>(content: C): `> ${C}` {\n\treturn `> ${content}`;\n}\n\n/**\n * Formats the content into a block quote.\n *\n * @remarks This needs to be at the start of the line for Discord to format it.\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function blockQuote<C extends string>(content: C): `>>> ${C}` {\n\treturn `>>> ${content}`;\n}\n\n/**\n * Wraps the URL into `<>` which stops it from embedding.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param url - The URL to wrap\n */\nexport function hideLinkEmbed<C extends string>(url: C): `<${C}>`;\n\n/**\n * Wraps the URL into `<>` which stops it from embedding.\n *\n * @param url - The URL to wrap\n */\nexport function hideLinkEmbed(url: URL): `<${string}>`;\n\nexport function hideLinkEmbed(url: URL | string) {\n\treturn `<${url}>`;\n}\n\n/**\n * Formats the content and the URL into a masked URL.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to display\n * @param url - The URL the content links to\n */\nexport function hyperlink<C extends string>(content: C, url: URL): `[${C}](${string})`;\n\n/**\n * Formats the content and the URL into a masked URL.\n *\n * @typeParam C - This is inferred by the supplied content\n * @typeParam U - This is inferred by the supplied URL\n * @param content - The content to display\n * @param url - The URL the content links to\n */\nexport function hyperlink<C extends string, U extends string>(content: C, url: U): `[${C}](${U})`;\n\n/**\n * Formats the content and the URL into a masked URL with a custom tooltip.\n *\n * @typeParam C - This is inferred by the supplied content\n * @typeParam T - This is inferred by the supplied title\n * @param content - The content to display\n * @param url - The URL the content links to\n * @param title - The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, T extends string>(\n\tcontent: C,\n\turl: URL,\n\ttitle: T,\n): `[${C}](${string} \"${T}\")`;\n\n/**\n * Formats the content and the URL into a masked URL with a custom tooltip.\n *\n * @typeParam C - This is inferred by the supplied content\n * @typeParam U - This is inferred by the supplied URL\n * @typeParam T - This is inferred by the supplied title\n * @param content - The content to display\n * @param url - The URL the content links to\n * @param title - The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, U extends string, T extends string>(\n\tcontent: C,\n\turl: U,\n\ttitle: T,\n): `[${C}](${U} \"${T}\")`;\n\nexport function hyperlink(content: string, url: URL | string, title?: string) {\n\treturn title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n\n/**\n * Formats the content into a spoiler.\n *\n * @typeParam C - This is inferred by the supplied content\n * @param content - The content to wrap\n */\nexport function spoiler<C extends string>(content: C): `||${C}||` {\n\treturn `||${content}||`;\n}\n\n/**\n * Formats a user id into a user mention.\n *\n * @typeParam C - This is inferred by the supplied user id\n * @param userId - The user id to format\n */\nexport function userMention<C extends Snowflake>(userId: C): `<@${C}>` {\n\treturn `<@${userId}>`;\n}\n\n/**\n * Formats a channel id into a channel mention.\n *\n * @typeParam C - This is inferred by the supplied channel id\n * @param channelId - The channel id to format\n */\nexport function channelMention<C extends Snowflake>(channelId: C): `<#${C}>` {\n\treturn `<#${channelId}>`;\n}\n\n/**\n * Formats a role id into a role mention.\n *\n * @typeParam C - This is inferred by the supplied role id\n * @param roleId - The role id to format\n */\nexport function roleMention<C extends Snowflake>(roleId: C): `<@&${C}>` {\n\treturn `<@&${roleId}>`;\n}\n\n/**\n * Formats an application command name, subcommand group name, subcommand name, and id into an application command mention.\n *\n * @typeParam N - This is inferred by the supplied command name\n * @typeParam G - This is inferred by the supplied subcommand group name\n * @typeParam S - This is inferred by the supplied subcommand name\n * @typeParam I - This is inferred by the supplied command id\n * @param commandName - The application command name to format\n * @param subcommandGroupName - The subcommand group name to format\n * @param subcommandName - The subcommand name to format\n * @param commandId - The application command id to format\n */\nexport function chatInputApplicationCommandMention<\n\tN extends string,\n\tG extends string,\n\tS extends string,\n\tI extends Snowflake,\n>(commandName: N, subcommandGroupName: G, subcommandName: S, commandId: I): `</${N} ${G} ${S}:${I}>`;\n\n/**\n * Formats an application command name, subcommand name, and id into an application command mention.\n *\n * @typeParam N - This is inferred by the supplied command name\n * @typeParam S - This is inferred by the supplied subcommand name\n * @typeParam I - This is inferred by the supplied command id\n * @param commandName - The application command name to format\n * @param subcommandName - The subcommand name to format\n * @param commandId - The application command id to format\n */\nexport function chatInputApplicationCommandMention<N extends string, S extends string, I extends Snowflake>(\n\tcommandName: N,\n\tsubcommandName: S,\n\tcommandId: I,\n): `</${N} ${S}:${I}>`;\n\n/**\n * Formats an application command name and id into an application command mention.\n *\n * @typeParam N - This is inferred by the supplied command name\n * @typeParam I - This is inferred by the supplied command id\n * @param commandName - The application command name to format\n * @param commandId - The application command id to format\n */\nexport function chatInputApplicationCommandMention<N extends string, I extends Snowflake>(\n\tcommandName: N,\n\tcommandId: I,\n): `</${N}:${I}>`;\n\nexport function chatInputApplicationCommandMention<\n\tN extends string,\n\tG extends Snowflake | string,\n\tS extends Snowflake | string,\n\tI extends Snowflake,\n>(\n\tcommandName: N,\n\tsubcommandGroupName: G,\n\tsubcommandName?: S,\n\tcommandId?: I,\n): `</${N} ${G} ${S}:${I}>` | `</${N} ${G}:${S}>` | `</${N}:${G}>` {\n\tif (commandId !== undefined) {\n\t\treturn `</${commandName} ${subcommandGroupName} ${subcommandName!}:${commandId}>`;\n\t}\n\n\tif (subcommandName !== undefined) {\n\t\treturn `</${commandName} ${subcommandGroupName}:${subcommandName}>`;\n\t}\n\n\treturn `</${commandName}:${subcommandGroupName}>`;\n}\n\n/**\n * Formats a non-animated emoji id into a fully qualified emoji identifier.\n *\n * @typeParam C - This is inferred by the supplied emoji id\n * @param emojiId - The emoji id to format\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: false): `<:_:${C}>`;\n\n/**\n * Formats an animated emoji id into a fully qualified emoji identifier.\n *\n * @typeParam C - This is inferred by the supplied emoji id\n * @param emojiId - The emoji id to format\n * @param animated - Whether the emoji is animated\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: true): `<a:_:${C}>`;\n\n/**\n * Formats an emoji id into a fully qualified emoji identifier.\n *\n * @typeParam C - This is inferred by the supplied emoji id\n * @param emojiId - The emoji id to format\n * @param animated - Whether the emoji is animated\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: boolean): `<:_:${C}>` | `<a:_:${C}>`;\n\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated = false): `<:_:${C}>` | `<a:_:${C}>` {\n\treturn `<${animated ? 'a' : ''}:_:${emojiId}>`;\n}\n\n/**\n * Formats a channel link for a direct message channel.\n *\n * @typeParam C - This is inferred by the supplied channel id\n * @param channelId - The channel's id\n */\nexport function channelLink<C extends Snowflake>(channelId: C): `https://discord.com/channels/@me/${C}`;\n\n/**\n * Formats a channel link for a guild channel.\n *\n * @typeParam C - This is inferred by the supplied channel id\n * @typeParam G - This is inferred by the supplied guild id\n * @param channelId - The channel's id\n * @param guildId - The guild's id\n */\nexport function channelLink<C extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tguildId: G,\n): `https://discord.com/channels/${G}/${C}`;\n\nexport function channelLink<C extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tguildId?: G,\n): `https://discord.com/channels/@me/${C}` | `https://discord.com/channels/${G}/${C}` {\n\treturn `https://discord.com/channels/${guildId ?? '@me'}/${channelId}`;\n}\n\n/**\n * Formats a message link for a direct message channel.\n *\n * @typeParam C - This is inferred by the supplied channel id\n * @typeParam M - This is inferred by the supplied message id\n * @param channelId - The channel's id\n * @param messageId - The message's id\n */\nexport function messageLink<C extends Snowflake, M extends Snowflake>(\n\tchannelId: C,\n\tmessageId: M,\n): `https://discord.com/channels/@me/${C}/${M}`;\n\n/**\n * Formats a message link for a guild channel.\n *\n * @typeParam C - This is inferred by the supplied channel id\n * @typeParam M - This is inferred by the supplied message id\n * @typeParam G - This is inferred by the supplied guild id\n * @param channelId - The channel's id\n * @param messageId - The message's id\n * @param guildId - The guild's id\n */\nexport function messageLink<C extends Snowflake, M extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tmessageId: M,\n\tguildId: G,\n): `https://discord.com/channels/${G}/${C}/${M}`;\n\nexport function messageLink<C extends Snowflake, M extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tmessageId: M,\n\tguildId?: G,\n): `https://discord.com/channels/@me/${C}/${M}` | `https://discord.com/channels/${G}/${C}/${M}` {\n\treturn `${guildId === undefined ? channelLink(channelId) : channelLink(channelId, guildId)}/${messageId}`;\n}\n\n/**\n * Formats a date into a short date-time string.\n *\n * @param date - The date to format. Defaults to the current time\n */\nexport function time(date?: Date): `<t:${bigint}>`;\n\n/**\n * Formats a date given a format style.\n *\n * @typeParam S - This is inferred by the supplied {@link TimestampStylesString}\n * @param date - The date to format\n * @param style - The style to use\n */\nexport function time<S extends TimestampStylesString>(date: Date, style: S): `<t:${bigint}:${S}>`;\n\n/**\n * Formats the given timestamp into a short date-time string.\n *\n * @typeParam C - This is inferred by the supplied timestamp\n * @param seconds - A Unix timestamp in seconds\n */\nexport function time<C extends number>(seconds: C): `<t:${C}>`;\n\n/**\n * Formats the given timestamp into a short date-time string.\n *\n * @typeParam C - This is inferred by the supplied timestamp\n * @typeParam S - This is inferred by the supplied {@link TimestampStylesString}\n * @param seconds - A Unix timestamp in seconds\n * @param style - The style to use\n */\nexport function time<C extends number, S extends TimestampStylesString>(seconds: C, style: S): `<t:${C}:${S}>`;\n\nexport function time(timeOrSeconds?: Date | number, style?: TimestampStylesString): string {\n\tif (typeof timeOrSeconds !== 'number') {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\ttimeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1_000);\n\t}\n\n\treturn typeof style === 'string' ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n\n/**\n * The {@link https://discord.com/developers/docs/reference#message-formatting-timestamp-styles | message formatting timestamp styles}\n * supported by Discord.\n */\nexport const TimestampStyles = {\n\t/**\n\t * Short time format, consisting of hours and minutes.\n\t *\n\t * @example `16:20`\n\t */\n\tShortTime: 't',\n\n\t/**\n\t * Long time format, consisting of hours, minutes, and seconds.\n\t *\n\t * @example `16:20:30`\n\t */\n\tLongTime: 'T',\n\n\t/**\n\t * Short date format, consisting of day, month, and year.\n\t *\n\t * @example `20/04/2021`\n\t */\n\tShortDate: 'd',\n\n\t/**\n\t * Long date format, consisting of day, month, and year.\n\t *\n\t * @example `20 April 2021`\n\t */\n\tLongDate: 'D',\n\n\t/**\n\t * Short date-time format, consisting of short date and short time formats.\n\t *\n\t * @example `20 April 2021 16:20`\n\t */\n\tShortDateTime: 'f',\n\n\t/**\n\t * Long date-time format, consisting of long date and short time formats.\n\t *\n\t * @example `Tuesday, 20 April 2021 16:20`\n\t */\n\tLongDateTime: 'F',\n\n\t/**\n\t * Relative time format, consisting of a relative duration format.\n\t *\n\t * @example `2 months ago`\n\t */\n\tRelativeTime: 'R',\n} as const satisfies Record<string, string>;\n\n/**\n * The possible {@link TimestampStyles} values.\n */\nexport type TimestampStylesString = (typeof TimestampStyles)[keyof typeof TimestampStyles];\n\n// prettier-ignore\n/**\n * All the available faces from Discord's native slash commands.\n */\nexport enum Faces {\n\t/**\n\t * `¯\\_(ツ)_/¯`\n\t */\n\t// eslint-disable-next-line no-useless-escape\n\tShrug = '¯\\_(ツ)_/¯',\n\n\t/**\n\t * `(╯°□°)╯︵ ┻━┻`\n\t */\n\tTableflip = '(╯°□°)╯︵ ┻━┻',\n\n\t/**\n\t * `┬─┬ノ( º _ ºノ)`\n\t */\n\tUnflip = '┬─┬ノ( º _ ºノ)',\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}