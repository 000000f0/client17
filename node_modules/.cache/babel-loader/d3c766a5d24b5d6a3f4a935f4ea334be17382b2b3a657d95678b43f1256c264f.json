{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  makeURLSearchParams\n} = require('@discordjs/rest');\nconst {\n  ChannelType,\n  GuildPremiumTier,\n  Routes,\n  GuildFeature\n} = require('discord-api-types/v10');\nconst AnonymousGuild = require('./AnonymousGuild');\nconst GuildAuditLogs = require('./GuildAuditLogs');\nconst GuildPreview = require('./GuildPreview');\nconst GuildTemplate = require('./GuildTemplate');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst WelcomeScreen = require('./WelcomeScreen');\nconst {\n  DiscordjsError,\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst AutoModerationRuleManager = require('../managers/AutoModerationRuleManager');\nconst GuildApplicationCommandManager = require('../managers/GuildApplicationCommandManager');\nconst GuildBanManager = require('../managers/GuildBanManager');\nconst GuildChannelManager = require('../managers/GuildChannelManager');\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\nconst GuildInviteManager = require('../managers/GuildInviteManager');\nconst GuildMemberManager = require('../managers/GuildMemberManager');\nconst GuildScheduledEventManager = require('../managers/GuildScheduledEventManager');\nconst GuildStickerManager = require('../managers/GuildStickerManager');\nconst PresenceManager = require('../managers/PresenceManager');\nconst RoleManager = require('../managers/RoleManager');\nconst StageInstanceManager = require('../managers/StageInstanceManager');\nconst VoiceStateManager = require('../managers/VoiceStateManager');\nconst DataResolver = require('../util/DataResolver');\nconst Status = require('../util/Status');\nconst SystemChannelFlagsBitField = require('../util/SystemChannelFlagsBitField');\nconst {\n  discordSort\n} = require('../util/Util');\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with {@link Guild#available}.</info>\n * @extends {AnonymousGuild}\n */\nclass Guild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data, false);\n\n    /**\n     * A manager of the application commands belonging to this guild\n     * @type {GuildApplicationCommandManager}\n     */\n    this.commands = new GuildApplicationCommandManager(this);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the bans belonging to this guild\n     * @type {GuildBanManager}\n     */\n    this.bans = new GuildBanManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * A manager of the stage instances of this guild\n     * @type {StageInstanceManager}\n     */\n    this.stageInstances = new StageInstanceManager(this);\n\n    /**\n     * A manager of the invites of this guild\n     * @type {GuildInviteManager}\n     */\n    this.invites = new GuildInviteManager(this);\n\n    /**\n     * A manager of the scheduled events of this guild\n     * @type {GuildScheduledEventManager}\n     */\n    this.scheduledEvents = new GuildScheduledEventManager(this);\n\n    /**\n     * A manager of the auto moderation rules of this guild.\n     * @type {AutoModerationRuleManager}\n     */\n    this.autoModerationRules = new AutoModerationRuleManager(this);\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardId = data.shardId;\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardId);\n  }\n  _patch(data) {\n    super._patch(data);\n    this.id = data.id;\n    if ('name' in data) this.name = data.name;\n    if ('icon' in data) this.icon = data.icon;\n    if ('unavailable' in data) {\n      this.available = !data.unavailable;\n    } else {\n      this.available ??= true;\n    }\n    if ('discovery_splash' in data) {\n      /**\n       * The hash of the guild discovery splash image\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n    if ('member_count' in data) {\n      /**\n       * The full amount of members in this guild\n       * @type {number}\n       */\n      this.memberCount = data.member_count;\n    }\n    if ('large' in data) {\n      /**\n       * Whether the guild is \"large\" (has more than {@link WebsocketOptions large_threshold} members, 50 by default)\n       * @type {boolean}\n       */\n      this.large = Boolean(data.large);\n    }\n    if ('premium_progress_bar_enabled' in data) {\n      /**\n       * Whether this guild has its premium (boost) progress bar enabled\n       * @type {boolean}\n       */\n      this.premiumProgressBarEnabled = data.premium_progress_bar_enabled;\n    }\n    if ('application_id' in data) {\n      /**\n       * The id of the application that created this guild (if applicable)\n       * @type {?Snowflake}\n       */\n      this.applicationId = data.application_id;\n    }\n    if ('afk_timeout' in data) {\n      /**\n       * The time in seconds before a user is counted as \"away from keyboard\"\n       * @type {?number}\n       */\n      this.afkTimeout = data.afk_timeout;\n    }\n    if ('afk_channel_id' in data) {\n      /**\n       * The id of the voice channel where AFK members are moved\n       * @type {?Snowflake}\n       */\n      this.afkChannelId = data.afk_channel_id;\n    }\n    if ('system_channel_id' in data) {\n      /**\n       * The system channel's id\n       * @type {?Snowflake}\n       */\n      this.systemChannelId = data.system_channel_id;\n    }\n    if ('premium_tier' in data) {\n      /**\n       * The premium tier of this guild\n       * @type {GuildPremiumTier}\n       */\n      this.premiumTier = data.premium_tier;\n    }\n    if ('widget_enabled' in data) {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    } else {\n      this.widgetEnabled ??= null;\n    }\n    if ('widget_channel_id' in data) {\n      /**\n       * The widget channel's id, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelId = data.widget_channel_id;\n    } else {\n      this.widgetChannelId ??= null;\n    }\n    if ('explicit_content_filter' in data) {\n      /**\n       * The explicit content filter level of the guild\n       * @type {GuildExplicitContentFilter}\n       */\n      this.explicitContentFilter = data.explicit_content_filter;\n    }\n    if ('mfa_level' in data) {\n      /**\n       * The required MFA level for this guild\n       * @type {GuildMFALevel}\n       */\n      this.mfaLevel = data.mfa_level;\n    }\n    if ('joined_at' in data) {\n      /**\n       * The timestamp the client user joined the guild at\n       * @type {number}\n       */\n      this.joinedTimestamp = Date.parse(data.joined_at);\n    }\n    if ('default_message_notifications' in data) {\n      /**\n       * The default message notification level of the guild\n       * @type {GuildDefaultMessageNotifications}\n       */\n      this.defaultMessageNotifications = data.default_message_notifications;\n    }\n    if ('system_channel_flags' in data) {\n      /**\n       * The value set for the guild's system channel flags\n       * @type {Readonly<SystemChannelFlagsBitField>}\n       */\n      this.systemChannelFlags = new SystemChannelFlagsBitField(data.system_channel_flags).freeze();\n    }\n    if ('max_members' in data) {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else {\n      this.maximumMembers ??= null;\n    }\n    if ('max_presences' in data) {\n      /**\n       * The maximum amount of presences the guild can have (this is `null` for all but the largest of guilds)\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences;\n    } else {\n      this.maximumPresences ??= null;\n    }\n    if ('max_video_channel_users' in data) {\n      /**\n       * The maximum amount of users allowed in a video channel.\n       * @type {?number}\n       */\n      this.maxVideoChannelUsers = data.max_video_channel_users;\n    } else {\n      this.maxVideoChannelUsers ??= null;\n    }\n    if ('max_stage_video_channel_users' in data) {\n      /**\n       * The maximum amount of users allowed in a stage video channel.\n       * @type {?number}\n       */\n      this.maxStageVideoChannelUsers = data.max_stage_video_channel_users;\n    } else {\n      this.maxStageVideoChannelUsers ??= null;\n    }\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else {\n      this.approximateMemberCount ??= null;\n    }\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else {\n      this.approximatePresenceCount ??= null;\n    }\n\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n    this.vanityURLUses ??= null;\n    if ('rules_channel_id' in data) {\n      /**\n       * The rules channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.rulesChannelId = data.rules_channel_id;\n    }\n    if ('public_updates_channel_id' in data) {\n      /**\n       * The community updates channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.publicUpdatesChannelId = data.public_updates_channel_id;\n    }\n    if ('preferred_locale' in data) {\n      /**\n       * The preferred locale of the guild, defaults to `en-US`\n       * @type {Locale}\n       */\n      this.preferredLocale = data.preferred_locale;\n    }\n    if ('safety_alerts_channel_id' in data) {\n      /**\n       * The safety alerts channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.safetyAlertsChannelId = data.safety_alerts_channel_id;\n    } else {\n      this.safetyAlertsChannelId ??= null;\n    }\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels._add(rawChannel, this);\n      }\n    }\n    if (data.threads) {\n      for (const rawThread of data.threads) {\n        this.client.channels._add(rawThread, this);\n      }\n    }\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles._add(role);\n    }\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members._add(guildUser);\n    }\n    if ('owner_id' in data) {\n      /**\n       * The user id of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    }\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences._add(Object.assign(presence, {\n          guild: this\n        }));\n      }\n    }\n    if (data.stage_instances) {\n      this.stageInstances.cache.clear();\n      for (const stageInstance of data.stage_instances) {\n        this.stageInstances._add(stageInstance);\n      }\n    }\n    if (data.guild_scheduled_events) {\n      this.scheduledEvents.cache.clear();\n      for (const scheduledEvent of data.guild_scheduled_events) {\n        this.scheduledEvents._add(scheduledEvent);\n      }\n    }\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates._add(voiceState);\n      }\n    }\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis\n      });\n    }\n    if (!this.stickers) {\n      /**\n       * A manager of the stickers belonging to this guild\n       * @type {GuildStickerManager}\n       */\n      this.stickers = new GuildStickerManager(this);\n      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);\n    } else if (data.stickers) {\n      this.client.actions.GuildStickersUpdate.handle({\n        guild_id: this.id,\n        stickers: data.stickers\n      });\n    }\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  discoverySplashURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);\n  }\n\n  /**\n   * Fetches the owner of the guild.\n   * If the member object isn't needed, use {@link Guild#ownerId} instead.\n   * @param {BaseFetchOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n  async fetchOwner(options) {\n    if (!this.ownerId) {\n      throw new DiscordjsError(ErrorCodes.FetchOwnerId);\n    }\n    const member = await this.members.fetch({\n      ...options,\n      user: this.ownerId\n    });\n    return member;\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.resolve(this.afkChannelId);\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.resolve(this.systemChannelId);\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel)}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.resolve(this.widgetChannelId);\n  }\n\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.resolve(this.rulesChannelId);\n  }\n\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.resolve(this.publicUpdatesChannelId);\n  }\n\n  /**\n   * Safety alerts channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get safetyAlertsChannel() {\n    return this.client.channels.resolve(this.safetyAlertsChannelId);\n  }\n\n  /**\n   * The maximum bitrate available for this guild\n   * @type {number}\n   * @readonly\n   */\n  get maximumBitrate() {\n    if (this.features.includes(GuildFeature.VIPRegions)) {\n      return 384_000;\n    }\n    switch (this.premiumTier) {\n      case GuildPremiumTier.Tier1:\n        return 128_000;\n      case GuildPremiumTier.Tier2:\n        return 256_000;\n      case GuildPremiumTier.Tier3:\n        return 384_000;\n      default:\n        return 96_000;\n    }\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<Snowflake|string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  async fetchIntegrations() {\n    const data = await this.client.rest.get(Routes.guildIntegrations(this.id));\n    return data.reduce((collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)), new Collection());\n  }\n\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n  async fetchTemplates() {\n    const templates = await this.client.rest.get(Routes.guildTemplates(this.id));\n    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());\n  }\n\n  /**\n   * Fetches the welcome screen for this guild.\n   * @returns {Promise<WelcomeScreen>}\n   */\n  async fetchWelcomeScreen() {\n    const data = await this.client.rest.get(Routes.guildWelcomeScreen(this.id));\n    return new WelcomeScreen(this, data);\n  }\n\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async createTemplate(name, description) {\n    const data = await this.client.rest.post(Routes.guildTemplates(this.id), {\n      body: {\n        name,\n        description\n      }\n    });\n    return new GuildTemplate(this.client, data);\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchPreview() {\n    const data = await this.client.rest.get(Routes.guildPreview(this.id));\n    return new GuildPreview(this.client, data);\n  }\n\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity URL invite object to this guild.\n   * Resolves with an object containing the vanity URL invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n  async fetchVanityData() {\n    const data = await this.client.rest.get(Routes.guildVanityUrl(this.id));\n    this.vanityURLCode = data.code;\n    this.vanityURLUses = data.uses;\n    return data;\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  async fetchWebhooks() {\n    const apiHooks = await this.client.rest.get(Routes.guildWebhooks(this.id));\n    const hooks = new Collection();\n    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));\n    return hooks;\n  }\n\n  /**\n   * Fetches the guild widget data, requires the widget to be enabled.\n   * @returns {Promise<Widget>}\n   * @example\n   * // Fetches the guild widget data\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n   *   .catch(console.error);\n   */\n  fetchWidget() {\n    return this.client.fetchGuildWidget(this.id);\n  }\n\n  /**\n   * Data for the Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettings\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel)} channel The widget invite channel\n   */\n\n  /**\n   * The Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettingsData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|Snowflake)} channel\n   * The widget invite channel\n   */\n\n  /**\n   * Fetches the guild widget settings.\n   * @returns {Promise<GuildWidgetSettings>}\n   * @example\n   * // Fetches the guild widget settings\n   * guild.fetchWidgetSettings()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  async fetchWidgetSettings() {\n    const data = await this.client.rest.get(Routes.guildWidgetSettings(this.id));\n    this.widgetEnabled = data.enabled;\n    this.widgetChannelId = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null\n    };\n  }\n\n  /**\n   * Options used to fetch audit logs.\n   * @typedef {Object} GuildAuditLogsFetchOptions\n   * @property {Snowflake|GuildAuditLogsEntry} [before] Consider only entries before this entry\n   * @property {Snowflake|GuildAuditLogsEntry} [after] Consider only entries after this entry\n   * @property {number} [limit] The number of entries to return\n   * @property {UserResolvable} [user] Only return entries for actions made by this user\n   * @property {?AuditLogEvent} [type] Only return entries for this action type\n   */\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  async fetchAuditLogs() {\n    let {\n      before,\n      after,\n      limit,\n      user,\n      type\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const query = makeURLSearchParams({\n      before: before?.id ?? before,\n      after: after?.id ?? after,\n      limit,\n      action_type: type\n    });\n    if (user) {\n      const userId = this.client.users.resolveId(user);\n      if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');\n      query.set('user_id', userId);\n    }\n    const data = await this.client.rest.get(Routes.guildAuditLog(this.id), {\n      query\n    });\n    return new GuildAuditLogs(this, data);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditOptions\n   * @property {string} [name] The name of the guild\n   * @property {?GuildVerificationLevel} [verificationLevel] The verification level of the guild\n   * @property {?GuildDefaultMessageNotifications} [defaultMessageNotifications] The default message\n   * notification level of the guild\n   * @property {?GuildExplicitContentFilter} [explicitContentFilter] The level of the explicit content filter\n   * @property {?VoiceChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [splash] The invite splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [discoverySplash] The discovery splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The banner of the guild\n   * @property {?TextChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {?TextChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {?TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {?TextChannelResolvable} [safetyAlertsChannel] The safety alerts channel of the guild\n   * @property {?string} [preferredLocale] The preferred locale of the guild\n   * @property {GuildFeature[]} [features] The features of the guild\n   * @property {?string} [description] The discovery description of the guild\n   * @property {boolean} [premiumProgressBarEnabled] Whether the guild's premium progress bar is enabled\n   * @property {string} [reason] Reason for editing this guild\n   */\n\n  /**\n   * Data that can be resolved to a Text Channel object. This can be:\n   * * A TextChannel\n   * * A Snowflake\n   * @typedef {TextChannel|Snowflake} TextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a Voice Channel object. This can be:\n   * * A VoiceChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditOptions} options The options to provide\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name\n   * guild.edit({\n   *   name: 'Discord Guild',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated}`))\n   *   .catch(console.error);\n   */\n  async edit(_ref) {\n    let {\n      verificationLevel,\n      defaultMessageNotifications,\n      explicitContentFilter,\n      afkChannel,\n      afkTimeout,\n      icon,\n      owner,\n      splash,\n      discoverySplash,\n      banner,\n      systemChannel,\n      systemChannelFlags,\n      rulesChannel,\n      publicUpdatesChannel,\n      preferredLocale,\n      premiumProgressBarEnabled,\n      safetyAlertsChannel,\n      ...options\n    } = _ref;\n    const data = await this.client.rest.patch(Routes.guild(this.id), {\n      body: {\n        ...options,\n        verification_level: verificationLevel,\n        default_message_notifications: defaultMessageNotifications,\n        explicit_content_filter: explicitContentFilter,\n        afk_channel_id: afkChannel && this.client.channels.resolveId(afkChannel),\n        afk_timeout: afkTimeout,\n        icon: icon && (await DataResolver.resolveImage(icon)),\n        owner_id: owner && this.client.users.resolveId(owner),\n        splash: splash && (await DataResolver.resolveImage(splash)),\n        discovery_splash: discoverySplash && (await DataResolver.resolveImage(discoverySplash)),\n        banner: banner && (await DataResolver.resolveImage(banner)),\n        system_channel_id: systemChannel && this.client.channels.resolveId(systemChannel),\n        system_channel_flags: systemChannelFlags === undefined ? undefined : SystemChannelFlagsBitField.resolve(systemChannelFlags),\n        rules_channel_id: rulesChannel && this.client.channels.resolveId(rulesChannel),\n        public_updates_channel_id: publicUpdatesChannel && this.client.channels.resolveId(publicUpdatesChannel),\n        preferred_locale: preferredLocale,\n        premium_progress_bar_enabled: premiumProgressBarEnabled,\n        safety_alerts_channel_id: safetyAlertsChannel && this.client.channels.resolveId(safetyAlertsChannel)\n      },\n      reason: options.reason\n    });\n    return this.client.actions.GuildUpdate.handle(data).updated;\n  }\n\n  /**\n   * Welcome channel data\n   * @typedef {Object} WelcomeChannelData\n   * @property {string} description The description to show for this welcome channel\n   * @property {TextChannel|NewsChannel|ForumChannel|Snowflake} channel The channel to link for this welcome channel\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel\n   */\n\n  /**\n   * Welcome screen edit data\n   * @typedef {Object} WelcomeScreenEditOptions\n   * @property {boolean} [enabled] Whether the welcome screen is enabled\n   * @property {string} [description] The description for the welcome screen\n   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen\n   */\n\n  /**\n   * Data that can be resolved to a GuildTextChannel object. This can be:\n   * * A TextChannel\n   * * A NewsChannel\n   * * A Snowflake\n   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a GuildVoiceChannel object. This can be:\n   * * A VoiceChannel\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild's welcome screen\n   * @param {WelcomeScreenEditOptions} options The options to provide\n   * @returns {Promise<WelcomeScreen>}\n   * @example\n   * guild.editWelcomeScreen({\n   *   description: 'Hello World',\n   *   enabled: true,\n   *   welcomeChannels: [\n   *     {\n   *       description: 'foobar',\n   *       channel: '222197033908436994',\n   *     }\n   *   ],\n   * })\n   */\n  async editWelcomeScreen(options) {\n    const {\n      enabled,\n      description,\n      welcomeChannels\n    } = options;\n    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {\n      const emoji = this.emojis.resolve(welcomeChannelData.emoji);\n      return {\n        emoji_id: emoji?.id,\n        emoji_name: emoji?.name ?? welcomeChannelData.emoji,\n        channel_id: this.channels.resolveId(welcomeChannelData.channel),\n        description: welcomeChannelData.description\n      };\n    });\n    const patchData = await this.client.rest.patch(Routes.guildWelcomeScreen(this.id), {\n      body: {\n        welcome_channels,\n        description,\n        enabled\n      }\n    });\n    return new WelcomeScreen(this, patchData);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {?GuildExplicitContentFilter} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({\n      explicitContentFilter,\n      reason\n    });\n  }\n\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {?GuildDefaultMessageNotifications} defaultMessageNotifications\n   * The new default message notification level of the guild\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({\n      defaultMessageNotifications,\n      reason\n    });\n  }\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({\n      systemChannelFlags,\n      reason\n    });\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({\n      name,\n      reason\n    });\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {?GuildVerificationLevel} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({\n      verificationLevel,\n      reason\n    });\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {?VoiceChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({\n      afkChannel,\n      reason\n    });\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {?TextChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({\n      systemChannel,\n      reason\n    });\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({\n      afkTimeout,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {?(Base64Resolvable|BufferResolvable)} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  setIcon(icon, reason) {\n    return this.edit({\n      icon,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(guild => guild.fetchOwner())\n   *  .then(owner => console.log(`Updated the guild owner to ${owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({\n      owner,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new guild invite splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  setSplash(splash, reason) {\n    return this.edit({\n      splash,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n  setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({\n      discoverySplash,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {?(Base64Resolvable|BufferResolvable)} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  setBanner(banner, reason) {\n    return this.edit({\n      banner,\n      reason\n    });\n  }\n\n  /**\n   * Edits the rules channel of the guild.\n   * @param {?TextChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({\n      rulesChannel,\n      reason\n    });\n  }\n\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {?TextChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({\n      publicUpdatesChannel,\n      reason\n    });\n  }\n\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {?Locale} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({\n      preferredLocale,\n      reason\n    });\n  }\n\n  /**\n   * Edits the enabled state of the guild's premium progress bar\n   * @param {boolean} [enabled=true] The new enabled state of the guild's premium progress bar\n   * @param {string} [reason] Reason for changing the state of the guild's premium progress bar\n   * @returns {Promise<Guild>}\n   */\n  setPremiumProgressBarEnabled() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\n    return this.edit({\n      premiumProgressBarEnabled: enabled,\n      reason\n    });\n  }\n\n  /**\n   * Edits the safety alerts channel of the guild.\n   * @param {?TextChannelResolvable} safetyAlertsChannel The new safety alerts channel\n   * @param {string} [reason] Reason for changing the guild's safety alerts channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild safety alerts channel\n   * guild.setSafetyAlertsChannel(channel)\n   *  .then(updated => console.log(`Updated guild safety alerts channel to ${updated.safetyAlertsChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSafetyAlertsChannel(safetyAlertsChannel, reason) {\n    return this.edit({\n      safetyAlertsChannel,\n      reason\n    });\n  }\n\n  /**\n   * Edits the guild's widget settings.\n   * @param {GuildWidgetSettingsData} settings The widget settings for the guild\n   * @param {string} [reason] Reason for changing the guild's widget settings\n   * @returns {Promise<Guild>}\n   */\n  async setWidgetSettings(settings, reason) {\n    await this.client.rest.patch(Routes.guildWidgetSettings(this.id), {\n      body: {\n        enabled: settings.enabled,\n        channel_id: this.channels.resolveId(settings.channel)\n      },\n      reason\n    });\n    return this;\n  }\n\n  /**\n   * Sets the guild's MFA level\n   * <info>An elevated MFA level requires guild moderators to have 2FA enabled.</info>\n   * @param {GuildMFALevel} level The MFA level\n   * @param {string} [reason] Reason for changing the guild's MFA level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the MFA level of the guild to Elevated\n   * guild.setMFALevel(GuildMFALevel.Elevated)\n   *   .then(guild => console.log(\"Set guild's MFA level to Elevated\"))\n   *   .catch(console.error);\n   */\n  async setMFALevel(level, reason) {\n    await this.client.rest.post(Routes.guildMFA(this.id), {\n      body: {\n        level\n      },\n      reason\n    });\n    return this;\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(guild => console.log(`Left the guild: ${guild.name}`))\n   *   .catch(console.error);\n   */\n  async leave() {\n    if (this.ownerId === this.client.user.id) throw new DiscordjsError(ErrorCodes.GuildOwned);\n    await this.client.rest.delete(Routes.userGuild(this.id));\n    return this;\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.guild(this.id));\n    return this;\n  }\n\n  /**\n   * Sets whether this guild's invites are disabled.\n   * @param {boolean} [disabled=true] Whether the invites are disabled\n   * @returns {Promise<Guild>}\n   */\n  async disableInvites() {\n    let disabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const features = this.features.filter(feature => feature !== GuildFeature.InvitesDisabled);\n    if (disabled) features.push(GuildFeature.InvitesDisabled);\n    return this.edit({\n      features\n    });\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    return guild && guild instanceof this.constructor && this.id === guild.id && this.available === guild.available && this.splash === guild.splash && this.discoverySplash === guild.discoverySplash && this.name === guild.name && this.memberCount === guild.memberCount && this.large === guild.large && this.icon === guild.icon && this.ownerId === guild.ownerId && this.verificationLevel === guild.verificationLevel && (this.features === guild.features || this.features.length === guild.features.length && this.features.every((feat, i) => feat === guild.features[i]));\n  }\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * The voice state adapter for this guild that can be used with @discordjs/voice to play audio in voice\n   * and stage channels.\n   * @type {Function}\n   * @readonly\n   */\n  get voiceAdapterCreator() {\n    return methods => {\n      this.client.voice.adapters.set(this.id, methods);\n      return {\n        sendPayload: data => {\n          if (this.shard.status !== Status.Ready) return false;\n          this.shard.send(data);\n          return true;\n        },\n        destroy: () => {\n          this.client.voice.adapters.delete(this.id);\n        }\n      };\n    };\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and ids.\n   * @returns {Collection<Snowflake, Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelType.GuildCategory;\n    const channelTypes = [ChannelType.GuildText, ChannelType.GuildAnnouncement];\n    return discordSort(this.channels.cache.filter(c => (channelTypes.includes(channel.type) ? channelTypes.includes(c.type) : c.type === channel.type) && (category || c.parent === channel.parent)));\n  }\n}\nexports.Guild = Guild;\n\n/**\n * @external APIGuild\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object}\n */","map":{"version":3,"names":["Collection","require","makeURLSearchParams","ChannelType","GuildPremiumTier","Routes","GuildFeature","AnonymousGuild","GuildAuditLogs","GuildPreview","GuildTemplate","Integration","Webhook","WelcomeScreen","DiscordjsError","DiscordjsTypeError","ErrorCodes","AutoModerationRuleManager","GuildApplicationCommandManager","GuildBanManager","GuildChannelManager","GuildEmojiManager","GuildInviteManager","GuildMemberManager","GuildScheduledEventManager","GuildStickerManager","PresenceManager","RoleManager","StageInstanceManager","VoiceStateManager","DataResolver","Status","SystemChannelFlagsBitField","discordSort","Guild","constructor","client","data","commands","members","channels","bans","roles","presences","voiceStates","stageInstances","invites","scheduledEvents","autoModerationRules","unavailable","available","_patch","shardId","shard","ws","shards","get","id","name","icon","discoverySplash","discovery_splash","memberCount","member_count","large","Boolean","premiumProgressBarEnabled","premium_progress_bar_enabled","applicationId","application_id","afkTimeout","afk_timeout","afkChannelId","afk_channel_id","systemChannelId","system_channel_id","premiumTier","premium_tier","widgetEnabled","widget_enabled","widgetChannelId","widget_channel_id","explicitContentFilter","explicit_content_filter","mfaLevel","mfa_level","joinedTimestamp","Date","parse","joined_at","defaultMessageNotifications","default_message_notifications","systemChannelFlags","system_channel_flags","freeze","maximumMembers","max_members","maximumPresences","max_presences","maxVideoChannelUsers","max_video_channel_users","maxStageVideoChannelUsers","max_stage_video_channel_users","approximateMemberCount","approximate_member_count","approximatePresenceCount","approximate_presence_count","vanityURLUses","rulesChannelId","rules_channel_id","publicUpdatesChannelId","public_updates_channel_id","preferredLocale","preferred_locale","safetyAlertsChannelId","safety_alerts_channel_id","cache","clear","rawChannel","_add","threads","rawThread","role","guildUser","ownerId","owner_id","presence","Object","assign","guild","stage_instances","stageInstance","guild_scheduled_events","scheduledEvent","voice_states","voiceState","emojis","emoji","actions","GuildEmojisUpdate","handle","guild_id","stickers","sticker","GuildStickersUpdate","joinedAt","discoverySplashURL","options","arguments","length","undefined","rest","cdn","fetchOwner","FetchOwnerId","member","fetch","user","afkChannel","resolve","systemChannel","widgetChannel","rulesChannel","publicUpdatesChannel","safetyAlertsChannel","maximumBitrate","features","includes","VIPRegions","Tier1","Tier2","Tier3","fetchIntegrations","guildIntegrations","reduce","collection","integration","set","fetchTemplates","templates","guildTemplates","col","code","fetchWelcomeScreen","guildWelcomeScreen","createTemplate","description","post","body","fetchPreview","guildPreview","fetchVanityData","guildVanityUrl","vanityURLCode","uses","fetchWebhooks","apiHooks","guildWebhooks","hooks","hook","fetchWidget","fetchGuildWidget","fetchWidgetSettings","guildWidgetSettings","enabled","channel_id","channel","fetchAuditLogs","before","after","limit","type","query","action_type","userId","users","resolveId","InvalidType","guildAuditLog","edit","_ref","verificationLevel","owner","splash","banner","patch","verification_level","resolveImage","reason","GuildUpdate","updated","editWelcomeScreen","welcomeChannels","welcome_channels","map","welcomeChannelData","emoji_id","emoji_name","patchData","setExplicitContentFilter","setDefaultMessageNotifications","setSystemChannelFlags","setName","setVerificationLevel","setAFKChannel","setSystemChannel","setAFKTimeout","setIcon","setOwner","setSplash","setDiscoverySplash","setBanner","setRulesChannel","setPublicUpdatesChannel","setPreferredLocale","setPremiumProgressBarEnabled","setSafetyAlertsChannel","setWidgetSettings","settings","setMFALevel","level","guildMFA","leave","GuildOwned","delete","userGuild","disableInvites","disabled","filter","feature","InvitesDisabled","push","equals","every","feat","i","toJSON","json","createdTimestamp","nameAcronym","iconURL","splashURL","bannerURL","voiceAdapterCreator","methods","voice","adapters","sendPayload","status","Ready","send","destroy","_sortedRoles","_sortedChannels","category","GuildCategory","channelTypes","GuildText","GuildAnnouncement","c","parent","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/Guild.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { ChannelType, GuildPremiumTier, Routes, GuildFeature } = require('discord-api-types/v10');\nconst AnonymousGuild = require('./AnonymousGuild');\nconst GuildAuditLogs = require('./GuildAuditLogs');\nconst GuildPreview = require('./GuildPreview');\nconst GuildTemplate = require('./GuildTemplate');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst WelcomeScreen = require('./WelcomeScreen');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst AutoModerationRuleManager = require('../managers/AutoModerationRuleManager');\nconst GuildApplicationCommandManager = require('../managers/GuildApplicationCommandManager');\nconst GuildBanManager = require('../managers/GuildBanManager');\nconst GuildChannelManager = require('../managers/GuildChannelManager');\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\nconst GuildInviteManager = require('../managers/GuildInviteManager');\nconst GuildMemberManager = require('../managers/GuildMemberManager');\nconst GuildScheduledEventManager = require('../managers/GuildScheduledEventManager');\nconst GuildStickerManager = require('../managers/GuildStickerManager');\nconst PresenceManager = require('../managers/PresenceManager');\nconst RoleManager = require('../managers/RoleManager');\nconst StageInstanceManager = require('../managers/StageInstanceManager');\nconst VoiceStateManager = require('../managers/VoiceStateManager');\nconst DataResolver = require('../util/DataResolver');\nconst Status = require('../util/Status');\nconst SystemChannelFlagsBitField = require('../util/SystemChannelFlagsBitField');\nconst { discordSort } = require('../util/Util');\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with {@link Guild#available}.</info>\n * @extends {AnonymousGuild}\n */\nclass Guild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data, false);\n\n    /**\n     * A manager of the application commands belonging to this guild\n     * @type {GuildApplicationCommandManager}\n     */\n    this.commands = new GuildApplicationCommandManager(this);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the bans belonging to this guild\n     * @type {GuildBanManager}\n     */\n    this.bans = new GuildBanManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * A manager of the stage instances of this guild\n     * @type {StageInstanceManager}\n     */\n    this.stageInstances = new StageInstanceManager(this);\n\n    /**\n     * A manager of the invites of this guild\n     * @type {GuildInviteManager}\n     */\n    this.invites = new GuildInviteManager(this);\n\n    /**\n     * A manager of the scheduled events of this guild\n     * @type {GuildScheduledEventManager}\n     */\n    this.scheduledEvents = new GuildScheduledEventManager(this);\n\n    /**\n     * A manager of the auto moderation rules of this guild.\n     * @type {AutoModerationRuleManager}\n     */\n    this.autoModerationRules = new AutoModerationRuleManager(this);\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardId = data.shardId;\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardId);\n  }\n\n  _patch(data) {\n    super._patch(data);\n    this.id = data.id;\n    if ('name' in data) this.name = data.name;\n    if ('icon' in data) this.icon = data.icon;\n    if ('unavailable' in data) {\n      this.available = !data.unavailable;\n    } else {\n      this.available ??= true;\n    }\n\n    if ('discovery_splash' in data) {\n      /**\n       * The hash of the guild discovery splash image\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n\n    if ('member_count' in data) {\n      /**\n       * The full amount of members in this guild\n       * @type {number}\n       */\n      this.memberCount = data.member_count;\n    }\n\n    if ('large' in data) {\n      /**\n       * Whether the guild is \"large\" (has more than {@link WebsocketOptions large_threshold} members, 50 by default)\n       * @type {boolean}\n       */\n      this.large = Boolean(data.large);\n    }\n\n    if ('premium_progress_bar_enabled' in data) {\n      /**\n       * Whether this guild has its premium (boost) progress bar enabled\n       * @type {boolean}\n       */\n      this.premiumProgressBarEnabled = data.premium_progress_bar_enabled;\n    }\n\n    if ('application_id' in data) {\n      /**\n       * The id of the application that created this guild (if applicable)\n       * @type {?Snowflake}\n       */\n      this.applicationId = data.application_id;\n    }\n\n    if ('afk_timeout' in data) {\n      /**\n       * The time in seconds before a user is counted as \"away from keyboard\"\n       * @type {?number}\n       */\n      this.afkTimeout = data.afk_timeout;\n    }\n\n    if ('afk_channel_id' in data) {\n      /**\n       * The id of the voice channel where AFK members are moved\n       * @type {?Snowflake}\n       */\n      this.afkChannelId = data.afk_channel_id;\n    }\n\n    if ('system_channel_id' in data) {\n      /**\n       * The system channel's id\n       * @type {?Snowflake}\n       */\n      this.systemChannelId = data.system_channel_id;\n    }\n\n    if ('premium_tier' in data) {\n      /**\n       * The premium tier of this guild\n       * @type {GuildPremiumTier}\n       */\n      this.premiumTier = data.premium_tier;\n    }\n\n    if ('widget_enabled' in data) {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    } else {\n      this.widgetEnabled ??= null;\n    }\n\n    if ('widget_channel_id' in data) {\n      /**\n       * The widget channel's id, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelId = data.widget_channel_id;\n    } else {\n      this.widgetChannelId ??= null;\n    }\n\n    if ('explicit_content_filter' in data) {\n      /**\n       * The explicit content filter level of the guild\n       * @type {GuildExplicitContentFilter}\n       */\n      this.explicitContentFilter = data.explicit_content_filter;\n    }\n\n    if ('mfa_level' in data) {\n      /**\n       * The required MFA level for this guild\n       * @type {GuildMFALevel}\n       */\n      this.mfaLevel = data.mfa_level;\n    }\n\n    if ('joined_at' in data) {\n      /**\n       * The timestamp the client user joined the guild at\n       * @type {number}\n       */\n      this.joinedTimestamp = Date.parse(data.joined_at);\n    }\n\n    if ('default_message_notifications' in data) {\n      /**\n       * The default message notification level of the guild\n       * @type {GuildDefaultMessageNotifications}\n       */\n      this.defaultMessageNotifications = data.default_message_notifications;\n    }\n\n    if ('system_channel_flags' in data) {\n      /**\n       * The value set for the guild's system channel flags\n       * @type {Readonly<SystemChannelFlagsBitField>}\n       */\n      this.systemChannelFlags = new SystemChannelFlagsBitField(data.system_channel_flags).freeze();\n    }\n\n    if ('max_members' in data) {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else {\n      this.maximumMembers ??= null;\n    }\n\n    if ('max_presences' in data) {\n      /**\n       * The maximum amount of presences the guild can have (this is `null` for all but the largest of guilds)\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences;\n    } else {\n      this.maximumPresences ??= null;\n    }\n\n    if ('max_video_channel_users' in data) {\n      /**\n       * The maximum amount of users allowed in a video channel.\n       * @type {?number}\n       */\n      this.maxVideoChannelUsers = data.max_video_channel_users;\n    } else {\n      this.maxVideoChannelUsers ??= null;\n    }\n\n    if ('max_stage_video_channel_users' in data) {\n      /**\n       * The maximum amount of users allowed in a stage video channel.\n       * @type {?number}\n       */\n      this.maxStageVideoChannelUsers = data.max_stage_video_channel_users;\n    } else {\n      this.maxStageVideoChannelUsers ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else {\n      this.approximateMemberCount ??= null;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else {\n      this.approximatePresenceCount ??= null;\n    }\n\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n    this.vanityURLUses ??= null;\n\n    if ('rules_channel_id' in data) {\n      /**\n       * The rules channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.rulesChannelId = data.rules_channel_id;\n    }\n\n    if ('public_updates_channel_id' in data) {\n      /**\n       * The community updates channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.publicUpdatesChannelId = data.public_updates_channel_id;\n    }\n\n    if ('preferred_locale' in data) {\n      /**\n       * The preferred locale of the guild, defaults to `en-US`\n       * @type {Locale}\n       */\n      this.preferredLocale = data.preferred_locale;\n    }\n\n    if ('safety_alerts_channel_id' in data) {\n      /**\n       * The safety alerts channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.safetyAlertsChannelId = data.safety_alerts_channel_id;\n    } else {\n      this.safetyAlertsChannelId ??= null;\n    }\n\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels._add(rawChannel, this);\n      }\n    }\n\n    if (data.threads) {\n      for (const rawThread of data.threads) {\n        this.client.channels._add(rawThread, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles._add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members._add(guildUser);\n    }\n\n    if ('owner_id' in data) {\n      /**\n       * The user id of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences._add(Object.assign(presence, { guild: this }));\n      }\n    }\n\n    if (data.stage_instances) {\n      this.stageInstances.cache.clear();\n      for (const stageInstance of data.stage_instances) {\n        this.stageInstances._add(stageInstance);\n      }\n    }\n\n    if (data.guild_scheduled_events) {\n      this.scheduledEvents.cache.clear();\n      for (const scheduledEvent of data.guild_scheduled_events) {\n        this.scheduledEvents._add(scheduledEvent);\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates._add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis,\n      });\n    }\n\n    if (!this.stickers) {\n      /**\n       * A manager of the stickers belonging to this guild\n       * @type {GuildStickerManager}\n       */\n      this.stickers = new GuildStickerManager(this);\n      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);\n    } else if (data.stickers) {\n      this.client.actions.GuildStickersUpdate.handle({\n        guild_id: this.id,\n        stickers: data.stickers,\n      });\n    }\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  discoverySplashURL(options = {}) {\n    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);\n  }\n\n  /**\n   * Fetches the owner of the guild.\n   * If the member object isn't needed, use {@link Guild#ownerId} instead.\n   * @param {BaseFetchOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n  async fetchOwner(options) {\n    if (!this.ownerId) {\n      throw new DiscordjsError(ErrorCodes.FetchOwnerId);\n    }\n    const member = await this.members.fetch({ ...options, user: this.ownerId });\n    return member;\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.resolve(this.afkChannelId);\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.resolve(this.systemChannelId);\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel)}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.resolve(this.widgetChannelId);\n  }\n\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.resolve(this.rulesChannelId);\n  }\n\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.resolve(this.publicUpdatesChannelId);\n  }\n\n  /**\n   * Safety alerts channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get safetyAlertsChannel() {\n    return this.client.channels.resolve(this.safetyAlertsChannelId);\n  }\n\n  /**\n   * The maximum bitrate available for this guild\n   * @type {number}\n   * @readonly\n   */\n  get maximumBitrate() {\n    if (this.features.includes(GuildFeature.VIPRegions)) {\n      return 384_000;\n    }\n\n    switch (this.premiumTier) {\n      case GuildPremiumTier.Tier1:\n        return 128_000;\n      case GuildPremiumTier.Tier2:\n        return 256_000;\n      case GuildPremiumTier.Tier3:\n        return 384_000;\n      default:\n        return 96_000;\n    }\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<Snowflake|string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  async fetchIntegrations() {\n    const data = await this.client.rest.get(Routes.guildIntegrations(this.id));\n    return data.reduce(\n      (collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n  async fetchTemplates() {\n    const templates = await this.client.rest.get(Routes.guildTemplates(this.id));\n    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());\n  }\n\n  /**\n   * Fetches the welcome screen for this guild.\n   * @returns {Promise<WelcomeScreen>}\n   */\n  async fetchWelcomeScreen() {\n    const data = await this.client.rest.get(Routes.guildWelcomeScreen(this.id));\n    return new WelcomeScreen(this, data);\n  }\n\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async createTemplate(name, description) {\n    const data = await this.client.rest.post(Routes.guildTemplates(this.id), { body: { name, description } });\n    return new GuildTemplate(this.client, data);\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchPreview() {\n    const data = await this.client.rest.get(Routes.guildPreview(this.id));\n    return new GuildPreview(this.client, data);\n  }\n\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity URL invite object to this guild.\n   * Resolves with an object containing the vanity URL invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n  async fetchVanityData() {\n    const data = await this.client.rest.get(Routes.guildVanityUrl(this.id));\n    this.vanityURLCode = data.code;\n    this.vanityURLUses = data.uses;\n\n    return data;\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  async fetchWebhooks() {\n    const apiHooks = await this.client.rest.get(Routes.guildWebhooks(this.id));\n    const hooks = new Collection();\n    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));\n    return hooks;\n  }\n\n  /**\n   * Fetches the guild widget data, requires the widget to be enabled.\n   * @returns {Promise<Widget>}\n   * @example\n   * // Fetches the guild widget data\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n   *   .catch(console.error);\n   */\n  fetchWidget() {\n    return this.client.fetchGuildWidget(this.id);\n  }\n\n  /**\n   * Data for the Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettings\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel)} channel The widget invite channel\n   */\n\n  /**\n   * The Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettingsData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|Snowflake)} channel\n   * The widget invite channel\n   */\n\n  /**\n   * Fetches the guild widget settings.\n   * @returns {Promise<GuildWidgetSettings>}\n   * @example\n   * // Fetches the guild widget settings\n   * guild.fetchWidgetSettings()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  async fetchWidgetSettings() {\n    const data = await this.client.rest.get(Routes.guildWidgetSettings(this.id));\n    this.widgetEnabled = data.enabled;\n    this.widgetChannelId = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null,\n    };\n  }\n\n  /**\n   * Options used to fetch audit logs.\n   * @typedef {Object} GuildAuditLogsFetchOptions\n   * @property {Snowflake|GuildAuditLogsEntry} [before] Consider only entries before this entry\n   * @property {Snowflake|GuildAuditLogsEntry} [after] Consider only entries after this entry\n   * @property {number} [limit] The number of entries to return\n   * @property {UserResolvable} [user] Only return entries for actions made by this user\n   * @property {?AuditLogEvent} [type] Only return entries for this action type\n   */\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  async fetchAuditLogs({ before, after, limit, user, type } = {}) {\n    const query = makeURLSearchParams({\n      before: before?.id ?? before,\n      after: after?.id ?? after,\n      limit,\n      action_type: type,\n    });\n\n    if (user) {\n      const userId = this.client.users.resolveId(user);\n      if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');\n      query.set('user_id', userId);\n    }\n\n    const data = await this.client.rest.get(Routes.guildAuditLog(this.id), { query });\n    return new GuildAuditLogs(this, data);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditOptions\n   * @property {string} [name] The name of the guild\n   * @property {?GuildVerificationLevel} [verificationLevel] The verification level of the guild\n   * @property {?GuildDefaultMessageNotifications} [defaultMessageNotifications] The default message\n   * notification level of the guild\n   * @property {?GuildExplicitContentFilter} [explicitContentFilter] The level of the explicit content filter\n   * @property {?VoiceChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [splash] The invite splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [discoverySplash] The discovery splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The banner of the guild\n   * @property {?TextChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {?TextChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {?TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {?TextChannelResolvable} [safetyAlertsChannel] The safety alerts channel of the guild\n   * @property {?string} [preferredLocale] The preferred locale of the guild\n   * @property {GuildFeature[]} [features] The features of the guild\n   * @property {?string} [description] The discovery description of the guild\n   * @property {boolean} [premiumProgressBarEnabled] Whether the guild's premium progress bar is enabled\n   * @property {string} [reason] Reason for editing this guild\n   */\n\n  /**\n   * Data that can be resolved to a Text Channel object. This can be:\n   * * A TextChannel\n   * * A Snowflake\n   * @typedef {TextChannel|Snowflake} TextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a Voice Channel object. This can be:\n   * * A VoiceChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditOptions} options The options to provide\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name\n   * guild.edit({\n   *   name: 'Discord Guild',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated}`))\n   *   .catch(console.error);\n   */\n  async edit({\n    verificationLevel,\n    defaultMessageNotifications,\n    explicitContentFilter,\n    afkChannel,\n    afkTimeout,\n    icon,\n    owner,\n    splash,\n    discoverySplash,\n    banner,\n    systemChannel,\n    systemChannelFlags,\n    rulesChannel,\n    publicUpdatesChannel,\n    preferredLocale,\n    premiumProgressBarEnabled,\n    safetyAlertsChannel,\n    ...options\n  }) {\n    const data = await this.client.rest.patch(Routes.guild(this.id), {\n      body: {\n        ...options,\n        verification_level: verificationLevel,\n        default_message_notifications: defaultMessageNotifications,\n        explicit_content_filter: explicitContentFilter,\n        afk_channel_id: afkChannel && this.client.channels.resolveId(afkChannel),\n        afk_timeout: afkTimeout,\n        icon: icon && (await DataResolver.resolveImage(icon)),\n        owner_id: owner && this.client.users.resolveId(owner),\n        splash: splash && (await DataResolver.resolveImage(splash)),\n        discovery_splash: discoverySplash && (await DataResolver.resolveImage(discoverySplash)),\n        banner: banner && (await DataResolver.resolveImage(banner)),\n        system_channel_id: systemChannel && this.client.channels.resolveId(systemChannel),\n        system_channel_flags:\n          systemChannelFlags === undefined ? undefined : SystemChannelFlagsBitField.resolve(systemChannelFlags),\n        rules_channel_id: rulesChannel && this.client.channels.resolveId(rulesChannel),\n        public_updates_channel_id: publicUpdatesChannel && this.client.channels.resolveId(publicUpdatesChannel),\n        preferred_locale: preferredLocale,\n        premium_progress_bar_enabled: premiumProgressBarEnabled,\n        safety_alerts_channel_id: safetyAlertsChannel && this.client.channels.resolveId(safetyAlertsChannel),\n      },\n      reason: options.reason,\n    });\n\n    return this.client.actions.GuildUpdate.handle(data).updated;\n  }\n\n  /**\n   * Welcome channel data\n   * @typedef {Object} WelcomeChannelData\n   * @property {string} description The description to show for this welcome channel\n   * @property {TextChannel|NewsChannel|ForumChannel|Snowflake} channel The channel to link for this welcome channel\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel\n   */\n\n  /**\n   * Welcome screen edit data\n   * @typedef {Object} WelcomeScreenEditOptions\n   * @property {boolean} [enabled] Whether the welcome screen is enabled\n   * @property {string} [description] The description for the welcome screen\n   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen\n   */\n\n  /**\n   * Data that can be resolved to a GuildTextChannel object. This can be:\n   * * A TextChannel\n   * * A NewsChannel\n   * * A Snowflake\n   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a GuildVoiceChannel object. This can be:\n   * * A VoiceChannel\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild's welcome screen\n   * @param {WelcomeScreenEditOptions} options The options to provide\n   * @returns {Promise<WelcomeScreen>}\n   * @example\n   * guild.editWelcomeScreen({\n   *   description: 'Hello World',\n   *   enabled: true,\n   *   welcomeChannels: [\n   *     {\n   *       description: 'foobar',\n   *       channel: '222197033908436994',\n   *     }\n   *   ],\n   * })\n   */\n  async editWelcomeScreen(options) {\n    const { enabled, description, welcomeChannels } = options;\n    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {\n      const emoji = this.emojis.resolve(welcomeChannelData.emoji);\n      return {\n        emoji_id: emoji?.id,\n        emoji_name: emoji?.name ?? welcomeChannelData.emoji,\n        channel_id: this.channels.resolveId(welcomeChannelData.channel),\n        description: welcomeChannelData.description,\n      };\n    });\n\n    const patchData = await this.client.rest.patch(Routes.guildWelcomeScreen(this.id), {\n      body: {\n        welcome_channels,\n        description,\n        enabled,\n      },\n    });\n    return new WelcomeScreen(this, patchData);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {?GuildExplicitContentFilter} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({ explicitContentFilter, reason });\n  }\n\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {?GuildDefaultMessageNotifications} defaultMessageNotifications\n   * The new default message notification level of the guild\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({ defaultMessageNotifications, reason });\n  }\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({ systemChannelFlags, reason });\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {?GuildVerificationLevel} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({ verificationLevel, reason });\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {?VoiceChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({ afkChannel, reason });\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {?TextChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({ systemChannel, reason });\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({ afkTimeout, reason });\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {?(Base64Resolvable|BufferResolvable)} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  setIcon(icon, reason) {\n    return this.edit({ icon, reason });\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(guild => guild.fetchOwner())\n   *  .then(owner => console.log(`Updated the guild owner to ${owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({ owner, reason });\n  }\n\n  /**\n   * Sets a new guild invite splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  setSplash(splash, reason) {\n    return this.edit({ splash, reason });\n  }\n\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n  setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({ discoverySplash, reason });\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {?(Base64Resolvable|BufferResolvable)} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  setBanner(banner, reason) {\n    return this.edit({ banner, reason });\n  }\n\n  /**\n   * Edits the rules channel of the guild.\n   * @param {?TextChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({ rulesChannel, reason });\n  }\n\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {?TextChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({ publicUpdatesChannel, reason });\n  }\n\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {?Locale} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({ preferredLocale, reason });\n  }\n\n  /**\n   * Edits the enabled state of the guild's premium progress bar\n   * @param {boolean} [enabled=true] The new enabled state of the guild's premium progress bar\n   * @param {string} [reason] Reason for changing the state of the guild's premium progress bar\n   * @returns {Promise<Guild>}\n   */\n  setPremiumProgressBarEnabled(enabled = true, reason) {\n    return this.edit({ premiumProgressBarEnabled: enabled, reason });\n  }\n\n  /**\n   * Edits the safety alerts channel of the guild.\n   * @param {?TextChannelResolvable} safetyAlertsChannel The new safety alerts channel\n   * @param {string} [reason] Reason for changing the guild's safety alerts channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild safety alerts channel\n   * guild.setSafetyAlertsChannel(channel)\n   *  .then(updated => console.log(`Updated guild safety alerts channel to ${updated.safetyAlertsChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSafetyAlertsChannel(safetyAlertsChannel, reason) {\n    return this.edit({ safetyAlertsChannel, reason });\n  }\n\n  /**\n   * Edits the guild's widget settings.\n   * @param {GuildWidgetSettingsData} settings The widget settings for the guild\n   * @param {string} [reason] Reason for changing the guild's widget settings\n   * @returns {Promise<Guild>}\n   */\n  async setWidgetSettings(settings, reason) {\n    await this.client.rest.patch(Routes.guildWidgetSettings(this.id), {\n      body: {\n        enabled: settings.enabled,\n        channel_id: this.channels.resolveId(settings.channel),\n      },\n      reason,\n    });\n    return this;\n  }\n\n  /**\n   * Sets the guild's MFA level\n   * <info>An elevated MFA level requires guild moderators to have 2FA enabled.</info>\n   * @param {GuildMFALevel} level The MFA level\n   * @param {string} [reason] Reason for changing the guild's MFA level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the MFA level of the guild to Elevated\n   * guild.setMFALevel(GuildMFALevel.Elevated)\n   *   .then(guild => console.log(\"Set guild's MFA level to Elevated\"))\n   *   .catch(console.error);\n   */\n  async setMFALevel(level, reason) {\n    await this.client.rest.post(Routes.guildMFA(this.id), {\n      body: {\n        level,\n      },\n      reason,\n    });\n    return this;\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(guild => console.log(`Left the guild: ${guild.name}`))\n   *   .catch(console.error);\n   */\n  async leave() {\n    if (this.ownerId === this.client.user.id) throw new DiscordjsError(ErrorCodes.GuildOwned);\n    await this.client.rest.delete(Routes.userGuild(this.id));\n    return this;\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.guild(this.id));\n    return this;\n  }\n\n  /**\n   * Sets whether this guild's invites are disabled.\n   * @param {boolean} [disabled=true] Whether the invites are disabled\n   * @returns {Promise<Guild>}\n   */\n  async disableInvites(disabled = true) {\n    const features = this.features.filter(feature => feature !== GuildFeature.InvitesDisabled);\n    if (disabled) features.push(GuildFeature.InvitesDisabled);\n    return this.edit({ features });\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    return (\n      guild &&\n      guild instanceof this.constructor &&\n      this.id === guild.id &&\n      this.available === guild.available &&\n      this.splash === guild.splash &&\n      this.discoverySplash === guild.discoverySplash &&\n      this.name === guild.name &&\n      this.memberCount === guild.memberCount &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      this.ownerId === guild.ownerId &&\n      this.verificationLevel === guild.verificationLevel &&\n      (this.features === guild.features ||\n        (this.features.length === guild.features.length &&\n          this.features.every((feat, i) => feat === guild.features[i])))\n    );\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false,\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * The voice state adapter for this guild that can be used with @discordjs/voice to play audio in voice\n   * and stage channels.\n   * @type {Function}\n   * @readonly\n   */\n  get voiceAdapterCreator() {\n    return methods => {\n      this.client.voice.adapters.set(this.id, methods);\n      return {\n        sendPayload: data => {\n          if (this.shard.status !== Status.Ready) return false;\n          this.shard.send(data);\n          return true;\n        },\n        destroy: () => {\n          this.client.voice.adapters.delete(this.id);\n        },\n      };\n    };\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and ids.\n   * @returns {Collection<Snowflake, Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelType.GuildCategory;\n    const channelTypes = [ChannelType.GuildText, ChannelType.GuildAnnouncement];\n    return discordSort(\n      this.channels.cache.filter(\n        c =>\n          (channelTypes.includes(channel.type) ? channelTypes.includes(c.type) : c.type === channel.type) &&\n          (category || c.parent === channel.parent),\n      ),\n    );\n  }\n}\n\nexports.Guild = Guild;\n\n/**\n * @external APIGuild\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}