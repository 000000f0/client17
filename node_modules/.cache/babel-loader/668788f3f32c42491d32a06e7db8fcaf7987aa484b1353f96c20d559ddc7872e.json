{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('node:events');\nconst path = require('node:path');\nconst process = require('node:process');\nconst {\n  setTimeout,\n  clearTimeout\n} = require('node:timers');\nconst {\n  setTimeout: sleep\n} = require('node:timers/promises');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst ShardEvents = require('../util/ShardEvents');\nconst {\n  makeError,\n  makePlainError\n} = require('../util/Util');\nlet childProcess = null;\nlet Worker = null;\n\n/**\n * A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\n * an instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\n * spawn a new one to replace it as necessary.\n * @extends {EventEmitter}\n */\nclass Shard extends EventEmitter {\n  constructor(manager, id) {\n    super();\n    switch (manager.mode) {\n      case 'process':\n        childProcess = require('node:child_process');\n        break;\n      case 'worker':\n        Worker = require('node:worker_threads').Worker;\n        break;\n    }\n\n    /**\n     * Manager that created the shard\n     * @type {ShardingManager}\n     */\n    this.manager = manager;\n\n    /**\n     * The shard's id in the manager\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Arguments for the shard's process (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.args = manager.shardArgs ?? [];\n\n    /**\n     * Arguments for the shard's process executable (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.execArgv = manager.execArgv;\n\n    /**\n     * Environment variables for the shard's process, or workerData for the shard's worker\n     * @type {Object}\n     */\n    this.env = Object.assign({}, process.env, {\n      SHARDING_MANAGER: true,\n      SHARDS: this.id,\n      SHARD_COUNT: this.manager.totalShards,\n      DISCORD_TOKEN: this.manager.token\n    });\n\n    /**\n     * Whether the shard's {@link Client} is ready\n     * @type {boolean}\n     */\n    this.ready = false;\n\n    /**\n     * Process of the shard (if {@link ShardingManager#mode} is `process`)\n     * @type {?ChildProcess}\n     */\n    this.process = null;\n\n    /**\n     * Worker of the shard (if {@link ShardingManager#mode} is `worker`)\n     * @type {?Worker}\n     */\n    this.worker = null;\n\n    /**\n     * Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._evals = new Map();\n\n    /**\n     * Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._fetches = new Map();\n\n    /**\n     * Listener function for the {@link ChildProcess}' `exit` event\n     * @type {Function}\n     * @private\n     */\n    this._exitListener = null;\n  }\n\n  /**\n   * Forks a child process or creates a worker thread for the shard.\n   * <warn>You should not need to call this manually.</warn>\n   * @param {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready\n   * before resolving (`-1` or `Infinity` for no wait)\n   * @returns {Promise<ChildProcess>}\n   */\n  spawn() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30_000;\n    if (this.process) throw new DiscordjsError(ErrorCodes.ShardingProcessExists, this.id);\n    if (this.worker) throw new DiscordjsError(ErrorCodes.ShardingWorkerExists, this.id);\n    this._exitListener = this._handleExit.bind(this, undefined, timeout);\n    switch (this.manager.mode) {\n      case 'process':\n        this.process = childProcess.fork(path.resolve(this.manager.file), this.args, {\n          env: this.env,\n          execArgv: this.execArgv\n        }).on('message', this._handleMessage.bind(this)).on('exit', this._exitListener);\n        break;\n      case 'worker':\n        this.worker = new Worker(path.resolve(this.manager.file), {\n          workerData: this.env\n        }).on('message', this._handleMessage.bind(this)).on('exit', this._exitListener);\n        break;\n    }\n    this._evals.clear();\n    this._fetches.clear();\n    const child = this.process ?? this.worker;\n\n    /**\n     * Emitted upon the creation of the shard's child process/worker.\n     * @event Shard#spawn\n     * @param {ChildProcess|Worker} process Child process/worker that was created\n     */\n    this.emit(ShardEvents.Spawn, child);\n    if (timeout === -1 || timeout === Infinity) return Promise.resolve(child);\n    return new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(spawnTimeoutTimer);\n        this.off('ready', onReady);\n        this.off('disconnect', onDisconnect);\n        this.off('death', onDeath);\n      };\n      const onReady = () => {\n        cleanup();\n        resolve(child);\n      };\n      const onDisconnect = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyDisconnected, this.id));\n      };\n      const onDeath = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyDied, this.id));\n      };\n      const onTimeout = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyTimeout, this.id));\n      };\n      const spawnTimeoutTimer = setTimeout(onTimeout, timeout);\n      this.once('ready', onReady);\n      this.once('disconnect', onDisconnect);\n      this.once('death', onDeath);\n    });\n  }\n\n  /**\n   * Immediately kills the shard's process/worker and does not restart it.\n   */\n  kill() {\n    if (this.process) {\n      this.process.removeListener('exit', this._exitListener);\n      this.process.kill();\n    } else {\n      this.worker.removeListener('exit', this._exitListener);\n      this.worker.terminate();\n    }\n    this._handleExit(false);\n  }\n\n  /**\n   * Options used to respawn a shard.\n   * @typedef {Object} ShardRespawnOptions\n   * @property {number} [delay=500] How long to wait between killing the process/worker and\n   * restarting it (in milliseconds)\n   * @property {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client}\n   * has become ready before resolving (`-1` or `Infinity` for no wait)\n   */\n\n  /**\n   * Kills and restarts the shard's process/worker.\n   * @param {ShardRespawnOptions} [options] Options for respawning the shard\n   * @returns {Promise<ChildProcess>}\n   */\n  async respawn() {\n    let {\n      delay = 500,\n      timeout = 30_000\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.kill();\n    if (delay > 0) await sleep(delay);\n    return this.spawn(timeout);\n  }\n\n  /**\n   * Sends a message to the shard's process/worker.\n   * @param {*} message Message to send to the shard\n   * @returns {Promise<Shard>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      if (this.process) {\n        this.process.send(message, err => {\n          if (err) reject(err);else resolve(this);\n        });\n      } else {\n        this.worker.postMessage(message);\n        resolve(this);\n      }\n    });\n  }\n\n  /**\n   * Fetches a client property value of the shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<*>}\n   * @example\n   * shard.fetchClientValue('guilds.cache.size')\n   *   .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n   *   .catch(console.error);\n   */\n  fetchClientValue(prop) {\n    // Shard is dead (maybe respawning), don't cache anything and error immediately\n    if (!this.process && !this.worker) {\n      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id));\n    }\n\n    // Cached promise from previous call\n    if (this._fetches.has(prop)) return this._fetches.get(prop);\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process ?? this.worker;\n      const listener = message => {\n        if (message?._fetchProp !== prop) return;\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._fetches.delete(prop);\n        if (!message._error) resolve(message._result);else reject(makeError(message._error));\n      };\n      this.incrementMaxListeners(child);\n      child.on('message', listener);\n      this.send({\n        _fetchProp: prop\n      }).catch(err => {\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._fetches.delete(prop);\n        reject(err);\n      });\n    });\n    this._fetches.set(prop, promise);\n    return promise;\n  }\n\n  /**\n   * Evaluates a script or function on the shard, in the context of the {@link Client}.\n   * @param {string|Function} script JavaScript to run on the shard\n   * @param {*} [context] The context for the eval\n   * @returns {Promise<*>} Result of the script execution\n   */\n  eval(script, context) {\n    // Stringify the script if it's a Function\n    const _eval = typeof script === 'function' ? `(${script})(this, ${JSON.stringify(context)})` : script;\n\n    // Shard is dead (maybe respawning), don't cache anything and error immediately\n    if (!this.process && !this.worker) {\n      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id));\n    }\n\n    // Cached promise from previous call\n    if (this._evals.has(_eval)) return this._evals.get(_eval);\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process ?? this.worker;\n      const listener = message => {\n        if (message?._eval !== _eval) return;\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._evals.delete(_eval);\n        if (!message._error) resolve(message._result);else reject(makeError(message._error));\n      };\n      this.incrementMaxListeners(child);\n      child.on('message', listener);\n      this.send({\n        _eval\n      }).catch(err => {\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._evals.delete(_eval);\n        reject(err);\n      });\n    });\n    this._evals.set(_eval, promise);\n    return promise;\n  }\n\n  /**\n   * Handles a message received from the child process/worker.\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (message) {\n      // Shard is ready\n      if (message._ready) {\n        this.ready = true;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardReady} event.\n         * @event Shard#ready\n         */\n        this.emit(ShardEvents.Ready);\n        return;\n      }\n\n      // Shard has disconnected\n      if (message._disconnect) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardDisconnect} event.\n         * @event Shard#disconnect\n         */\n        this.emit(ShardEvents.Disconnect);\n        return;\n      }\n\n      // Shard is attempting to reconnect\n      if (message._reconnecting) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardReconnecting} event.\n         * @event Shard#reconnecting\n         */\n        this.emit(ShardEvents.Reconnecting);\n        return;\n      }\n\n      // Shard is requesting a property fetch\n      if (message._sFetchProp) {\n        const resp = {\n          _sFetchProp: message._sFetchProp,\n          _sFetchPropShard: message._sFetchPropShard\n        };\n        this.manager.fetchClientValues(message._sFetchProp, message._sFetchPropShard).then(results => this.send({\n          ...resp,\n          _result: results\n        }), err => this.send({\n          ...resp,\n          _error: makePlainError(err)\n        }));\n        return;\n      }\n\n      // Shard is requesting an eval broadcast\n      if (message._sEval) {\n        const resp = {\n          _sEval: message._sEval,\n          _sEvalShard: message._sEvalShard\n        };\n        this.manager._performOnShards('eval', [message._sEval], message._sEvalShard).then(results => this.send({\n          ...resp,\n          _result: results\n        }), err => this.send({\n          ...resp,\n          _error: makePlainError(err)\n        }));\n        return;\n      }\n\n      // Shard is requesting a respawn of all shards\n      if (message._sRespawnAll) {\n        const {\n          shardDelay,\n          respawnDelay,\n          timeout\n        } = message._sRespawnAll;\n        this.manager.respawnAll({\n          shardDelay,\n          respawnDelay,\n          timeout\n        }).catch(() => {\n          // Do nothing\n        });\n        return;\n      }\n    }\n\n    /**\n     * Emitted upon receiving a message from the child process/worker.\n     * @event Shard#message\n     * @param {*} message Message that was received\n     */\n    this.emit(ShardEvents.Message, message);\n  }\n\n  /**\n   * Handles the shard's process/worker exiting.\n   * @param {boolean} [respawn=this.manager.respawn] Whether to spawn the shard again\n   * @param {number} [timeout] The amount in milliseconds to wait until the {@link Client}\n   * has become ready (`-1` or `Infinity` for no wait)\n   * @private\n   */\n  _handleExit() {\n    let respawn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.manager.respawn;\n    let timeout = arguments.length > 1 ? arguments[1] : undefined;\n    /**\n     * Emitted upon the shard's child process/worker exiting.\n     * @event Shard#death\n     * @param {ChildProcess|Worker} process Child process/worker that exited\n     */\n    this.emit(ShardEvents.Death, this.process ?? this.worker);\n    this.ready = false;\n    this.process = null;\n    this.worker = null;\n    this._evals.clear();\n    this._fetches.clear();\n    if (respawn) this.spawn(timeout).catch(err => this.emit(ShardEvents.Error, err));\n  }\n\n  /**\n   * Increments max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  incrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners + 1);\n    }\n  }\n\n  /**\n   * Decrements max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  decrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners - 1);\n    }\n  }\n}\nmodule.exports = Shard;","map":{"version":3,"names":["EventEmitter","require","path","process","setTimeout","clearTimeout","sleep","DiscordjsError","ErrorCodes","ShardEvents","makeError","makePlainError","childProcess","Worker","Shard","constructor","manager","id","mode","args","shardArgs","execArgv","env","Object","assign","SHARDING_MANAGER","SHARDS","SHARD_COUNT","totalShards","DISCORD_TOKEN","token","ready","worker","_evals","Map","_fetches","_exitListener","spawn","timeout","arguments","length","undefined","ShardingProcessExists","ShardingWorkerExists","_handleExit","bind","fork","resolve","file","on","_handleMessage","workerData","clear","child","emit","Spawn","Infinity","Promise","reject","cleanup","spawnTimeoutTimer","off","onReady","onDisconnect","onDeath","ShardingReadyDisconnected","ShardingReadyDied","onTimeout","ShardingReadyTimeout","once","kill","removeListener","terminate","respawn","delay","send","message","err","postMessage","fetchClientValue","prop","ShardingNoChildExists","has","get","promise","listener","_fetchProp","decrementMaxListeners","delete","_error","_result","incrementMaxListeners","catch","set","eval","script","context","_eval","JSON","stringify","_ready","Ready","_disconnect","Disconnect","_reconnecting","Reconnecting","_sFetchProp","resp","_sFetchPropShard","fetchClientValues","then","results","_sEval","_sEvalShard","_performOnShards","_sRespawnAll","shardDelay","respawnDelay","respawnAll","Message","Death","Error","emitter","maxListeners","getMaxListeners","setMaxListeners","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/sharding/Shard.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('node:events');\nconst path = require('node:path');\nconst process = require('node:process');\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { setTimeout: sleep } = require('node:timers/promises');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst ShardEvents = require('../util/ShardEvents');\nconst { makeError, makePlainError } = require('../util/Util');\nlet childProcess = null;\nlet Worker = null;\n\n/**\n * A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\n * an instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\n * spawn a new one to replace it as necessary.\n * @extends {EventEmitter}\n */\nclass Shard extends EventEmitter {\n  constructor(manager, id) {\n    super();\n\n    switch (manager.mode) {\n      case 'process':\n        childProcess = require('node:child_process');\n        break;\n      case 'worker':\n        Worker = require('node:worker_threads').Worker;\n        break;\n    }\n\n    /**\n     * Manager that created the shard\n     * @type {ShardingManager}\n     */\n    this.manager = manager;\n\n    /**\n     * The shard's id in the manager\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Arguments for the shard's process (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.args = manager.shardArgs ?? [];\n\n    /**\n     * Arguments for the shard's process executable (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.execArgv = manager.execArgv;\n\n    /**\n     * Environment variables for the shard's process, or workerData for the shard's worker\n     * @type {Object}\n     */\n    this.env = Object.assign({}, process.env, {\n      SHARDING_MANAGER: true,\n      SHARDS: this.id,\n      SHARD_COUNT: this.manager.totalShards,\n      DISCORD_TOKEN: this.manager.token,\n    });\n\n    /**\n     * Whether the shard's {@link Client} is ready\n     * @type {boolean}\n     */\n    this.ready = false;\n\n    /**\n     * Process of the shard (if {@link ShardingManager#mode} is `process`)\n     * @type {?ChildProcess}\n     */\n    this.process = null;\n\n    /**\n     * Worker of the shard (if {@link ShardingManager#mode} is `worker`)\n     * @type {?Worker}\n     */\n    this.worker = null;\n\n    /**\n     * Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._evals = new Map();\n\n    /**\n     * Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._fetches = new Map();\n\n    /**\n     * Listener function for the {@link ChildProcess}' `exit` event\n     * @type {Function}\n     * @private\n     */\n    this._exitListener = null;\n  }\n\n  /**\n   * Forks a child process or creates a worker thread for the shard.\n   * <warn>You should not need to call this manually.</warn>\n   * @param {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready\n   * before resolving (`-1` or `Infinity` for no wait)\n   * @returns {Promise<ChildProcess>}\n   */\n  spawn(timeout = 30_000) {\n    if (this.process) throw new DiscordjsError(ErrorCodes.ShardingProcessExists, this.id);\n    if (this.worker) throw new DiscordjsError(ErrorCodes.ShardingWorkerExists, this.id);\n\n    this._exitListener = this._handleExit.bind(this, undefined, timeout);\n\n    switch (this.manager.mode) {\n      case 'process':\n        this.process = childProcess\n          .fork(path.resolve(this.manager.file), this.args, {\n            env: this.env,\n            execArgv: this.execArgv,\n          })\n          .on('message', this._handleMessage.bind(this))\n          .on('exit', this._exitListener);\n        break;\n      case 'worker':\n        this.worker = new Worker(path.resolve(this.manager.file), { workerData: this.env })\n          .on('message', this._handleMessage.bind(this))\n          .on('exit', this._exitListener);\n        break;\n    }\n\n    this._evals.clear();\n    this._fetches.clear();\n\n    const child = this.process ?? this.worker;\n\n    /**\n     * Emitted upon the creation of the shard's child process/worker.\n     * @event Shard#spawn\n     * @param {ChildProcess|Worker} process Child process/worker that was created\n     */\n    this.emit(ShardEvents.Spawn, child);\n\n    if (timeout === -1 || timeout === Infinity) return Promise.resolve(child);\n    return new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(spawnTimeoutTimer);\n        this.off('ready', onReady);\n        this.off('disconnect', onDisconnect);\n        this.off('death', onDeath);\n      };\n\n      const onReady = () => {\n        cleanup();\n        resolve(child);\n      };\n\n      const onDisconnect = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyDisconnected, this.id));\n      };\n\n      const onDeath = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyDied, this.id));\n      };\n\n      const onTimeout = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyTimeout, this.id));\n      };\n\n      const spawnTimeoutTimer = setTimeout(onTimeout, timeout);\n      this.once('ready', onReady);\n      this.once('disconnect', onDisconnect);\n      this.once('death', onDeath);\n    });\n  }\n\n  /**\n   * Immediately kills the shard's process/worker and does not restart it.\n   */\n  kill() {\n    if (this.process) {\n      this.process.removeListener('exit', this._exitListener);\n      this.process.kill();\n    } else {\n      this.worker.removeListener('exit', this._exitListener);\n      this.worker.terminate();\n    }\n\n    this._handleExit(false);\n  }\n\n  /**\n   * Options used to respawn a shard.\n   * @typedef {Object} ShardRespawnOptions\n   * @property {number} [delay=500] How long to wait between killing the process/worker and\n   * restarting it (in milliseconds)\n   * @property {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client}\n   * has become ready before resolving (`-1` or `Infinity` for no wait)\n   */\n\n  /**\n   * Kills and restarts the shard's process/worker.\n   * @param {ShardRespawnOptions} [options] Options for respawning the shard\n   * @returns {Promise<ChildProcess>}\n   */\n  async respawn({ delay = 500, timeout = 30_000 } = {}) {\n    this.kill();\n    if (delay > 0) await sleep(delay);\n    return this.spawn(timeout);\n  }\n\n  /**\n   * Sends a message to the shard's process/worker.\n   * @param {*} message Message to send to the shard\n   * @returns {Promise<Shard>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      if (this.process) {\n        this.process.send(message, err => {\n          if (err) reject(err);\n          else resolve(this);\n        });\n      } else {\n        this.worker.postMessage(message);\n        resolve(this);\n      }\n    });\n  }\n\n  /**\n   * Fetches a client property value of the shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<*>}\n   * @example\n   * shard.fetchClientValue('guilds.cache.size')\n   *   .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n   *   .catch(console.error);\n   */\n  fetchClientValue(prop) {\n    // Shard is dead (maybe respawning), don't cache anything and error immediately\n    if (!this.process && !this.worker) {\n      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id));\n    }\n\n    // Cached promise from previous call\n    if (this._fetches.has(prop)) return this._fetches.get(prop);\n\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process ?? this.worker;\n\n      const listener = message => {\n        if (message?._fetchProp !== prop) return;\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._fetches.delete(prop);\n        if (!message._error) resolve(message._result);\n        else reject(makeError(message._error));\n      };\n\n      this.incrementMaxListeners(child);\n      child.on('message', listener);\n\n      this.send({ _fetchProp: prop }).catch(err => {\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._fetches.delete(prop);\n        reject(err);\n      });\n    });\n\n    this._fetches.set(prop, promise);\n    return promise;\n  }\n\n  /**\n   * Evaluates a script or function on the shard, in the context of the {@link Client}.\n   * @param {string|Function} script JavaScript to run on the shard\n   * @param {*} [context] The context for the eval\n   * @returns {Promise<*>} Result of the script execution\n   */\n  eval(script, context) {\n    // Stringify the script if it's a Function\n    const _eval = typeof script === 'function' ? `(${script})(this, ${JSON.stringify(context)})` : script;\n\n    // Shard is dead (maybe respawning), don't cache anything and error immediately\n    if (!this.process && !this.worker) {\n      return Promise.reject(new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id));\n    }\n\n    // Cached promise from previous call\n    if (this._evals.has(_eval)) return this._evals.get(_eval);\n\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process ?? this.worker;\n\n      const listener = message => {\n        if (message?._eval !== _eval) return;\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._evals.delete(_eval);\n        if (!message._error) resolve(message._result);\n        else reject(makeError(message._error));\n      };\n\n      this.incrementMaxListeners(child);\n      child.on('message', listener);\n\n      this.send({ _eval }).catch(err => {\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._evals.delete(_eval);\n        reject(err);\n      });\n    });\n\n    this._evals.set(_eval, promise);\n    return promise;\n  }\n\n  /**\n   * Handles a message received from the child process/worker.\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (message) {\n      // Shard is ready\n      if (message._ready) {\n        this.ready = true;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardReady} event.\n         * @event Shard#ready\n         */\n        this.emit(ShardEvents.Ready);\n        return;\n      }\n\n      // Shard has disconnected\n      if (message._disconnect) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardDisconnect} event.\n         * @event Shard#disconnect\n         */\n        this.emit(ShardEvents.Disconnect);\n        return;\n      }\n\n      // Shard is attempting to reconnect\n      if (message._reconnecting) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardReconnecting} event.\n         * @event Shard#reconnecting\n         */\n        this.emit(ShardEvents.Reconnecting);\n        return;\n      }\n\n      // Shard is requesting a property fetch\n      if (message._sFetchProp) {\n        const resp = { _sFetchProp: message._sFetchProp, _sFetchPropShard: message._sFetchPropShard };\n        this.manager.fetchClientValues(message._sFetchProp, message._sFetchPropShard).then(\n          results => this.send({ ...resp, _result: results }),\n          err => this.send({ ...resp, _error: makePlainError(err) }),\n        );\n        return;\n      }\n\n      // Shard is requesting an eval broadcast\n      if (message._sEval) {\n        const resp = { _sEval: message._sEval, _sEvalShard: message._sEvalShard };\n        this.manager._performOnShards('eval', [message._sEval], message._sEvalShard).then(\n          results => this.send({ ...resp, _result: results }),\n          err => this.send({ ...resp, _error: makePlainError(err) }),\n        );\n        return;\n      }\n\n      // Shard is requesting a respawn of all shards\n      if (message._sRespawnAll) {\n        const { shardDelay, respawnDelay, timeout } = message._sRespawnAll;\n        this.manager.respawnAll({ shardDelay, respawnDelay, timeout }).catch(() => {\n          // Do nothing\n        });\n        return;\n      }\n    }\n\n    /**\n     * Emitted upon receiving a message from the child process/worker.\n     * @event Shard#message\n     * @param {*} message Message that was received\n     */\n    this.emit(ShardEvents.Message, message);\n  }\n\n  /**\n   * Handles the shard's process/worker exiting.\n   * @param {boolean} [respawn=this.manager.respawn] Whether to spawn the shard again\n   * @param {number} [timeout] The amount in milliseconds to wait until the {@link Client}\n   * has become ready (`-1` or `Infinity` for no wait)\n   * @private\n   */\n  _handleExit(respawn = this.manager.respawn, timeout) {\n    /**\n     * Emitted upon the shard's child process/worker exiting.\n     * @event Shard#death\n     * @param {ChildProcess|Worker} process Child process/worker that exited\n     */\n    this.emit(ShardEvents.Death, this.process ?? this.worker);\n\n    this.ready = false;\n    this.process = null;\n    this.worker = null;\n    this._evals.clear();\n    this._fetches.clear();\n\n    if (respawn) this.spawn(timeout).catch(err => this.emit(ShardEvents.Error, err));\n  }\n\n  /**\n   * Increments max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  incrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners + 1);\n    }\n  }\n\n  /**\n   * Decrements max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  decrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners - 1);\n    }\n  }\n}\n\nmodule.exports = Shard;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}