{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst {\n  Emoji\n} = require('./Emoji');\nconst ActivityFlagsBitField = require('../util/ActivityFlagsBitField');\nconst {\n  flatten\n} = require('../util/Util');\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyId] Id of the party represented in activity\n * @property {MessageActivityType} type Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n * @extends {Base}\n */\nclass Presence extends Base {\n  constructor(client) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(client);\n\n    /**\n     * The presence's user id\n     * @type {Snowflake}\n     */\n    this.userId = data.user.id;\n\n    /**\n     * The guild this presence is in\n     * @type {?Guild}\n     */\n    this.guild = data.guild ?? null;\n    this._patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.userId);\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.resolve(this.userId);\n  }\n  _patch(data) {\n    if ('status' in data) {\n      /**\n       * The status of this presence\n       * @type {PresenceStatus}\n       */\n      this.status = data.status;\n    } else {\n      this.status ??= 'offline';\n    }\n    if ('activities' in data) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else {\n      this.activities ??= [];\n    }\n    if ('client_status' in data) {\n      /**\n       * The devices this presence is on\n       * @type {?Object}\n       * @property {?ClientPresenceStatus} web The current presence in the web application\n       * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n       * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n       */\n      this.clientStatus = data.client_status;\n    } else {\n      this.clientStatus ??= null;\n    }\n    return this;\n  }\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return this === presence || presence && this.status === presence.status && this.activities.length === presence.activities.length && this.activities.every((activity, index) => activity.equals(presence.activities[index])) && this.clientStatus?.web === presence.clientStatus?.web && this.clientStatus?.mobile === presence.clientStatus?.mobile && this.clientStatus?.desktop === presence.clientStatus?.desktop;\n  }\n  toJSON() {\n    return flatten(this);\n  }\n}\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    /**\n     * The presence of the Activity\n     * @type {Presence}\n     * @readonly\n     * @name Activity#presence\n     */\n    Object.defineProperty(this, 'presence', {\n      value: presence\n    });\n\n    /**\n     * The activity's name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The activity status's type\n     * @type {ActivityType}\n     */\n    this.type = data.type;\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url ?? null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details ?? null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state ?? null;\n\n    /**\n     * The id of the application associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationId = data.application_id ?? null;\n\n    /**\n     * Represents timestamps of an activity\n     * @typedef {Object} ActivityTimestamps\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n\n    /**\n     * Timestamps for the activity\n     * @type {?ActivityTimestamps}\n     */\n    this.timestamps = data.timestamps ? {\n      start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n      end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null\n    } : null;\n\n    /**\n     * Represents a party of an activity\n     * @typedef {Object} ActivityParty\n     * @property {?string} id The party's id\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n\n    /**\n     * Party of the activity\n     * @type {?ActivityParty}\n     */\n    this.party = data.party ?? null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlagsBitField>}\n     */\n    this.flags = new ActivityFlagsBitField(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * The labels of the buttons of this rich presence\n     * @type {string[]}\n     */\n    this.buttons = data.buttons ?? [];\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = data.created_at;\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return this === activity || activity && this.name === activity.name && this.type === activity.type && this.url === activity.url && this.state === activity.state && this.details === activity.details && this.emoji?.id === activity.emoji?.id && this.emoji?.name === activity.emoji?.name;\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activity's name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    /**\n     * The activity of the RichPresenceAssets\n     * @type {Activity}\n     * @readonly\n     * @name RichPresenceAssets#activity\n     */\n    Object.defineProperty(this, 'activity', {\n      value: activity\n    });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text ?? null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text ?? null;\n\n    /**\n     * The large image asset's id\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image ?? null;\n\n    /**\n     * The small image asset's id\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image ?? null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  smallImageURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.smallImage) return null;\n    if (this.smallImage.includes(':')) {\n      const [platform, id] = this.smallImage.split(':');\n      switch (platform) {\n        case 'mp':\n          return `https://media.discordapp.net/${id}`;\n        default:\n          return null;\n      }\n    }\n    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.smallImage, options);\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  largeImageURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.largeImage) return null;\n    if (this.largeImage.includes(':')) {\n      const [platform, id] = this.largeImage.split(':');\n      switch (platform) {\n        case 'mp':\n          return `https://media.discordapp.net/${id}`;\n        default:\n          return null;\n      }\n    }\n    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.largeImage, options);\n  }\n}\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;","map":{"version":3,"names":["Base","require","Emoji","ActivityFlagsBitField","flatten","Presence","constructor","client","data","arguments","length","undefined","userId","user","id","guild","_patch","users","resolve","member","members","status","activities","map","activity","Activity","clientStatus","client_status","_clone","clone","Object","assign","create","equals","presence","every","index","web","mobile","desktop","toJSON","defineProperty","value","name","type","url","details","state","applicationId","application_id","timestamps","start","Date","Number","end","party","assets","RichPresenceAssets","flags","freeze","emoji","buttons","createdTimestamp","created_at","createdAt","toString","largeText","large_text","smallText","small_text","largeImage","large_image","smallImage","small_image","smallImageURL","options","includes","platform","split","rest","cdn","appAsset","largeImageURL","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/Presence.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Emoji } = require('./Emoji');\nconst ActivityFlagsBitField = require('../util/ActivityFlagsBitField');\nconst { flatten } = require('../util/Util');\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyId] Id of the party represented in activity\n * @property {MessageActivityType} type Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n * @extends {Base}\n */\nclass Presence extends Base {\n  constructor(client, data = {}) {\n    super(client);\n\n    /**\n     * The presence's user id\n     * @type {Snowflake}\n     */\n    this.userId = data.user.id;\n\n    /**\n     * The guild this presence is in\n     * @type {?Guild}\n     */\n    this.guild = data.guild ?? null;\n\n    this._patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.userId);\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.resolve(this.userId);\n  }\n\n  _patch(data) {\n    if ('status' in data) {\n      /**\n       * The status of this presence\n       * @type {PresenceStatus}\n       */\n      this.status = data.status;\n    } else {\n      this.status ??= 'offline';\n    }\n\n    if ('activities' in data) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else {\n      this.activities ??= [];\n    }\n\n    if ('client_status' in data) {\n      /**\n       * The devices this presence is on\n       * @type {?Object}\n       * @property {?ClientPresenceStatus} web The current presence in the web application\n       * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n       * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n       */\n      this.clientStatus = data.client_status;\n    } else {\n      this.clientStatus ??= null;\n    }\n\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return (\n      this === presence ||\n      (presence &&\n        this.status === presence.status &&\n        this.activities.length === presence.activities.length &&\n        this.activities.every((activity, index) => activity.equals(presence.activities[index])) &&\n        this.clientStatus?.web === presence.clientStatus?.web &&\n        this.clientStatus?.mobile === presence.clientStatus?.mobile &&\n        this.clientStatus?.desktop === presence.clientStatus?.desktop)\n    );\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n}\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    /**\n     * The presence of the Activity\n     * @type {Presence}\n     * @readonly\n     * @name Activity#presence\n     */\n    Object.defineProperty(this, 'presence', { value: presence });\n\n    /**\n     * The activity's name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The activity status's type\n     * @type {ActivityType}\n     */\n    this.type = data.type;\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url ?? null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details ?? null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state ?? null;\n\n    /**\n     * The id of the application associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationId = data.application_id ?? null;\n\n    /**\n     * Represents timestamps of an activity\n     * @typedef {Object} ActivityTimestamps\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n\n    /**\n     * Timestamps for the activity\n     * @type {?ActivityTimestamps}\n     */\n    this.timestamps = data.timestamps\n      ? {\n          start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n          end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null,\n        }\n      : null;\n\n    /**\n     * Represents a party of an activity\n     * @typedef {Object} ActivityParty\n     * @property {?string} id The party's id\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n\n    /**\n     * Party of the activity\n     * @type {?ActivityParty}\n     */\n    this.party = data.party ?? null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlagsBitField>}\n     */\n    this.flags = new ActivityFlagsBitField(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * The labels of the buttons of this rich presence\n     * @type {string[]}\n     */\n    this.buttons = data.buttons ?? [];\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = data.created_at;\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return (\n      this === activity ||\n      (activity &&\n        this.name === activity.name &&\n        this.type === activity.type &&\n        this.url === activity.url &&\n        this.state === activity.state &&\n        this.details === activity.details &&\n        this.emoji?.id === activity.emoji?.id &&\n        this.emoji?.name === activity.emoji?.name)\n    );\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activity's name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    /**\n     * The activity of the RichPresenceAssets\n     * @type {Activity}\n     * @readonly\n     * @name RichPresenceAssets#activity\n     */\n    Object.defineProperty(this, 'activity', { value: activity });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text ?? null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text ?? null;\n\n    /**\n     * The large image asset's id\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image ?? null;\n\n    /**\n     * The small image asset's id\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image ?? null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  smallImageURL(options = {}) {\n    if (!this.smallImage) return null;\n    if (this.smallImage.includes(':')) {\n      const [platform, id] = this.smallImage.split(':');\n      switch (platform) {\n        case 'mp':\n          return `https://media.discordapp.net/${id}`;\n        default:\n          return null;\n      }\n    }\n\n    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.smallImage, options);\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  largeImageURL(options = {}) {\n    if (!this.largeImage) return null;\n    if (this.largeImage.includes(':')) {\n      const [platform, id] = this.largeImage.split(':');\n      switch (platform) {\n        case 'mp':\n          return `https://media.discordapp.net/${id}`;\n        default:\n          return null;\n      }\n    }\n\n    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.largeImage, options);\n  }\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}