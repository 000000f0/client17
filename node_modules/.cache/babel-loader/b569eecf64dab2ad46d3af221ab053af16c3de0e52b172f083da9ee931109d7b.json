{"ast":null,"code":"'use strict';\n\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst {\n  ApplicationRoleConnectionMetadata\n} = require('./ApplicationRoleConnectionMetadata');\nconst Team = require('./Team');\nconst Application = require('./interfaces/Application');\nconst ApplicationCommandManager = require('../managers/ApplicationCommandManager');\nconst ApplicationFlagsBitField = require('../util/ApplicationFlagsBitField');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * @typedef {Object} ClientApplicationInstallParams\n * @property {OAuth2Scopes[]} scopes The scopes to add the application to the server with\n * @property {Readonly<PermissionsBitField>} permissions The permissions this bot will request upon joining\n */\n\n/**\n * Represents a Client OAuth2 Application.\n * @extends {Application}\n */\nclass ClientApplication extends Application {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The application command manager for this application\n     * @type {ApplicationCommandManager}\n     */\n    this.commands = new ApplicationCommandManager(this.client);\n  }\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The tags this application has (max of 5)\n     * @type {string[]}\n     */\n    this.tags = data.tags ?? [];\n    if ('install_params' in data) {\n      /**\n       * Settings for this application's default in-app authorization\n       * @type {?ClientApplicationInstallParams}\n       */\n      this.installParams = {\n        scopes: data.install_params.scopes,\n        permissions: new PermissionsBitField(data.install_params.permissions).freeze()\n      };\n    } else {\n      this.installParams ??= null;\n    }\n    if ('custom_install_url' in data) {\n      /**\n       * This application's custom installation URL\n       * @type {?string}\n       */\n      this.customInstallURL = data.custom_install_url;\n    } else {\n      this.customInstallURL = null;\n    }\n    if ('flags' in data) {\n      /**\n       * The flags this application has\n       * @type {ApplicationFlagsBitField}\n       */\n      this.flags = new ApplicationFlagsBitField(data.flags).freeze();\n    }\n    if ('cover_image' in data) {\n      /**\n       * The hash of the application's cover image\n       * @type {?string}\n       */\n      this.cover = data.cover_image;\n    } else {\n      this.cover ??= null;\n    }\n    if ('rpc_origins' in data) {\n      /**\n       * The application's RPC origins, if enabled\n       * @type {string[]}\n       */\n      this.rpcOrigins = data.rpc_origins;\n    } else {\n      this.rpcOrigins ??= [];\n    }\n    if ('bot_require_code_grant' in data) {\n      /**\n       * If this application's bot requires a code grant when using the OAuth2 flow\n       * @type {?boolean}\n       */\n      this.botRequireCodeGrant = data.bot_require_code_grant;\n    } else {\n      this.botRequireCodeGrant ??= null;\n    }\n    if ('bot_public' in data) {\n      /**\n       * If this application's bot is public\n       * @type {?boolean}\n       */\n      this.botPublic = data.bot_public;\n    } else {\n      this.botPublic ??= null;\n    }\n    if ('role_connections_verification_url' in data) {\n      /**\n       * This application's role connection verification entry point URL\n       * @type {?string}\n       */\n      this.roleConnectionsVerificationURL = data.role_connections_verification_url;\n    } else {\n      this.roleConnectionsVerificationURL ??= null;\n    }\n\n    /**\n     * The owner of this OAuth application\n     * @type {?(User|Team)}\n     */\n    this.owner = data.team ? new Team(this.client, data.team) : data.owner ? this.client.users._add(data.owner) : this.owner ?? null;\n  }\n\n  /**\n   * Whether this application is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.name;\n  }\n\n  /**\n   * Obtains this application from Discord.\n   * @returns {Promise<ClientApplication>}\n   */\n  async fetch() {\n    const app = await this.client.rest.get(Routes.oauth2CurrentApplication());\n    this._patch(app);\n    return this;\n  }\n\n  /**\n   * Gets this application's role connection metadata records\n   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}\n   */\n  async fetchRoleConnectionMetadataRecords() {\n    const metadata = await this.client.rest.get(Routes.applicationRoleConnectionMetadata(this.client.user.id));\n    return metadata.map(data => new ApplicationRoleConnectionMetadata(data));\n  }\n\n  /**\n   * Data for creating or editing an application role connection metadata.\n   * @typedef {Object} ApplicationRoleConnectionMetadataEditOptions\n   * @property {string} name The name of the metadata field\n   * @property {?Object<Locale, string>} [nameLocalizations] The name localizations for the metadata field\n   * @property {string} description The description of the metadata field\n   * @property {?Object<Locale, string>} [descriptionLocalizations] The description localizations for the metadata field\n   * @property {string} key The dictionary key of the metadata field\n   * @property {ApplicationRoleConnectionMetadataType} type The type of the metadata field\n   */\n\n  /**\n   * Updates this application's role connection metadata records\n   * @param {ApplicationRoleConnectionMetadataEditOptions[]} records The new role connection metadata records\n   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}\n   */\n  async editRoleConnectionMetadataRecords(records) {\n    const newRecords = await this.client.rest.put(Routes.applicationRoleConnectionMetadata(this.client.user.id), {\n      body: records.map(record => ({\n        type: record.type,\n        key: record.key,\n        name: record.name,\n        name_localizations: record.nameLocalizations,\n        description: record.description,\n        description_localizations: record.descriptionLocalizations\n      }))\n    });\n    return newRecords.map(data => new ApplicationRoleConnectionMetadata(data));\n  }\n}\nmodule.exports = ClientApplication;","map":{"version":3,"names":["Routes","require","ApplicationRoleConnectionMetadata","Team","Application","ApplicationCommandManager","ApplicationFlagsBitField","PermissionsBitField","ClientApplication","constructor","client","data","commands","_patch","tags","installParams","scopes","install_params","permissions","freeze","customInstallURL","custom_install_url","flags","cover","cover_image","rpcOrigins","rpc_origins","botRequireCodeGrant","bot_require_code_grant","botPublic","bot_public","roleConnectionsVerificationURL","role_connections_verification_url","owner","team","users","_add","partial","name","fetch","app","rest","get","oauth2CurrentApplication","fetchRoleConnectionMetadataRecords","metadata","applicationRoleConnectionMetadata","user","id","map","editRoleConnectionMetadataRecords","records","newRecords","put","body","record","type","key","name_localizations","nameLocalizations","description","description_localizations","descriptionLocalizations","module","exports"],"sources":["/Users/williedejongh/Downloads/ark3-main4/node_modules/discord.js/src/structures/ClientApplication.js"],"sourcesContent":["'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst { ApplicationRoleConnectionMetadata } = require('./ApplicationRoleConnectionMetadata');\nconst Team = require('./Team');\nconst Application = require('./interfaces/Application');\nconst ApplicationCommandManager = require('../managers/ApplicationCommandManager');\nconst ApplicationFlagsBitField = require('../util/ApplicationFlagsBitField');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * @typedef {Object} ClientApplicationInstallParams\n * @property {OAuth2Scopes[]} scopes The scopes to add the application to the server with\n * @property {Readonly<PermissionsBitField>} permissions The permissions this bot will request upon joining\n */\n\n/**\n * Represents a Client OAuth2 Application.\n * @extends {Application}\n */\nclass ClientApplication extends Application {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The application command manager for this application\n     * @type {ApplicationCommandManager}\n     */\n    this.commands = new ApplicationCommandManager(this.client);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The tags this application has (max of 5)\n     * @type {string[]}\n     */\n    this.tags = data.tags ?? [];\n\n    if ('install_params' in data) {\n      /**\n       * Settings for this application's default in-app authorization\n       * @type {?ClientApplicationInstallParams}\n       */\n      this.installParams = {\n        scopes: data.install_params.scopes,\n        permissions: new PermissionsBitField(data.install_params.permissions).freeze(),\n      };\n    } else {\n      this.installParams ??= null;\n    }\n\n    if ('custom_install_url' in data) {\n      /**\n       * This application's custom installation URL\n       * @type {?string}\n       */\n      this.customInstallURL = data.custom_install_url;\n    } else {\n      this.customInstallURL = null;\n    }\n\n    if ('flags' in data) {\n      /**\n       * The flags this application has\n       * @type {ApplicationFlagsBitField}\n       */\n      this.flags = new ApplicationFlagsBitField(data.flags).freeze();\n    }\n\n    if ('cover_image' in data) {\n      /**\n       * The hash of the application's cover image\n       * @type {?string}\n       */\n      this.cover = data.cover_image;\n    } else {\n      this.cover ??= null;\n    }\n\n    if ('rpc_origins' in data) {\n      /**\n       * The application's RPC origins, if enabled\n       * @type {string[]}\n       */\n      this.rpcOrigins = data.rpc_origins;\n    } else {\n      this.rpcOrigins ??= [];\n    }\n\n    if ('bot_require_code_grant' in data) {\n      /**\n       * If this application's bot requires a code grant when using the OAuth2 flow\n       * @type {?boolean}\n       */\n      this.botRequireCodeGrant = data.bot_require_code_grant;\n    } else {\n      this.botRequireCodeGrant ??= null;\n    }\n\n    if ('bot_public' in data) {\n      /**\n       * If this application's bot is public\n       * @type {?boolean}\n       */\n      this.botPublic = data.bot_public;\n    } else {\n      this.botPublic ??= null;\n    }\n\n    if ('role_connections_verification_url' in data) {\n      /**\n       * This application's role connection verification entry point URL\n       * @type {?string}\n       */\n      this.roleConnectionsVerificationURL = data.role_connections_verification_url;\n    } else {\n      this.roleConnectionsVerificationURL ??= null;\n    }\n\n    /**\n     * The owner of this OAuth application\n     * @type {?(User|Team)}\n     */\n    this.owner = data.team\n      ? new Team(this.client, data.team)\n      : data.owner\n      ? this.client.users._add(data.owner)\n      : this.owner ?? null;\n  }\n\n  /**\n   * Whether this application is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.name;\n  }\n\n  /**\n   * Obtains this application from Discord.\n   * @returns {Promise<ClientApplication>}\n   */\n  async fetch() {\n    const app = await this.client.rest.get(Routes.oauth2CurrentApplication());\n    this._patch(app);\n    return this;\n  }\n\n  /**\n   * Gets this application's role connection metadata records\n   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}\n   */\n  async fetchRoleConnectionMetadataRecords() {\n    const metadata = await this.client.rest.get(Routes.applicationRoleConnectionMetadata(this.client.user.id));\n    return metadata.map(data => new ApplicationRoleConnectionMetadata(data));\n  }\n\n  /**\n   * Data for creating or editing an application role connection metadata.\n   * @typedef {Object} ApplicationRoleConnectionMetadataEditOptions\n   * @property {string} name The name of the metadata field\n   * @property {?Object<Locale, string>} [nameLocalizations] The name localizations for the metadata field\n   * @property {string} description The description of the metadata field\n   * @property {?Object<Locale, string>} [descriptionLocalizations] The description localizations for the metadata field\n   * @property {string} key The dictionary key of the metadata field\n   * @property {ApplicationRoleConnectionMetadataType} type The type of the metadata field\n   */\n\n  /**\n   * Updates this application's role connection metadata records\n   * @param {ApplicationRoleConnectionMetadataEditOptions[]} records The new role connection metadata records\n   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}\n   */\n  async editRoleConnectionMetadataRecords(records) {\n    const newRecords = await this.client.rest.put(Routes.applicationRoleConnectionMetadata(this.client.user.id), {\n      body: records.map(record => ({\n        type: record.type,\n        key: record.key,\n        name: record.name,\n        name_localizations: record.nameLocalizations,\n        description: record.description,\n        description_localizations: record.descriptionLocalizations,\n      })),\n    });\n\n    return newRecords.map(data => new ApplicationRoleConnectionMetadata(data));\n  }\n}\n\nmodule.exports = ClientApplication;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}